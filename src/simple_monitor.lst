
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
0800b1d0 l    d  .rodata	00000000 .rodata
0801bbcc l    d  .ARM	00000000 .ARM
0801bbd4 l    d  .init_array	00000000 .init_array
0801bbdc l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000a9c l    d  .bss	00000000 .bss
2000476c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801c67c l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800639c l       .text	00000000 LoopCopyDataInit
08006394 l       .text	00000000 CopyDataInit
080063b0 l       .text	00000000 LoopFillZerobss
080063aa l       .text	00000000 FillZerobss
080063c2 l       .text	00000000 LoopForever
080063dc l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800b1b4 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 deregister_tm_clones
080001b0 l     F .text	00000000 register_tm_clones
080001e0 l     F .text	00000000 __do_global_dtors_aux
20000a9c l       .bss	00000000 completed.6140
0801bbdc l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000210 l     F .text	00000000 frame_dummy
20000aa0 l       .bss	00000000 object.6145
0801bbd8 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 cooperative.c
080014b4 l     F .text	00000024 TaskShell
00000000 l    df *ABS*	00000000 cooperative_exe.c
00000000 l    df *ABS*	00000000 dc_motor.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000abc l     O .bss	00000004 count.5760
20000ac0 l     O .bss	00000004 saved.5761
20000004 l     O .data	00000004 buf.5762
20000008 l     O .data	00000004 printPrompt.5763
0800b6e6 l     O .rodata	00000006 __FUNCTION__.5777
00000000 l    df *ABS*	00000000 dump.c
20000010 l     O .data	00000004 count.5189
20000ac4 l     O .bss	00000004 address.5188
00000000 l    df *ABS*	00000000 syscall.c
20000ac8 l     O .bss	00000004 heap_end.5621
00000000 l    df *ABS*	00000000 terminal.c
08001cc8 l     F .text	00000080 USBD_CDC_DataIn
20000acc l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000bf0 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08003f88 l     F .text	00000024 I2C_TransferConfig
08003fac l     F .text	00000090 I2C_IsAcknowledgeFailed
0800403c l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
080040a4 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
080040f8 l     F .text	00000066 I2C_RequestMemoryWrite
0800415e l     F .text	00000064 I2C_RequestMemoryRead
080041c2 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
080044de l     F .text	0000008a SPI_WaitFlagStateUntilTimeout
08004568 l     F .text	0000009a SPI_WaitFifoStateUntilTimeout
08004602 l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 stm32f3xx_hal_tim.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000bf4 l     O .bss	00000001 cfgidx.10049
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
080053ec l     F .text	00000012 USBD_CDC_DataIn
080053fe l     F .text	00000028 USBD_CDC_EP0_RxReady
08005428 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08005434 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
08005440 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
08005458 l     F .text	0000002e USBD_CDC_DataOut
08005486 l     F .text	0000005a USBD_CDC_Setup
080054e0 l     F .text	0000003a USBD_CDC_DeInit
0800551a l     F .text	00000086 USBD_CDC_Init
20000094 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000bf8 l     O .bss	00000230 mem.10296
00000000 l    df *ABS*	00000000 usbd_desc.c
0800585c l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
08005930 l     F .text	00000004 CDC_Itf_DeInit
08005934 l     F .text	00000020 CDC_Itf_Receive
08005954 l     F .text	00000018 CDC_Itf_Init
0800596c l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
080059c4 l     F .text	00000080 SPIx_Init
08005a44 l     F .text	00000040 SPIx_WriteRead
08005a84 l     F .text	0000006c I2Cx_Init
20000e28 l     O .bss	00000060 SpiHandle
20000e88 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000ec0 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000ec4 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
08008094 l     F .text	00000078 __sbprintf
0801ba50 l     O .rodata	00000010 zeroes.6775
0801baa4 l     O .rodata	00000010 blanks.6774
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08008280 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
08008298 l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
2000062c l     O .data	00000038 lconv
20000664 l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0801bbc0 l     O .rodata	0000000c p05.5266
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800ae54 l     F .text	0000007a __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000200 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
00000000 l       *UND*	00000000 HAL_TIMEx_CommutationCallback
0801bbe0 l       .fini_array	00000000 __fini_array_end
20000a9c l       .bss	00000000 __bss_start__
2000476c l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
0801bbdc l       .fini_array	00000000 __fini_array_start
0801bbdc l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
0801bbd4 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
0801bbd4 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 HAL_TIMEx_DMACommutationCplt
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 HAL_TIMEx_BreakCallback
0801bbd4 l       .init_array	00000000 __preinit_array_start
080063dc  w    F .text	00000002 RTC_Alarm_IRQHandler
08016950 g     O .rodata	00000010 RTC_BKP19R_fields
20000efc g     O .bss	00000004 rc
0801b89c g     O .rodata	00000010 APBAHBPrescTable
0800cac4 g     O .rodata	00000058 TIM2_SR_fields
08013fd8 g     O .rodata	00000108 CAN_F10R1_fields
080177d0 g     O .rodata	00000010 TIM16_DMAR_fields
08006544 g     F .text	00000012 putchar
080063dc  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08016540 g     O .rodata	00000010 I2C1_RXDR_fields
08005f58 g     F .text	0000001e LSM303DLHC_AccFilterCmd
080063dc  w    F .text	00000002 TIM8_CC_IRQHandler
08016b20 g     O .rodata	00000038 TIM6_CR1_fields
0800c700 g     O .rodata	00000050 I2C1_ICR_fields
08001cc0 g     F .text	00000004 _isatty_r
20003980 g     O .bss	00000050 input_b
08000c28 g     F .text	00000012 .hidden __aeabi_dcmple
08016810 g     O .rodata	00000010 TIM2_PSC_fields
0800d31c g     O .rodata	00000030 TIM17_CCMR1_Output_fields
08006728 g     F .text	000000ba strcpy
08001488 g     F .text	0000002c TaskKill
08016db0 g     O .rodata	00000058 COMP_COMP5_CSR_fields
08000d10 g     F .text	0000002e .hidden __gnu_uldivmod_helper
0801285c g     O .rodata	00000010 I2C1_TXDR_fields
08006558 g     F .text	00000062 _puts_r
08004cb8  w    F .text	000000c6 HAL_TIM_PWM_ConfigChannel
080058f8 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800e914 g     O .rodata	00000108 CAN_F19R1_fields
08000b64 g     F .text	0000007a .hidden __cmpdf2
08002074 g     F .text	0000003c DecodeWriteRegister
08003e3a g     F .text	000000c8 HAL_PCD_EP_ClrStall
08013c2c g     O .rodata	00000010 TIM16_CCR1_fields
080063dc  w    F .text	00000002 DebugMon_Handler
08001cc4 g     F .text	00000004 _lseek_r
0801308c g     O .rodata	00000028 FPU_MVFR1_fields
080056f4 g     F .text	0000001a HAL_PCD_ResetCallback
08003f36 g     F .text	0000002e PCD_WritePMA
080049a6 g     F .text	0000001a HAL_TIM_Base_Start
08017a80 g     O .rodata	00000108 CAN_F22R1_fields
0800cd04 g     O .rodata	000000e8 CAN_FA1R_fields
20003a20 g     O .bss	00000224 hUSBDDevice
0800eb24 g     O .rodata	00000050 TIM2_SMCR_fields
0800d2c4 g     O .rodata	00000028 NVIC_IPR1_fields
0801c6a0 g     O .parsetable	0000000c CmdTestE
080016c0 g     F .text	00000040 CmdTaskKill
08000b64 g     F .text	0000007a .hidden __eqdf2
08012d5c g     O .rodata	00000108 CAN_F14R1_fields
08013fc8 g     O .rodata	00000010 TIM8_PSC_fields
0801205c g     O .rodata	00000038 TIM15_EGR_fields
08000d44 g     F .text	000002ac .hidden __divdi3
08001d48 g     F .text	00000050 CmdStats
08006254 g     F .text	0000002e L3GD20_FilterConfig
08003f02 g     F .text	00000034 HAL_PCDEx_PMAConfig
08014a0c g     O .rodata	000000fc TIM2_registers
080161f4 g     O .rodata	00000060 TIM15_DIER_fields
0800db98 g     O .rodata	00000010 DMA1_CMAR3_fields
0800e3ac g     O .rodata	00000108 GPIOA_BSRR_fields
0801b450 g     O .rodata	00000068 DMA1_CCR7_fields
08003548 g     F .text	000001b6 HAL_PCD_EP_Close
0801320c g     O .rodata	00000010 TSC_IOG6CR_fields
0800dba8 g     O .rodata	00000030 ADC1_SQR1_fields
080006d4 g     F .text	0000005a .hidden __floatdidf
0800da68 g     O .rodata	000000e8 CAN_FS1R_fields
08013b64 g     O .rodata	00000038 TIM1_CCMR2_Input_fields
0800c2c0 g     O .rodata	00000018 RTC_SHIFTR_fields
0800651c g     F .text	00000028 printf
080061d8 g     F .text	00000040 L3GD20_EnableIT
080169a8 g     O .rodata	00000030 CAN_TI1R_fields
08004e26 g     F .text	00000016 USBD_SetClassConfig
08013784 g     O .rodata	00000028 NVIC_IPR14_fields
0800b140 g     F .text	00000058 _wcrtomb_r
080063dc  w    F .text	00000002 TIM1_CC_IRQHandler
08002f08 g     F .text	00000064 HAL_NVIC_SetPriority
0800f0fc g     O .rodata	00000150 ADC1_registers
080056dc g     F .text	00000010 HAL_PCD_DataInStageCallback
08016960 g     O .rodata	00000020 TIM2_CR2_fields
080136b4 g     O .rodata	00000010 Flash_WRPR_fields
0800ae2c g     F .text	00000020 __sseek
080094ac g     F .text	000000f6 __sinit
0800e664 g     O .rodata	00000068 DMA1_CCR2_fields
0800aee8 g     F .text	000000a4 __swbuf_r
080063dc  w    F .text	00000002 HardFault_Handler
0800cec4 g     O .rodata	00000108 TSC_IOHCR_fields
0801270c g     O .rodata	00000028 CRC_CR_fields
0800cea4 g     O .rodata	00000010 NVIC_ISER0_fields
0800a320 g     F .text	00000002 __malloc_unlock
08015520 g     O .rodata	00000010 TIM15_ARR_fields
08017410 g     O .rodata	00000010 RTC_BKP24R_fields
08004aa0 g     F .text	00000098 TIM_OC1_SetConfig
08012c64 g     O .rodata	00000010 TIM1_CCR3_fields
0801b4d0 g     O .rodata	00000010 TIM1_DMAR_fields
0800e324 g     O .rodata	00000010 TIM15_CCR1_fields
080063dc  w    F .text	00000002 USB_HP_IRQHandler
080167e8 g     O .rodata	00000018 USART1_RTOR_fields
08010d30 g     O .rodata	00000078 RCC_AHBENR_fields
080144dc g     O .rodata	00000020 TIM2_CNT_fields
08015408 g     O .rodata	00000090 I2C1_registers
08001408 g     F .text	00000004 SysTick_Handler
080115e0 g     O .rodata	00000010 RTC_WPR_fields
080174a0 g     O .rodata	00000010 RTC_SSR_fields
08012f64 g     O .rodata	00000010 TSC_IOG2CR_fields
0800312c g     F .text	0000000a HAL_GPIO_WritePin
080055f8 g     F .text	00000026 USBD_CDC_ReceivePacket
080063dc  w    F .text	00000002 PVD_IRQHandler
0800ceb4 g     O .rodata	00000010 DMA1_CPAR7_fields
08005f1e g     F .text	0000001c LSM303DLHC_AccRebootCmd
080144fc g     O .rodata	00000018 TIM6_CNT_fields
08015350 g     O .rodata	00000080 TIM1_DIER_fields
080056ec g     F .text	00000008 HAL_PCD_SOFCallback
080120ec g     O .rodata	00000010 NVIC_ICPR0_fields
0800a258 g     F .text	000000c2 memmove
080063dc  w    F .text	00000002 TAMP_STAMP_IRQHandler
08005c34 g     F .text	00000068 GYRO_IO_Init
08017278 g     O .rodata	00000028 NVIC_IPR2_fields
0801bbe0 g       *ABS*	00000000 _sidata
08002e28 g     F .text	00000038 HAL_RCC_GetHCLKFreq
080063dc  w    F .text	00000002 PendSV_Handler
0801c694 g     O .parsetable	0000000c CmdButtonE
080158a4 g     O .rodata	00000010 NVIC_ICPR1_fields
080063dc  w    F .text	00000002 NMI_Handler
08002f6c g     F .text	00000018 HAL_NVIC_EnableIRQ
0800a324 g     F .text	0000004c _Balloc
0801bbd4 g       .ARM	00000000 __exidx_end
08006858 g     F .text	00000064 __strtok_r
080063dc  w    F .text	00000002 EXTI3_IRQHandler
08002dbc g     F .text	0000006c HAL_RCC_GetSysClockFreq
08005b74 g     F .text	0000001c BSP_LED_Off
0801b178 g     O .rodata	00000010 DMA1_CNDTR5_fields
080110b8 g     O .rodata	000000a0 TIM8_CCER_fields
08011940 g     O .rodata	00000108 CAN_F8R2_fields
08000b54 g     F .text	0000008a .hidden __gtdf2
0801c73c g       .parsetable	00000000 _parsetable_end
0801605c g     O .rodata	00000050 RCC_AHBRSTR_fields
080063ec g     F .text	0000000c __errno
0800cdec g     O .rodata	00000010 RTC_BKP6R_fields
0800d410 g     O .rodata	00000030 CAN_TI2R_fields
08005028 g     F .text	00000218 USBD_StdDevReq
08004214 g     F .text	00000090 HAL_I2C_Init
08015698 g     O .rodata	00000010 NVIC_ISER2_fields
0801c724 g     O .parsetable	0000000c CmdWE
080042a4  w    F .text	00000002 HAL_I2C_MspDeInit
08010470 g     O .rodata	00000028 CAN_RDH0R_fields
08012c0c g     O .rodata	00000028 FPU_FPDSCR_fields
08005844 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08002e60  w    F .text	00000002 HAL_MspInit
0800e7fc g     O .rodata	00000108 CAN_F0R2_fields
0800c208 g     O .rodata	00000010 TSC_IOG8CR_fields
20000f00 g     O .bss	00000230 tasks
080057dc g     F .text	00000026 USBD_LL_IsStallEP
08016ca8 g     O .rodata	00000108 CAN_F0R1_fields
08011a48 g     O .rodata	00000028 TIM15_SMCR_fields
08005790 g     F .text	0000000e USBD_LL_Start
08005d8c g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
08001700 g     F .text	00000008 CmdTaskTest
08005e50 g     F .text	00000030 BSP_ACCELERO_Init
08004e1c g     F .text	0000000a USBD_Start
08001cb6 g     F .text	0000000a _fstat_r
08003136 g     F .text	00000008 HAL_GPIO_TogglePin
080159f4 g     O .rodata	00000050 TIM8_CR1_fields
0801398c g     O .rodata	00000010 Flash_AR_fields
0800fab4 g     O .rodata	00000108 CAN_F2R1_fields
080128e4 g     O .rodata	00000060 COMP_COMP4_CSR_fields
0800df80 g     O .rodata	00000048 GPIOB_AFRH_fields
0800b1cc g       .text	00000000 _etext
0801289c g     O .rodata	00000018 EXTI_PR2_fields
080137c4 g     O .rodata	00000030 USB_FS_FNR_fields
20000a9c g       .bss	00000000 _sbss
0801262c g     O .rodata	00000060 COMP_registers
080158b4 g     O .rodata	00000108 CAN_F4R2_fields
08005840 g     F .text	00000002 USBD_static_free
0801204c g     O .rodata	00000010 DMA1_CMAR1_fields
0800f838 g     O .rodata	00000068 TIM2_DIER_fields
08000bf0 g     F .text	00000010 .hidden __aeabi_cdcmple
08010690 g     O .rodata	00000010 TSC_IOG1CR_fields
08017788 g     O .rodata	00000028 TIM17_CCER_fields
08017580 g     O .rodata	00000010 TIM8_RCR_fields
08013db4 g     O .rodata	00000018 TIM16_CNT_fields
0800f630 g     O .rodata	00000108 GPIOB_BSRR_fields
08010b50 g     O .rodata	00000108 CAN_F16R2_fields
0800e5f4 g     O .rodata	00000020 ADC1_OFR1_fields
08016254 g     O .rodata	00000108 CAN_F24R2_fields
0800fe04 g     O .rodata	00000010 RTC_BKP23R_fields
0801342c g     O .rodata	00000010 TIM15_CCR2_fields
0800d780 g     O .rodata	000000a0 ADC1_CFGR_fields
08001638 g     F .text	00000024 task4
0800d22c g     O .rodata	00000010 RTC_BKP13R_fields
08004e0e g     F .text	0000000e USBD_RegisterClass
08010db8 g     O .rodata	00000108 CAN_F20R1_fields
08010c58 g     O .rodata	00000068 USART1_ICR_fields
08001548 g     F .text	0000003c task0
0801b794 g     O .rodata	00000108 CAN_F25R2_fields
080177b0 g     O .rodata	00000010 TSC_IOG4CR_fields
08010ec0 g     O .rodata	00000108 CAN_F27R2_fields
0801b704 g     O .rodata	00000080 TIM8_SR_fields
0800c6a8 g     O .rodata	00000058 USB_FS_ISTR_fields
080154f0 g     O .rodata	00000010 DMA1_CMAR2_fields
0800e1a0 g     O .rodata	00000010 RTC_BKP26R_fields
080120bc g     O .rodata	00000030 ADC1_SQR2_fields
080115f0 g     O .rodata	00000018 TIM17_CNT_fields
0800e050 g     O .rodata	00000010 WWDG_SR_fields
0800f9c0 g     O .rodata	0000009c EXTI_registers
08002fb0 g     F .text	00000170 HAL_GPIO_Init
08004fcc g     F .text	00000006 USBD_LL_SetSpeed
2000017c g     O .data	00000004 BUTTON_PORT
08005e80 g     F .text	00000014 BSP_ACCELERO_GetXYZ
0800fde4 g     O .rodata	00000010 NVIC_ICTR_fields
0800d0d4 g     O .rodata	00000010 TIM6_ARR_fields
080104a8 g     O .rodata	000000b8 CAN_TSR_fields
08001b84 g     F .text	000000a4 DumpBuffer
080118b8 g     O .rodata	00000088 GPIOA_IDR_fields
0800c128 g     O .rodata	00000058 USB_FS_USB_EP3R_fields
08005710 g     F .text	00000002 HAL_PCD_ResumeCallback
0800028c g     F .text	00000134 memcpy
08000be0 g     F .text	00000020 .hidden __aeabi_cdrcmple
08016820 g     O .rodata	00000108 CAN_F7R2_fields
0801640c g     O .rodata	00000018 TIM1_CNT_fields
08005c9c g     F .text	00000044 GYRO_IO_Write
080065cc g     F .text	00000112 setvbuf
0800126c g     F .text	0000005c CmdLED
20000a9c g     O .data	00000000 .hidden __TMC_END__
0800fc54 g     O .rodata	00000080 TIM1_SR_fields
0800e6cc g     O .rodata	00000028 NVIC_IPR13_fields
0800d2ec g     O .rodata	00000010 TIM15_PSC_fields
08005270 g     F .text	000000b4 USBD_StdEPReq
080094a0 g     F .text	0000000c _cleanup_r
08014198 g     O .rodata	00000048 GPIOA_AFRH_fields
08000664 g     F .text	00000022 .hidden __floatsidf
080156f0 g     O .rodata	00000018 DAC_DHR12RD_fields
08015a94 g     O .rodata	00000060 COMP_COMP2_CSR_fields
08015708 g     O .rodata	00000080 TIM8_DIER_fields
0801b4b8 g     O .rodata	00000018 ADC1_DIFSEL_fields
08000b5c g     F .text	00000082 .hidden __ltdf2
08005bac g     F .text	00000074 BSP_PB_Init
080063dc  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
080063dc  w    F .text	00000002 EXTI0_IRQHandler
08016e98 g     O .rodata	00000018 TIM8_OR_fields
080063dc  w    F .text	00000002 I2C2_EV_IRQHandler
0800d3d0 g     O .rodata	00000028 CAN_TDH0R_fields
0800fbcc g     O .rodata	00000058 USB_FS_USB_EP4R_fields
08000cb4 g     F .text	00000000 .hidden __aeabi_uldivmod
0801286c g     O .rodata	00000030 WWDG_registers
0800c488 g     O .rodata	00000010 TIM17_RCR_fields
080065bc g     F .text	00000010 puts
080053c0 g     F .text	00000016 USBD_CtlSendStatus
080063dc  w    F .text	00000002 FPU_IRQHandler
08002ec8  w    F .text	0000001a HAL_Delay
08005240 g     F .text	00000030 USBD_StdItfReq
0800fbbc g     O .rodata	00000010 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
0800ad7c g     F .text	00000054 __fpclassifyd
08016424 g     O .rodata	000000e4 TIM15_registers
080037de g     F .text	00000158 HAL_PCD_EP_Transmit
08000268 g     F .text	00000012 my_Tick
08012b04 g     O .rodata	00000108 CAN_F3R1_fields
08004fea g     F .text	00000028 USBD_ParseSetupRequest
08013afc g     O .rodata	00000018 TIM2_CCR1_fields
08010978 g     O .rodata	00000018 DAC_SWTRIGR_fields
080063dc  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800f4d0 g     O .rodata	00000108 CAN_F13R1_fields
08009c54 g     F .text	00000010 malloc
08011e24 g     O .rodata	00000010 IWDG_RLR_fields
08003f64 g     F .text	00000022 PCD_ReadPMA
080012f0 g     F .text	00000054 CmdGyro
08017460 g     O .rodata	00000018 CAN_FMR_fields
0801bad0 g     O .rodata	000000c8 __mprec_tens
0801b548 g     O .rodata	0000003c OPAMP_registers
08015280 g     O .rodata	00000010 DMA1_CNDTR4_fields
08016c08 g     O .rodata	00000010 NVIC_IABR1_fields
08016ae0 g     O .rodata	00000030 ADC1_2_registers
20000128 g     O .data	0000001c VCP_Desc
08016590 g     O .rodata	000000d8 EXTI_PR1_fields
080063dc  w    F .text	00000002 UsageFault_Handler
08009b4c g     F .text	0000000a __locale_charset
08014db0 g     O .rodata	00000028 TIM8_CCR5_fields
080063dc  w    F .text	00000002 ADC1_2_IRQHandler
20000ed0 g     O .bss	00000004 __malloc_top_pad
200039d0 g     O .bss	00000050 input
08015af4 g     O .rodata	00000108 CAN_F4R1_fields
080137ac g     O .rodata	00000018 ADC1_TR3_fields
0800fcd4 g     O .rodata	00000010 DMA1_CPAR2_fields
0800e060 g     O .rodata	00000050 TIM16_DIER_fields
08003120 g     F .text	0000000c HAL_GPIO_ReadPin
0801283c g     O .rodata	00000010 NVIC_ICER2_fields
08006b34 g     F .text	0000001a strtoul
20003ec0 g     O .bss	00000004 BuffLength
20000684 g     O .data	00000004 __mb_cur_max
08000644 g     F .text	0000001e .hidden __aeabi_ui2d
08009b64 g     F .text	0000000a _localeconv_r
0800e040 g     O .rodata	00000010 TIM8_CCR1_fields
20003ec4 g     O .bss	0000006c UartHandle
08017060 g     O .rodata	00000108 CAN_F9R2_fields
080149fc g     O .rodata	00000010 DAC_DHR12L2_fields
0800a4b4 g     F .text	00000012 __i2b
080097ec g     F .text	00000314 __sfvwrite_r
08004fd2 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
080063dc  w    F .text	00000002 SPI1_IRQHandler
08012c74 g     O .rodata	00000030 CAN_TI0R_fields
080063dc  w    F .text	00000002 CAN_SCE_IRQHandler
080003c0 g     F .text	00000000 .hidden __aeabi_drsub
080171d0 g     O .rodata	00000050 ADC1_SMPR2_fields
08013cc4 g     O .rodata	00000028 NVIC_IPR4_fields
08001c7c g     F .text	00000034 _sbrk_r
0800d204 g     O .rodata	00000028 NVIC_IPR18_fields
08005620 g     F .text	0000009c HAL_PCD_MspInit
08014c28 g     O .rodata	00000018 TIM6_DIER_fields
0800ddd0 g     O .rodata	00000068 TIM1_CCMR1_Output_fields
0801b048 g     O .rodata	000000b8 USART1_ISR_fields
080063dc  w    F .text	00000002 TIM6_DAC_IRQHandler
0800ebf4 g     O .rodata	00000070 I2C1_CR2_fields
08012f54 g     O .rodata	00000010 TIM8_CCR2_fields
08003d98 g     F .text	000000a2 HAL_PCD_EP_SetStall
08001e5c g     F .text	0000000a _read_r
0800c270 g     O .rodata	00000050 TIM1_SMCR_fields
0801316c g     O .rodata	00000038 CAN_ESR_fields
08004de4 g     F .text	0000002a USBD_Init
08015c1c g     O .rodata	00000088 GPIOB_BRR_fields
20003c48 g     O .bss	00000178 hpcd
08000c14 g     F .text	00000012 .hidden __aeabi_dcmplt
0800afec g     F .text	00000082 _fclose_r
08013c3c g     O .rodata	00000020 ADC1_OFR2_fields
0800d34c g     O .rodata	00000018 TIM2_ARR_fields
08005d28 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000ecc g     O .bss	00000004 __malloc_max_sbrked_mem
08017828 g     O .rodata	00000108 CAN_F9R1_fields
0801399c g     O .rodata	00000040 RTC_DR_fields
08016374 g     O .rodata	00000010 TIM1_CCR1_fields
08002f84 g     F .text	0000002c HAL_SYSTICK_Config
08000688 g     F .text	0000003a .hidden __extendsfdf2
08015168 g     O .rodata	00000010 Flash_OPTKEYR_fields
08010270 g     O .rodata	00000020 ADC1_OFR4_fields
20003c44 g     O .bss	00000004 USBDDataIn
08000984 g     F .text	000001d0 .hidden __aeabi_ddiv
080063dc  w    F .text	00000002 TIM8_UP_IRQHandler
20000144 g     O .data	0000001a USBD_StringSerial
080107b8 g     O .rodata	00000108 CAN_F25R1_fields
080175c0 g     O .rodata	00000020 SPI1_I2SPR_fields
08014cb8 g     O .rodata	00000010 ADC1_JDR1_fields
0800165c g     F .text	0000000c TaskCurrent
08015894 g     O .rodata	00000010 IWDG_KR_fields
08016b58 g     O .rodata	00000058 USB_FS_USB_EP0R_fields
080003cc g     F .text	00000276 .hidden __adddf3
08005dd4 g     F .text	0000003c COMPASSACCELERO_IO_Write
08012f74 g     O .rodata	00000108 CAN_F23R2_fields
08012cd4 g     O .rodata	00000048 CRC_registers
0800f428 g     O .rodata	000000a8 USART1_CR1_fields
0800fe44 g     O .rodata	00000264 RTC_registers
08010588 g     O .rodata	00000108 CAN_F5R2_fields
0800f24c g     O .rodata	00000030 TIM17_CR2_fields
0801bbcc g       .ARM	00000000 __exidx_start
0800eb04 g     O .rodata	00000020 TIM16_CCMR1_Input_fields
0800d6f0 g     O .rodata	00000010 Flash_KEYR_fields
08000730 g     F .text	00000254 .hidden __aeabi_dmul
080060e6 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0801363c g     O .rodata	00000068 TIM8_CCMR2_Output_fields
0800df50 g     O .rodata	00000030 PWR_CSR_fields
080161dc g     O .rodata	00000018 RTC_ALRMASSR_fields
20000ab8 g     O .bss	00000004 currentTask
200000a0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08016928 g     O .rodata	00000028 SYSCFG_EXTICR4_fields
0800f750 g     O .rodata	00000010 NVIC_IABR0_fields
0801ba48 g     O .rodata	00000004 _global_impure_ptr
0800f900 g     O .rodata	00000048 FPU_MVFR0_fields
080153e0 g     O .rodata	00000010 TIM16_RCR_fields
0800a99c g     F .text	000003de _realloc_r
0800642c g     F .text	0000005a __libc_init_array
080053ae g     F .text	00000012 USBD_CtlContinueRx
08016800 g     O .rodata	00000010 RTC_BKP12R_fields
0800cbd4 g     O .rodata	00000018 USART1_GTPR_fields
08003202 g     F .text	00000346 HAL_PCD_EP_Open
080063dc  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000ff0 g     F .text	0000027a .hidden __udivdi3
080063dc  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800de48 g     O .rodata	00000018 TIM1_OR_fields
0800c180 g     O .rodata	00000088 GPIOB_PUPDR_fields
08003936 g     F .text	00000462 HAL_PCD_IRQHandler
080018cc g     F .text	00000020 CmdR
0800b080 g     F .text	000000be _fputwc_r
0801bb98 g     O .rodata	00000028 __mprec_bigtens
080174b0 g     O .rodata	00000010 TIM1_CCR4_fields
08000644 g     F .text	0000001e .hidden __floatunsidf
08012014 g     O .rodata	00000028 CAN_TDL1R_fields
0800a778 g     F .text	00000042 __mcmp
08015a6c g     O .rodata	00000028 NVIC_IPR7_fields
08006282 g     F .text	0000002e L3GD20_FilterCmd
08016550 g     O .rodata	00000010 TIM17_DMAR_fields
080042a6 g     F .text	0000002e HAL_I2C_DeInit
08014c10 g     O .rodata	00000018 TIM15_CNT_fields
08004646 g     F .text	000000a4 HAL_SPI_Init
0800edbc g     O .rodata	00000010 RTC_BKP10R_fields
0800f8a0 g     O .rodata	00000050 CAN_MSR_fields
08013854 g     O .rodata	000000a8 RCC_registers
0800b1b4 g     F .text	00000000 _init
08010560 g     O .rodata	00000028 CAN_TDL0R_fields
08012c34 g     O .rodata	00000010 DAC_DHR8R2_fields
080141e0 g     O .rodata	00000098 RCC_APB1RSTR_fields
08005ed8 g     F .text	00000014 BSP_GYRO_GetXYZ
0800e904 g     O .rodata	00000010 RTC_BKP0R_fields
0801458c g     O .rodata	00000438 CAN_registers
0801c67c g       .parsetable	00000000 _parsetable_start
080103e0 g     O .rodata	00000068 DMA1_CCR5_fields
080069e0 g     F .text	0000001a strtol
0800faa4 g     O .rodata	00000010 RTC_BKP8R_fields
0800f024 g     O .rodata	000000d8 TSC_registers
08012944 g     O .rodata	00000038 TIM2_CCMR2_Input_fields
080057c0 g     F .text	0000000e USBD_LL_StallEP
0800da20 g     O .rodata	00000010 NVIC_ICER1_fields
08016560 g     O .rodata	00000030 TIM16_EGR_fields
0801c700 g     O .parsetable	0000000c CmdRE
08004644  w    F .text	00000002 HAL_SPI_MspInit
08014b08 g     O .rodata	00000108 CAN_F8R1_fields
080063dc  w    F .text	00000002 USART3_IRQHandler
08011ee4 g     O .rodata	00000108 CAN_F21R1_fields
0800f5d8 g     O .rodata	00000058 RCC_CSR_fields
08001848 g     F .text	00000038 dcRun
08005884 g     F .text	0000003c USBD_VCP_SerialStrDescriptor
08012454 g     O .rodata	00000088 GPIOA_OTYPER_fields
080177e0 g     O .rodata	00000018 DAC_DHR12LD_fields
0800e4b4 g     O .rodata	00000038 TIM16_SR_fields
08014278 g     O .rodata	00000144 TIM1_registers
080063f8 g     F .text	00000032 __libc_fini_array
08016e58 g     O .rodata	00000040 ADC1_JSQR_fields
2000476c g       .bss	00000000 _ebss
08001880 g     F .text	00000030 CmdTest
08005e10 g     F .text	00000040 COMPASSACCELERO_IO_Read
08004c50 g     F .text	00000068 TIM_OC4_SetConfig
200001d0 g     O .data	0000002c L3gd20Drv
080129a4 g     O .rodata	00000058 FPU_CPACR_fields
080063dc  w    F .text	00000002 DMA1_Channel7_IRQHandler
08012e7c g     O .rodata	00000028 CAN_TDL2R_fields
080043d0 g     F .text	00000108 HAL_I2C_Mem_Read
0800db50 g     O .rodata	00000048 GPIOA_AFRL_fields
0800638c  w    F .text	00000038 Reset_Handler
20000018 g     O .data	00000043 USBD_CDC_CfgFSDesc
080049c0 g     F .text	000000b4 TIM_Base_SetConfig
0801b308 g     O .rodata	00000010 RTC_BKP29R_fields
08005e94 g     F .text	00000044 BSP_GYRO_Init
0800d8d8 g     O .rodata	00000028 NVIC_IPR0_fields
0801212c g     O .rodata	00000088 GPIOA_ODR_fields
0800a41c g     F .text	0000003c __hi0bits
0800fce4 g     O .rodata	00000028 NVIC_IPR15_fields
0800de38 g     O .rodata	00000010 TIM1_CCR2_fields
0800f2b0 g     O .rodata	000000d8 EXTI_RTSR1_fields
080103d0 g     O .rodata	00000010 DAC_DOR2_fields
0801203c g     O .rodata	00000010 CRC_DR_fields
08000c64 g     F .text	0000004e .hidden __fixdfsi
0800d938 g     O .rodata	00000088 GPIOB_OSPEEDR_fields
0801c6f4 g     O .parsetable	0000000c CmdLEDE
0801c6ac g     O .parsetable	0000000c CmdTaskCurrentE
080063dc  w    F .text	00000002 UART5_IRQHandler
0800213c g     F .text	0000003c DecodePeripheral
08016518 g     O .rodata	00000028 SYSCFG_EXTICR1_fields
0800c5a0 g     O .rodata	00000108 CAN_F11R2_fields
080063dc  w    F .text	00000002 ADC3_IRQHandler
08011e34 g     O .rodata	00000040 RTC_TSTR_fields
0801311c g     O .rodata	00000050 TIM2_CR1_fields
08002e88 g     F .text	00000024 HAL_Init
08011b00 g     O .rodata	00000108 CAN_F1R2_fields
0800a944 g     F .text	00000058 _putc_r
0800538e g     F .text	00000020 USBD_CtlPrepareRx
08011690 g     O .rodata	00000010 RTC_BKP17R_fields
08001668 g     F .text	00000058 TaskInit
080143bc g     O .rodata	00000028 CAN_RDL1R_fields
0800eddc g     O .rodata	00000108 CAN_F23R1_fields
080046ec g     F .text	0000002e HAL_SPI_DeInit
080063dc  w    F .text	00000002 TIM4_IRQHandler
080102b8 g     O .rodata	00000108 CAN_F18R1_fields
080174c0 g     O .rodata	000000a8 USB_FS_registers
080003cc g     F .text	00000276 .hidden __aeabi_dadd
08017778 g     O .rodata	00000010 TIM8_CCR3_fields
08000b5c g     F .text	00000082 .hidden __ledf2
08015178 g     O .rodata	00000108 CAN_F13R2_fields
0800b3a2 g     O .rodata	00000008 LEDs
080138fc g     O .rodata	00000038 TIM2_CCMR1_Input_fields
0801b784 g     O .rodata	00000010 DAC_DHR12R1_fields
08017a40 g     O .rodata	00000030 I2C1_OAR1_fields
08005838 g     F .text	00000008 USBD_static_malloc
0800da40 g     O .rodata	00000028 CAN_RF0R_fields
080063dc  w    F .text	00000002 CAN_RX1_IRQHandler
080063dc  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800da30 g     O .rodata	00000010 RTC_BKP7R_fields
0800a61c g     F .text	0000009e __pow5mult
080124dc g     O .rodata	00000018 ADC1_TR1_fields
08017400 g     O .rodata	00000010 DMA1_CNDTR7_fields
080006c4 g     F .text	0000006a .hidden __aeabi_ul2d
080055ca g     F .text	0000002e USBD_CDC_TransmitPacket
20000180 g     O .data	00000004 I2cxTimeout
080103c0 g     O .rodata	00000010 TSC_IOG5CR_fields
08010d20 g     O .rodata	00000010 DAC_DHR12R2_fields
08012c54 g     O .rodata	00000010 RTC_BKP18R_fields
08000250 g     F .text	00000016 mytest
0800edcc g     O .rodata	00000010 DMA1_CMAR6_fields
08010ce8 g     O .rodata	00000038 TIM15_CCMR1_Input_fields
08001344 g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
080053d6 g     F .text	00000016 USBD_CtlReceiveStatus
080101d0 g     O .rodata	00000018 TIM2_CCR4_fields
2000476c g       ._user_heap_stack	00000000 end
20000160 g     O .data	00000008 LineCoding
0800f948 g     O .rodata	00000078 SPI1_CR1_fields
080063dc  w    F .text	00000002 I2C1_EV_IRQHandler
08014514 g     O .rodata	00000078 SPI1_registers
0800579e g     F .text	00000014 USBD_LL_OpenEP
08013c5c g     O .rodata	00000018 TIM8_DCR_fields
080021c8 g     F .text	00000054 DecodePrintRegisters
0801235c g     O .rodata	00000070 USB_FS_USB_CNTR_fields
080108e8 g     O .rodata	00000090 USART1_registers
08006218 g     F .text	0000003c L3GD20_DisableIT
0800de60 g     O .rodata	00000010 USART1_TDR_fields
080140f0 g     O .rodata	00000080 RCC_APB1ENR_fields
080046ea  w    F .text	00000002 HAL_SPI_MspDeInit
08017a70 g     O .rodata	00000010 DMA1_CNDTR2_fields
08015788 g     O .rodata	00000078 CAN_IER_fields
08016c18 g     O .rodata	00000068 DMA1_CCR1_fields
08017050 g     O .rodata	00000010 NVIC_ICER0_fields
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
08011ebc g     O .rodata	00000010 NVIC_ISER1_fields
08004f04 g     F .text	0000008a USBD_LL_DataInStage
0801b2f8 g     O .rodata	00000010 RTC_BKP31R_fields
0801230c g     O .rodata	00000050 TIM1_EGR_fields
080163a4 g     O .rodata	00000068 TIM2_CCMR1_Output_fields
08015530 g     O .rodata	00000018 DAC_SR_fields
080134fc g     O .rodata	00000018 TIM2_CCR2_fields
08005714 g     F .text	0000007c USBD_LL_Init
080159e4 g     O .rodata	00000010 RTC_BKP3R_fields
08005b58 g     F .text	0000001c BSP_LED_On
08006102 g     F .text	00000032 L3GD20_Init
08000c50 g     F .text	00000012 .hidden __aeabi_dcmpgt
080063dc  w    F .text	00000002 DMA1_Channel6_IRQHandler
08005012 g     F .text	00000016 USBD_CtlError
2000005c g     O .data	00000038 USBD_CDC
08004e3c g     F .text	0000000e USBD_ClrClassConfig
0801b100 g     O .rodata	00000010 RTC_BKP5R_fields
080063dc  w    F .text	00000002 UART4_IRQHandler
080063dc  w    F .text	00000002 DMA2_Channel4_IRQHandler
080055a0 g     F .text	0000000e USBD_CDC_RegisterInterface
080095a4 g     F .text	00000002 __sfp_lock_acquire
0800a1c8 g     F .text	00000090 memchr
08001584 g     F .text	0000003c task1
08009650 g     F .text	0000019c _free_r
080063dc  w    F .text	00000002 TIM3_IRQHandler
080063dc  w    F .text	00000002 RCC_IRQHandler
0800ca9c g     O .rodata	00000028 RTC_CALR_fields
08009b58 g     F .text	0000000c __locale_mb_cur_max
08000c3c g     F .text	00000012 .hidden __aeabi_dcmpge
0800f8f0 g     O .rodata	00000010 DAC_DHR12L1_fields
0800cb9c g     O .rodata	00000038 TIM17_SR_fields
0801223c g     O .rodata	00000088 GPIOB_OTYPER_fields
080063dc  w    F .text	00000002 DMA1_Channel1_IRQHandler
080166f0 g     O .rodata	00000010 RTC_BKP9R_fields
080175e0 g     O .rodata	00000108 CAN_F14R2_fields
080003c8 g     F .text	0000027a .hidden __aeabi_dsub
080056ca g     F .text	00000012 HAL_PCD_DataOutStageCallback
080063dc g       .text	00000002 Default_Handler
20000a94 g     O .data	00000004 __malloc_sbrk_base
080058dc g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
080015c0 g     F .text	0000003c task2
08013b9c g     O .rodata	00000090 GPIOA_LCKR_fields
08010aa8 g     O .rodata	00000098 RTC_TAFCR_fields
20000168 g     O .data	00000010 USBD_CDC_fops
080176e8 g     O .rodata	00000090 GPIOA_registers
080101b0 g     O .rodata	00000010 NVIC_ISPR2_fields
080063dc  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08014c50 g     O .rodata	00000068 TIM2_CCMR2_Output_fields
0800dd30 g     O .rodata	00000090 GPIOB_LCKR_fields
0800d700 g     O .rodata	00000080 TIM8_CR2_fields
080037ce g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800d23c g     O .rodata	00000038 CAN_BTR_fields
080006c4 g     F .text	0000006a .hidden __floatundidf
0801b110 g     O .rodata	00000068 DMA1_CCR4_fields
0800e2fc g     O .rodata	00000028 NVIC_IPR10_fields
08010b40 g     O .rodata	00000010 TIM17_ARR_fields
08010990 g     O .rodata	00000108 CAN_F12R2_fields
0800a6bc g     F .text	000000bc __lshift
08014f30 g     O .rodata	00000030 USART1_RQR_fields
08013804 g     O .rodata	00000050 TIM17_DIER_fields
0800c410 g     O .rodata	00000010 RTC_BKP22R_fields
08014f60 g     O .rodata	00000028 CAN_TDH2R_fields
080126a4 g     O .rodata	00000010 TIM1_RCR_fields
080057ce g     F .text	0000000e USBD_LL_ClearStallEP
0801b6dc g     O .rodata	00000028 NVIC_IPR5_fields
0800e1b0 g     O .rodata	00000060 Flash_OBR_fields
080063dc  w    F .text	00000002 EXTI15_10_IRQHandler
0800eb74 g     O .rodata	00000020 CAN_TDT1R_fields
080062b0 g     F .text	000000dc L3GD20_ReadXYZAngRate
08013264 g     O .rodata	00000040 RTC_TR_fields
08013d8c g     O .rodata	00000028 NVIC_IPR17_fields
080081d4 g     F .text	000000ac __register_exitproc
0800e140 g     O .rodata	00000060 Flash_CR_fields
0800fd74 g     O .rodata	00000060 SPI1_SR_fields
0800fa5c g     O .rodata	00000048 USB_FS_DADDR_fields
080014d8 g     F .text	00000070 TaskAdd
08010458 g     O .rodata	00000018 EXTI_SWIER2_fields
0801c6e8 g     O .parsetable	0000000c CmdTaskKillE
080031d6 g     F .text	0000002c HAL_PCD_SetAddress
08012094 g     O .rodata	00000028 NVIC_IPR19_fields
08010fc8 g     O .rodata	00000010 TIM6_SR_fields
0800cbfc g     O .rodata	00000108 CAN_F1R1_fields
080150f8 g     O .rodata	00000060 DES_registers
08015c0c g     O .rodata	00000010 TIM17_PSC_fields
0800cb1c g     O .rodata	00000028 SYSCFG_EXTICR2_fields
0800a4c8 g     F .text	00000152 __multiply
080114d8 g     O .rodata	00000010 SPI1_CRCPR_fields
08005f3a g     F .text	0000001e LSM303DLHC_AccFilterConfig
08002ac0 g     F .text	000002fc HAL_RCC_ClockConfig
08002ee4 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
2000000c g     O .data	00000004 Commands
0800140c g     F .text	00000002 TaskNull
08017168 g     O .rodata	00000018 ADC1_TR2_fields
20000ed4 g     O .bss	00000028 __malloc_current_mallinfo
08006064 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
08012cc4 g     O .rodata	00000010 RTC_TSSSR_fields
080019e8 g     F .text	0000012c TaskInput
080107a8 g     O .rodata	00000010 TIM6_CR2_fields
080152f8 g     O .rodata	00000058 RCC_CR_fields
080124f4 g     O .rodata	000000e8 CAN_FM1R_fields
0801307c g     O .rodata	00000010 TIM1_CCR6_fields
0800a890 g     F .text	000000b2 __d2b
08013cec g     O .rodata	000000a0 USART1_CR2_fields
08014e20 g     O .rodata	00000068 TIM1_BDTR_fields
080066e0 g     F .text	00000046 strcasecmp
0800c94c g     O .rodata	00000010 IWDG_WINR_fields
080125dc g     O .rodata	00000050 ADC1_SMPR1_fields
08005ce0 g     F .text	00000048 GYRO_IO_Read
08000280 g     F .text	00000004 my_Init
0800fe14 g     O .rodata	00000020 I2C1_OAR2_fields
08016eb0 g     O .rodata	00000108 CAN_F26R1_fields
08001b14 g     F .text	00000028 fetch_int32_arg
080069fc g     F .text	00000136 _strtoul_r
080136a4 g     O .rodata	00000010 CRC_POL_fields
0801b318 g     O .rodata	00000010 DMA1_CMAR4_fields
080063dc  w    F .text	00000002 TIM7_IRQHandler
0800617c g     F .text	0000005c L3GD20_INT1InterruptConfig
0800570e g     F .text	00000002 HAL_PCD_SuspendCallback
08014f98 g     O .rodata	00000010 DMA1_CPAR3_fields
08010da8 g     O .rodata	00000010 RTC_BKP14R_fields
0800544c g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08001cb0 g     F .text	00000006 _close_r
0800c060 g     O .rodata	00000010 SPI1_DR_fields
0800d6c0 g     O .rodata	00000020 RCC_CFGR2_fields
08000664 g     F .text	00000022 .hidden __aeabi_i2d
0800d1ec g     O .rodata	00000018 TIM15_DCR_fields
0800d2fc g     O .rodata	00000020 Flash_ACR_fields
0801b430 g     O .rodata	00000010 CRC_IDR_fields
200001a4 g     O .data	0000002c Lsm303dlhcDrv
080101c0 g     O .rodata	00000010 DMA1_CPAR5_fields
080169d8 g     O .rodata	00000108 CAN_F18R2_fields
08014dd8 g     O .rodata	00000048 IWDG_registers
08006844 g     F .text	00000012 strtok
0801c6dc g     O .parsetable	0000000c CmdGyroE
0800dce0 g     O .rodata	00000010 IWDG_PR_fields
08004a74 g     F .text	0000002c HAL_TIM_Base_Init
08013404 g     O .rodata	00000028 NVIC_IPR11_fields
080126b4 g     O .rodata	00000058 COMP_COMP7_CSR_fields
0800ca64 g     O .rodata	00000028 CAN_RF1R_fields
08001d98 g     F .text	0000007c TerminalInit
0800810c g     F .text	000000c6 __swsetup_r
0800f2a0 g     O .rodata	00000010 TIM8_ARR_fields
08000d40  w    F .text	00000002 .hidden __aeabi_ldiv0
080063dc  w    F .text	00000002 EXTI9_5_IRQHandler
0800499e g     F .text	00000006 HAL_SPI_GetState
08000984 g     F .text	000001d0 .hidden __divdf3
0800ef0c g     O .rodata	00000010 ADC1_DR_fields
080063dc  w    F .text	00000002 RTC_WKUP_IRQHandler
0801b2e0 g     O .rodata	00000018 USART1_BRR_fields
08016bb0 g     O .rodata	00000058 TIM15_CCMR1_Output_fields
20000688 g     O .data	00000408 __malloc_av_
08013a5c g     O .rodata	00000090 SYSCFG_CFGR1_fields
08001e66 g     F .text	00000012 TerminalReadNonBlock
08000730 g     F .text	00000254 .hidden __muldf3
08017808 g     O .rodata	00000020 CAN_TDT0R_fields
08001c28 g     F .text	00000054 CmdDump
0801c6c4 g     O .parsetable	0000000c DcMotorInitE
0800add0 g     F .text	00000022 __sread
080120fc g     O .rodata	00000030 TIM16_CCMR1_Output_fields
08015500 g     O .rodata	00000020 WWDG_CFR_fields
08015dbc g     O .rodata	000002a0 Peripherals
08016668 g     O .rodata	00000088 GPIOB_ODR_fields
08002ebc  w    F .text	0000000c HAL_GetTick
080136c4 g     O .rodata	00000058 USB_FS_USB_EP5R_fields
080106a0 g     O .rodata	00000108 CAN_F11R1_fields
0800a31c g     F .text	00000002 __malloc_lock
08014f88 g     O .rodata	00000010 NVIC_ISPR0_fields
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0800d9c0 g     O .rodata	00000060 ADC1_ISR_fields
0800dfc8 g     O .rodata	00000050 FPU_FPCCR_fields
08017568 g     O .rodata	00000018 TSC_ICR_fields
08005f76 g     F .text	000000ee LSM303DLHC_AccReadXYZ
0800e654 g     O .rodata	00000010 NVIC_IABR2_fields
08009474 g     F .text	0000002c _fflush_r
08001e78 g     F .text	00000012 TerminalReadAnyNonBlock
080058c0 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
0800af8c g     F .text	00000060 _calloc_r
08017b88 g     O .rodata	00000088 GPIOA_PUPDR_fields
080063dc  w    F .text	00000002 SPI2_IRQHandler
08015a44 g     O .rodata	00000010 RTC_BKP21R_fields
0801b91d g     O .rodata	00000012 hUSBDDeviceDesc
0800c3e0 g     O .rodata	00000030 RTC_TSDR_fields
08002028 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080155b0 g     O .rodata	00000050 RCC_CFGR3_fields
08001754 g     F .text	0000001c CmdTaskCurrent
08006488 g     F .text	00000094 memset
20003930 g     O .bss	00000014 GPIO_InitStruct
080063dc  w    F .text	00000002 MemManage_Handler
0800137c g     F .text	0000008c main
08014fa8 g     O .rodata	00000108 TSC_IOSCR_fields
0800beec g     O .rodata	00000174 DMA1_registers
08005c20 g     F .text	00000014 BSP_PB_GetState
0801344c g     O .rodata	00000028 SYSCFG_EXTICR3_fields
20000ec8 g     O .bss	00000004 __malloc_max_total_mem
0800fdd4 g     O .rodata	00000010 ADC1_JDR3_fields
080133f4 g     O .rodata	00000010 SPI1_TXCRCR_fields
0800471a g     F .text	00000284 HAL_SPI_TransmitReceive
20000178 g     O .data	00000004 SpixTimeout
0801c67c g       *ABS*	00000000 _siccmram
0801b4f0 g     O .rodata	00000058 COMP_COMP3_CSR_fields
08011090 g     O .rodata	00000028 NVIC_IPR9_fields
0801131c g     O .rodata	0000003c DBGMCU_registers
08001708 g     F .text	0000004c CmdTaskAdd
080159bc g     O .rodata	00000028 NVIC_IPR16_fields
080100a8 g     O .rodata	00000108 CAN_F2R2_fields
080063dc  w    F .text	00000002 SVC_Handler
0800ae4c g     F .text	00000008 __sclose
080063dc  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800ea1c g     O .rodata	000000e8 DMA1_IFCR_fields
0800b070 g     F .text	00000010 fclose
0800d850 g     O .rodata	00000088 TSC_IOGCSR_fields
080068bc g     F .text	00000124 _strtol_r
08001fb4 g     F .text	00000074 TerminalInputBufferWrite
080177c0 g     O .rodata	00000010 DMA1_CPAR1_fields
0800f738 g     O .rodata	00000018 DES_UID0_fields
080083c8 g     F .text	00000f4e _dtoa_r
08009c64 g     F .text	00000562 _malloc_r
0801321c g     O .rodata	00000048 GPIOB_AFRL_fields
0800b198 g     F .text	0000001a __ascii_wctomb
0800d440 g     O .rodata	00000060 ADC1_IER_fields
080006d4 g     F .text	0000005a .hidden __aeabi_l2d
0800ddc0 g     O .rodata	00000010 DAC_DHR8R1_fields
080149c4 g     O .rodata	00000038 TIM1_CCMR1_Input_fields
0800d5b8 g     O .rodata	00000108 TSC_IOASCR_fields
0800eee4 g     O .rodata	00000028 NVIC_IPR20_fields
08009b00 g     F .text	0000004a _fwalk
08004f8e g     F .text	0000003e USBD_LL_Reset
080143e4 g     O .rodata	00000020 CAN_RDT1R_fields
08011608 g     O .rodata	00000088 GPIOA_BRR_fields
08015cb4 g     O .rodata	00000108 CAN_F20R2_fields
08001770 g     F .text	000000d8 DcMotorInit
0801268c g     O .rodata	00000018 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
0800582c g     F .text	0000000c USBD_LL_GetRxDataSize
080063dc  w    F .text	00000002 DMA1_Channel5_IRQHandler
08005eec g     F .text	00000020 LSM303DLHC_AccInit
080063dc  w    F .text	00000002 USB_LP_IRQHandler
20003f30 g     O .bss	00000800 UserRxBuffer
080133ac g     O .rodata	00000048 SPI1_I2SCFGR_fields
0801b8cc g     O .rodata	00000004 USBD_LangIDDesc
0800dbd8 g     O .rodata	00000108 CAN_F15R2_fields
080063dc  w    F .text	00000002 EXTI4_IRQHandler
08015498 g     O .rodata	00000058 USB_FS_USB_EP2R_fields
20000184 g     O .data	00000020 LED_PORT
0800c800 g     O .rodata	00000010 TIM8_CCR6_fields
080060a0 g     F .text	00000046 LSM303DLHC_AccClickITEnable
08004ea4 g     F .text	00000060 USBD_LL_DataOutStage
08010a98 g     O .rodata	00000010 RTC_BKP4R_fields
080095ac g     F .text	000000a2 _malloc_trim_r
08016508 g     O .rodata	00000010 TSC_IOG7CR_fields
0800ca8c g     O .rodata	00000010 RTC_BKP16R_fields
080122c4 g     O .rodata	00000030 DBGMCU_CR_fields
08012ca4 g     O .rodata	00000020 CAN_RDT0R_fields
0800e210 g     O .rodata	00000010 ADC1_AWD2CR_fields
08016fb8 g     O .rodata	00000010 DMA1_CMAR5_fields
080108c0 g     O .rodata	00000028 CAN_RDL0R_fields
08017c78 g     O .rodata	00000010 DMA1_CPAR4_fields
08015800 g     O .rodata	0000006c TIM6_registers
080012c8 g     F .text	00000028 CmdAccel
08012994 g     O .rodata	00000010 RTC_BKP11R_fields
080044d8 g     F .text	00000006 HAL_I2C_GetState
08002414 g     F .text	00000068 SystemInit
08013c74 g     O .rodata	00000050 TIM16_BDTR_fields
08000b64 g     F .text	0000007a .hidden __nedf2
080123dc g     O .rodata	00000078 RTC_ALRMBR_fields
08012e64 g     O .rodata	00000018 TIM2_DCR_fields
08017c20 g     O .rodata	00000058 ADC1_CR_fields
0800b1c0 g     F .text	00000000 _fini
080018b0 g     F .text	0000001c CmdW
080031ca g     F .text	0000000c HAL_PCD_Start
080063dc  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08011358 g     O .rodata	00000028 EXTI_EMR2_fields
08005f0c g     F .text	00000012 LSM303DLHC_AccReadID
0800d928 g     O .rodata	00000010 RTC_WUTR_fields
0801343c g     O .rodata	00000010 DMA1_CPAR6_fields
08016e48 g     O .rodata	00000010 CRC_INIT_fields
0800c760 g     O .rodata	00000090 RTC_ISR_fields
0800d3f8 g     O .rodata	00000018 TIM1_DCR_fields
0800ce64 g     O .rodata	00000040 PWR_CR_fields
0800f760 g     O .rodata	00000038 TIM2_EGR_fields
080063e0 g     F .text	0000000c atexit
08016fc8 g     O .rodata	00000088 OPAMP_OPAMP1_CR_fields
0800e220 g     O .rodata	00000054 FPU_registers
0800d4b0 g     O .rodata	00000108 EXTI_IMR1_fields
08001f7c g     F .text	00000038 _write_r
0800ded8 g     O .rodata	00000018 ADC1_SQR4_fields
10000000 g       .data	00000000 _eccmram
08017420 g     O .rodata	00000030 ADC1_SQR3_fields
080063dc  w    F .text	00000002 DMA1_Channel3_IRQHandler
080179b8 g     O .rodata	00000088 DBGMCU_APB1FZ_fields
080130b4 g     O .rodata	00000068 SPI1_CR2_fields
08017488 g     O .rodata	00000018 ADC1_CALFACT_fields
08015bfc g     O .rodata	00000010 RTC_BKP28R_fields
08002e62  w    F .text	00000024 HAL_InitTick
0800e0b0 g     O .rodata	00000028 TIM1_CCR5_fields
08005802 g     F .text	0000000e USBD_LL_SetUSBAddress
08016c80 g     O .rodata	00000028 NVIC_IPR12_fields
0801b930 g     O .rodata	00000010 LED_PIN
20000628 g     O .data	00000004 _impure_ptr
080128b4 g     O .rodata	00000020 CAN_TDT2R_fields
08015158 g     O .rodata	00000010 ADC1_JDR4_fields
080150b0 g     O .rodata	00000048 TIM15_CR2_fields
08009318 g     F .text	0000015a __sflush_r
0800cdfc g     O .rodata	00000068 RCC_CFGR_fields
08002eac  w    F .text	00000010 HAL_IncTick
0800d820 g     O .rodata	00000030 TIM17_EGR_fields
080057b2 g     F .text	0000000e USBD_LL_CloseEP
080063dc  w    F .text	00000002 ADC4_IRQHandler
08014e88 g     O .rodata	000000a8 RTC_CR_fields
0800537c g     F .text	00000012 USBD_CtlContinueSendData
08016700 g     O .rodata	000000e8 DMA1_ISR_fields
0800e4ec g     O .rodata	00000108 CAN_F6R1_fields
08006134 g     F .text	0000001c L3GD20_ReadID
080063dc  w    F .text	00000002 WWDG_IRQHandler
08004212  w    F .text	00000002 HAL_I2C_MspInit
0800c498 g     O .rodata	00000108 EXTI_EMR1_fields
08010cc0 g     O .rodata	00000028 NVIC_IPR6_fields
08017c88 g     O .rodata	00000018 TIM2_CCR3_fields
08015548 g     O .rodata	00000068 DMA1_CCR6_fields
080121b4 g     O .rodata	00000088 GPIOA_MODER_fields
08015610 g     O .rodata	00000088 OPAMP_OPAMP2_CR_fields
080139dc g     O .rodata	00000080 TIM1_CR2_fields
0800fc3c g     O .rodata	00000018 RTC_PRER_fields
08005810 g     F .text	0000000e USBD_LL_Transmit
080063dc  w    F .text	00000002 TIM2_IRQHandler
0800027c g     F .text	00000004 my_Loop
08016e08 g     O .rodata	00000028 TIM16_CCER_fields
0800313e g     F .text	0000008c HAL_PCD_Init
200000e4 g     O .data	00000043 USBD_CDC_CfgHSDesc
08011ecc g     O .rodata	00000018 DES_UID1_fields
0801c6d0 g     O .parsetable	0000000c CmdDecodeE
0800ecb4 g     O .rodata	00000108 CAN_F26R2_fields
0801c688 g     O .parsetable	0000000c CmdTaskAddE
08013514 g     O .rodata	00000108 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
0800ef1c g     O .rodata	00000108 CAN_F16R1_fields
0800c7f0 g     O .rodata	00000010 RTC_BKP27R_fields
0801297c g     O .rodata	00000018 EXTI_RTSR2_fields
08004b38 g     F .text	0000008c TIM_OC2_SetConfig
08017590 g     O .rodata	00000030 TIM16_CR2_fields
0800e334 g     O .rodata	00000078 RTC_ALRMAR_fields
08015884 g     O .rodata	00000010 TIM1_ARR_fields
08005324 g     F .text	0000003c USBD_GetString
08005b90 g     F .text	0000001c BSP_LED_Toggle
0800e6f4 g     O .rodata	00000108 CAN_F22R2_fields
0800c2d8 g     O .rodata	00000108 CAN_F24R1_fields
080056bc g     F .text	0000000e HAL_PCD_SetupStageCallback
0801b328 g     O .rodata	00000108 CAN_F5R1_fields
080063dc  w    F .text	00000002 COMP7_IRQHandler
20007fff g       *ABS*	00000000 _estack
080018ec g     F .text	000000fc parse
080140e0 g     O .rodata	00000010 RTC_BKP2R_fields
080063dc  w    F .text	00000002 COMP1_2_3_IRQHandler
080132a4 g     O .rodata	00000108 CAN_F17R1_fields
080063dc  w    F .text	00000002 EXTI1_IRQHandler
0800e0d8 g     O .rodata	00000068 TIM8_BDTR_fields
08000c00 g     F .text	00000012 .hidden __aeabi_dcmpeq
08013934 g     O .rodata	00000058 USB_FS_USB_EP1R_fields
0800c070 g     O .rodata	000000b8 ADC1_2_CSR_fields
080137f4 g     O .rodata	00000010 FPU_FPCAR_fields
20000a9c g       .data	00000000 _edata
08011c08 g     O .rodata	00000144 TIM8_registers
0800fdf4 g     O .rodata	00000010 RTC_BKP30R_fields
0801361c g     O .rodata	00000020 TIM17_CCMR1_Input_fields
10000000 g       .data	00000000 _sccmram
08012d1c g     O .rodata	00000040 TIM16_CR1_fields
0801b584 g     O .rodata	00000108 CAN_F17R2_fields
0800e614 g     O .rodata	00000040 TIM15_CR1_fields
0800221c g     F .text	000001f8 CmdDecode
08004d98 g     F .text	0000004c HAL_TIM_PWM_Start
080128d4 g     O .rodata	00000010 TIM15_RCR_fields
080101e8 g     O .rodata	00000088 GPIOB_IDR_fields
080049a4  w    F .text	00000002 HAL_TIM_Base_MspInit
0800c218 g     O .rodata	00000058 TIM1_CCMR3_Output_fields
080123cc g     O .rodata	00000010 TIM8_DMAR_fields
0800d364 g     O .rodata	0000006c Flash_registers
080114e8 g     O .rodata	00000018 TIM16_DCR_fields
0801b298 g     O .rodata	00000048 RCC_APB2RSTR_fields
08001b3c g     F .text	00000028 fetch_uint32_arg
0801586c g     O .rodata	00000018 RTC_ALRMBSSR_fields
080156a8 g     O .rodata	00000048 SYSCFG_RCR_fields
080063dc  w    F .text	00000002 USART2_IRQHandler
08017190 g     O .rodata	00000040 TIM17_CR1_fields
08013df4 g     O .rodata	000001d4 NVIC_registers
080063dc  w    F .text	00000002 COMP4_5_6_IRQHandler
0800adf4 g     F .text	00000038 __swrite
0800247c g     F .text	00000644 HAL_RCC_OscConfig
20000a90 g     O .data	00000004 __malloc_trim_threshold
0801284c g     O .rodata	00000010 TIM17_CCR1_fields
0800f3f8 g     O .rodata	00000030 I2C1_TIMINGR_fields
08015ca4 g     O .rodata	00000010 USB_FS_BTABLE_fields
08011068 g     O .rodata	00000028 CAN_TDH1R_fields
08012ea4 g     O .rodata	000000b0 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
08005360 g     F .text	0000001c USBD_CtlSendData
080160d4 g     O .rodata	00000108 CAN_F15R1_fields
080153f0 g     O .rodata	00000018 ADC1_2_CDR_fields
0800a7bc g     F .text	000000d2 __mdiff
08010498 g     O .rodata	00000010 TIM6_PSC_fields
08000c64 g     F .text	0000004e .hidden __aeabi_d2iz
08014c40 g     O .rodata	00000010 RTC_BKP15R_fields
0800f27c g     O .rodata	00000024 PWR_registers
20001130 g     O .bss	00002800 stacks
080160ac g     O .rodata	00000028 Flash_SR_fields
080177f8 g     O .rodata	00000010 ADC1_JDR2_fields
08001410 g     F .text	00000078 TaskSwitcher
08012004 g     O .rodata	00000010 RTC_BKP20R_fields
200001fc g     O .data	00000004 __ctype_ptr__
08010448 g     O .rodata	00000010 DMA1_CNDTR6_fields
0800c95c g     O .rodata	00000108 CAN_F19R2_fields
080063dc  w    F .text	00000002 I2C2_ER_IRQHandler
08011500 g     O .rodata	00000048 ADC1_2_CCR_fields
080063dc  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800c898 g     O .rodata	000000b4 DAC_registers
08017930 g     O .rodata	00000088 GPIOA_OSPEEDR_fields
0801b260 g     O .rodata	00000038 TIM8_CCMR2_Input_fields
080095a8 g     F .text	00000002 __sfp_lock_release
0800c810 g     O .rodata	00000050 TIM17_BDTR_fields
08013dcc g     O .rodata	00000028 CAN_RDH1R_fields
080131a4 g     O .rodata	00000068 TIM2_CCER_fields
08016e30 g     O .rodata	00000018 DAC_DHR8RD_fields
08001b64 g     F .text	00000020 fetch_string_arg
08005af0 g     F .text	00000068 BSP_LED_Init
080117a8 g     O .rodata	00000088 GPIOB_MODER_fields
0801c6b8 g     O .parsetable	0000000c CmdDumpE
0801b8bc g     O .rodata	00000010 PLLMULFactorTable
0800f798 g     O .rodata	000000a0 USART1_CR3_fields
080020b0 g     F .text	00000040 DecodeField
08004bc4 g     F .text	0000008c TIM_OC3_SetConfig
08016980 g     O .rodata	00000028 CAN_RI0R_fields
080063dc  w    F .text	00000002 TIM8_BRK_IRQHandler
0800e018 g     O .rodata	00000028 DBGMCU_APB2FZ_fields
0800d6e0 g     O .rodata	00000010 TIM1_PSC_fields
08002178 g     F .text	00000050 DecodePrintPeripherals
08011548 g     O .rodata	00000040 TIM15_CCER_fields
0801b940 g     O .rodata	00000101 _ctype_
08013aec g     O .rodata	00000010 DMA1_CMAR7_fields
08000d40  w    F .text	00000002 .hidden __aeabi_idiv0
08004d7e g     F .text	00000018 TIM_CCxChannelCmd
08010290 g     O .rodata	00000028 CAN_RI1R_fields
080172a0 g     O .rodata	00000030 SYSCFG_CFGR2_fields
08010fd8 g     O .rodata	00000090 RCC_CIR_fields
0801c70c g     O .parsetable	0000000c CmdStatsE
080063dc  w    F .text	00000002 FLASH_IRQHandler
0801130c g     O .rodata	00000010 TIM15_DMAR_fields
080172d0 g     O .rodata	00000018 EXTI_FTSR2_fields
080113d0 g     O .rodata	00000108 CAN_F10R2_fields
0800f3d0 g     O .rodata	00000028 NVIC_IPR3_fields
08017478 g     O .rodata	00000010 DMA1_CNDTR1_fields
0800dd00 g     O .rodata	00000030 I2C1_TIMEOUTR_fields
0800d274 g     O .rodata	00000050 TIM15_BDTR_fields
08005850 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20003dc0 g     O .bss	00000100 USBD_StrDesc
08001e8c g     F .text	000000f0 TerminalOutputBufferWrite
080063dc  w    F .text	00000002 BusFault_Handler
080063dc  w    F .text	00000002 USART1_IRQHandler
08011588 g     O .rodata	00000058 COMP_COMP1_CSR_fields
0801b68c g     O .rodata	00000050 TIM8_EGR_fields
08009b70 g     F .text	000000e4 __smakebuf_r
08011e74 g     O .rodata	00000048 TIM15_SR_fields
080067e4 g     F .text	0000005e strlen
0800f388 g     O .rodata	00000048 RCC_APB2ENR_fields
080063dc  w    F .text	00000002 SPI3_IRQHandler
08000bf0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000b54 g     F .text	0000008a .hidden __gedf2
20004730 g     O .bss	0000003c TimHandle
0801371c g     O .rodata	00000068 DMA1_CCR3_fields
0800ec64 g     O .rodata	00000050 TIM1_CR1_fields
08016384 g     O .rodata	00000020 IWDG_SR_fields
08017220 g     O .rodata	00000058 USB_FS_USB_EP6R_fields
08014404 g     O .rodata	000000d8 TIM16_registers
08003f86  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08011240 g     O .rodata	000000cc TIM17_registers
080042d4 g     F .text	000000fc HAL_I2C_Mem_Write
0800be4c g     O .rodata	000000a0 TIM1_CCER_fields
20000a98 g     O .data	00000004 __wctomb
080129fc g     O .rodata	00000108 CAN_F3R2_fields
08000ce0 g     F .text	0000002e .hidden __gnu_ldivmod_helper
0800e274 g     O .rodata	00000088 DAC_CR_fields
080063dc  w    F .text	00000002 I2C1_ER_IRQHandler
0800aed0 g     F .text	00000018 __sprint_r
0800de80 g     O .rodata	00000058 USB_FS_USB_EP7R_fields
08011a70 g     O .rodata	00000090 I2C1_ISR_fields
0800c420 g     O .rodata	00000068 TIM1_CCMR2_Output_fields
0800d900 g     O .rodata	00000028 NVIC_IPR8_fields
0801b8ac g     O .rodata	00000010 PredivFactorTable
080172e8 g     O .rodata	00000010 TSC_IOG3CR_fields
08000688 g     F .text	0000003a .hidden __aeabi_f2d
0801c718 g     O .parsetable	0000000c CmdTaskTestE
0800581e g     F .text	0000000e USBD_LL_PrepareReceive
0800fe34 g     O .rodata	00000010 DMA1_CNDTR3_fields
08006150 g     F .text	0000002c L3GD20_RebootCmd
0800cfcc g     O .rodata	00000108 CAN_F27R1_fields
080015fc g     F .text	0000003c task3
080122f4 g     O .rodata	00000018 TSC_IER_fields
08011158 g     O .rodata	000000e8 CAN_FFA1R_fields
0800fc24 g     O .rodata	00000018 TIM8_CNT_fields
08017180 g     O .rodata	00000010 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08017450 g     O .rodata	00000010 RTC_BKP25R_fields
08012734 g     O .rodata	00000108 TSC_IOCCR_fields
08013474 g     O .rodata	00000088 OPAMP_OPAMP3_CR_fields
080055be g     F .text	0000000c USBD_CDC_SetRxBuffer
0801b188 g     O .rodata	000000d8 EXTI_SWIER1_fields
080003c8 g     F .text	0000027a .hidden __subdf3
0800c750 g     O .rodata	00000010 TIM16_ARR_fields
08011fec g     O .rodata	00000018 DBGMCU_IDCODE_fields
08006b50 g     F .text	00001542 _vfprintf_r
0800a458 g     F .text	0000005a __lo0bits
08014170 g     O .rodata	00000028 EXTI_IMR2_fields
08015600 g     O .rodata	00000010 TIM6_EGR_fields
08013b54 g     O .rodata	00000010 SPI1_RXCRCR_fields
0801b4e0 g     O .rodata	00000010 I2C1_PECR_fields
080036fe g     F .text	000000d0 HAL_PCD_EP_Receive
0801b028 g     O .rodata	00000020 ADC1_OFR3_fields
0800eb94 g     O .rodata	00000060 COMP_COMP6_CSR_fields
08012c44 g     O .rodata	00000010 RTC_BKP1R_fields
08015290 g     O .rodata	00000068 TIM8_CCMR1_Output_fields
08014d20 g     O .rodata	00000090 GPIOB_registers
080020f0 g     F .text	0000004c DecodeRegister
08011380 g     O .rodata	00000050 TIM8_SMCR_fields
08002034 g     F .text	00000040 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
0800cb44 g     O .rodata	00000058 CAN_MCR_fields
0800cbec g     O .rodata	00000010 DAC_DOR1_fields
08001e14 g     F .text	00000048 TerminalRead
0800fd0c g     O .rodata	00000068 TSC_CR_fields
0800dcf0 g     O .rodata	00000010 TIM2_DMAR_fields
0800c860 g     O .rodata	00000038 TIM8_CCMR1_Input_fields
08006082 g     F .text	0000001e LSM303DLHC_AccIT1Enable
0800d0e4 g     O .rodata	00000108 CAN_F12R1_fields
080063dc  w    F .text	00000002 USBWakeUp_IRQHandler
0801b440 g     O .rodata	00000010 TIM16_PSC_fields
080153d0 g     O .rodata	00000010 USART1_RDR_fields
08013b14 g     O .rodata	00000040 RCC_BDCR_fields
08015a54 g     O .rodata	00000018 TIM17_DCR_fields
08017c10 g     O .rodata	00000010 NVIC_ISPR1_fields
0800d4a0 g     O .rodata	00000010 NVIC_ICPR2_fields
0801c67c g     O .parsetable	0000000c CmdAccelE
080172f8 g     O .rodata	00000108 CAN_F21R2_fields
08016b10 g     O .rodata	00000010 DES_UID2_fields
080055ae g     F .text	00000010 USBD_CDC_SetTxBuffer
0800def0 g     O .rodata	00000060 SYSCFG_registers
20003944 g     O .bss	0000003c tim15
08011830 g     O .rodata	00000088 OPAMP_OPAMP4_CR_fields
080063dc  w    F .text	00000002 DMA2_Channel3_IRQHandler
08011d4c g     O .rodata	000000d8 EXTI_FTSR1_fields
08005914 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
080116a0 g     O .rodata	00000108 CAN_F7R1_fields
0800a384 g     F .text	00000096 __multadd
08004e4a g     F .text	0000005a USBD_LL_SetupStage
0800a370 g     F .text	00000012 _Bfree
08001370 g     F .text	0000000a Error_Handler
0801635c g     O .rodata	00000018 WWDG_CR_fields
080063dc  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800de70 g     O .rodata	00000010 NVIC_STIR_fields
080063dc  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08014cc8 g     O .rodata	00000058 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f640 209c 	movw	r0, #2716	; 0xa9c
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	20000a9f 	.word	0x20000a9f

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f640 209c 	movw	r0, #2716	; 0xa9c
 80001b6:	f640 239c 	movw	r3, #2716	; 0xa9c
 80001ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f640 249c 	movw	r4, #2716	; 0xa9c
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f24b 10b4 	movw	r0, #45492	; 0xb1b4
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f24b 10b4 	movw	r0, #45492	; 0xb1b4
 8000220:	f640 21a0 	movw	r1, #2720	; 0xaa0
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f640 209c 	movw	r0, #2716	; 0xa9c
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7b0      	b.n	80001b0 <register_tm_clones>
 800024e:	bf00      	nop

08000250 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 8000250:	b500      	push	{lr}
    push {r1}
 8000252:	b402      	push	{r1}
    push {r0-r7}
 8000254:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <my_Init+0x4>)
    bl   BSP_LED_Toggle           @@ call BSP function
 8000258:	f005 fc9a 	bl	8005b90 <BSP_LED_Toggle>
    pop  {r0-r7}
 800025c:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 800025e:	490a      	ldr	r1, [pc, #40]	; (8000288 <my_Init+0x8>)
    ldr  r0, [r1]
 8000260:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 8000262:	bc02      	pop	{r1}
    pop  {pc}
 8000264:	bd00      	pop	{pc}
 8000266:	bf00      	nop

08000268 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 8000268:	b500      	push	{lr}
    push {r0-r1}
 800026a:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 800026c:	4906      	ldr	r1, [pc, #24]	; (8000288 <my_Init+0x8>)
    ldr  r0, [r1]
 800026e:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 8000270:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000274:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000276:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000278:	bd00      	pop	{pc}
 800027a:	bf00      	nop

0800027c <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 800027c:	b500      	push	{lr}
    pop  {pc}
 800027e:	bd00      	pop	{pc}

08000280 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 8000280:	b500      	push	{lr}
    pop  {pc}
 8000282:	bd00      	pop	{pc}
@@   r0: x
mytest:
    push {lr}
    push {r1}
    push {r0-r7}
    ldr  r0, =0
 8000284:	00000000 	.word	0x00000000
    bl   BSP_LED_Toggle           @@ call BSP function
    pop  {r0-r7}
    ldr  r1, =myTickCount
 8000288:	20000000 	.word	0x20000000

0800028c <memcpy>:
 800028c:	4684      	mov	ip, r0
 800028e:	ea41 0300 	orr.w	r3, r1, r0
 8000292:	f013 0303 	ands.w	r3, r3, #3
 8000296:	d16d      	bne.n	8000374 <memcpy+0xe8>
 8000298:	3a40      	subs	r2, #64	; 0x40
 800029a:	d341      	bcc.n	8000320 <memcpy+0x94>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b0:	f840 3b04 	str.w	r3, [r0], #4
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	3a40      	subs	r2, #64	; 0x40
 800031e:	d2bd      	bcs.n	800029c <memcpy+0x10>
 8000320:	3230      	adds	r2, #48	; 0x30
 8000322:	d311      	bcc.n	8000348 <memcpy+0xbc>
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	3a10      	subs	r2, #16
 8000346:	d2ed      	bcs.n	8000324 <memcpy+0x98>
 8000348:	320c      	adds	r2, #12
 800034a:	d305      	bcc.n	8000358 <memcpy+0xcc>
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	3a04      	subs	r2, #4
 8000356:	d2f9      	bcs.n	800034c <memcpy+0xc0>
 8000358:	3204      	adds	r2, #4
 800035a:	d008      	beq.n	800036e <memcpy+0xe2>
 800035c:	07d2      	lsls	r2, r2, #31
 800035e:	bf1c      	itt	ne
 8000360:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000364:	f800 3b01 	strbne.w	r3, [r0], #1
 8000368:	d301      	bcc.n	800036e <memcpy+0xe2>
 800036a:	880b      	ldrh	r3, [r1, #0]
 800036c:	8003      	strh	r3, [r0, #0]
 800036e:	4660      	mov	r0, ip
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	2a08      	cmp	r2, #8
 8000376:	d313      	bcc.n	80003a0 <memcpy+0x114>
 8000378:	078b      	lsls	r3, r1, #30
 800037a:	d08d      	beq.n	8000298 <memcpy+0xc>
 800037c:	f010 0303 	ands.w	r3, r0, #3
 8000380:	d08a      	beq.n	8000298 <memcpy+0xc>
 8000382:	f1c3 0304 	rsb	r3, r3, #4
 8000386:	1ad2      	subs	r2, r2, r3
 8000388:	07db      	lsls	r3, r3, #31
 800038a:	bf1c      	itt	ne
 800038c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000390:	f800 3b01 	strbne.w	r3, [r0], #1
 8000394:	d380      	bcc.n	8000298 <memcpy+0xc>
 8000396:	f831 3b02 	ldrh.w	r3, [r1], #2
 800039a:	f820 3b02 	strh.w	r3, [r0], #2
 800039e:	e77b      	b.n	8000298 <memcpy+0xc>
 80003a0:	3a04      	subs	r2, #4
 80003a2:	d3d9      	bcc.n	8000358 <memcpy+0xcc>
 80003a4:	3a01      	subs	r2, #1
 80003a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003aa:	f800 3b01 	strb.w	r3, [r0], #1
 80003ae:	d2f9      	bcs.n	80003a4 <memcpy+0x118>
 80003b0:	780b      	ldrb	r3, [r1, #0]
 80003b2:	7003      	strb	r3, [r0, #0]
 80003b4:	784b      	ldrb	r3, [r1, #1]
 80003b6:	7043      	strb	r3, [r0, #1]
 80003b8:	788b      	ldrb	r3, [r1, #2]
 80003ba:	7083      	strb	r3, [r0, #2]
 80003bc:	4660      	mov	r0, ip
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000502:	d1e9      	bne.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f092 0f00 	teq	r2, #0
 80006aa:	bf14      	ite	ne
 80006ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	e720      	b.n	8000504 <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_ul2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	e00a      	b.n	80006ea <__aeabi_l2d+0x16>

080006d4 <__aeabi_l2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006e2:	d502      	bpl.n	80006ea <__aeabi_l2d+0x16>
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f6:	f43f aedc 	beq.w	80004b2 <__adddf3+0xe6>
 80006fa:	f04f 0203 	mov.w	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	fa00 fc03 	lsl.w	ip, r0, r3
 800071a:	fa20 f002 	lsr.w	r0, r0, r2
 800071e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000722:	ea40 000e 	orr.w	r0, r0, lr
 8000726:	fa21 f102 	lsr.w	r1, r1, r2
 800072a:	4414      	add	r4, r2
 800072c:	e6c1      	b.n	80004b2 <__adddf3+0xe6>
 800072e:	bf00      	nop

08000730 <__aeabi_dmul>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8de 	bleq	800090c <__aeabi_dmul+0x1dc>
 8000750:	442c      	add	r4, r5
 8000752:	ea81 0603 	eor.w	r6, r1, r3
 8000756:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800075a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800075e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000762:	bf18      	it	ne
 8000764:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800076c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000770:	d038      	beq.n	80007e4 <__aeabi_dmul+0xb4>
 8000772:	fba0 ce02 	umull	ip, lr, r0, r2
 8000776:	f04f 0500 	mov.w	r5, #0
 800077a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800077e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000782:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000786:	f04f 0600 	mov.w	r6, #0
 800078a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800078e:	f09c 0f00 	teq	ip, #0
 8000792:	bf18      	it	ne
 8000794:	f04e 0e01 	orrne.w	lr, lr, #1
 8000798:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800079c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a4:	d204      	bcs.n	80007b0 <__aeabi_dmul+0x80>
 80007a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007aa:	416d      	adcs	r5, r5
 80007ac:	eb46 0606 	adc.w	r6, r6, r6
 80007b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007c8:	bf88      	it	hi
 80007ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ce:	d81e      	bhi.n	800080e <__aeabi_dmul+0xde>
 80007d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007da:	f150 0000 	adcs.w	r0, r0, #0
 80007de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007e8:	ea46 0101 	orr.w	r1, r6, r1
 80007ec:	ea40 0002 	orr.w	r0, r0, r2
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007f8:	bfc2      	ittt	gt
 80007fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000802:	bd70      	popgt	{r4, r5, r6, pc}
 8000804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000808:	f04f 0e00 	mov.w	lr, #0
 800080c:	3c01      	subs	r4, #1
 800080e:	f300 80ab 	bgt.w	8000968 <__aeabi_dmul+0x238>
 8000812:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000816:	bfde      	ittt	le
 8000818:	2000      	movle	r0, #0
 800081a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800081e:	bd70      	pople	{r4, r5, r6, pc}
 8000820:	f1c4 0400 	rsb	r4, r4, #0
 8000824:	3c20      	subs	r4, #32
 8000826:	da35      	bge.n	8000894 <__aeabi_dmul+0x164>
 8000828:	340c      	adds	r4, #12
 800082a:	dc1b      	bgt.n	8000864 <__aeabi_dmul+0x134>
 800082c:	f104 0414 	add.w	r4, r4, #20
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f305 	lsl.w	r3, r0, r5
 8000838:	fa20 f004 	lsr.w	r0, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800084c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000850:	fa21 f604 	lsr.w	r6, r1, r4
 8000854:	eb42 0106 	adc.w	r1, r2, r6
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f1c4 040c 	rsb	r4, r4, #12
 8000868:	f1c4 0520 	rsb	r5, r4, #32
 800086c:	fa00 f304 	lsl.w	r3, r0, r4
 8000870:	fa20 f005 	lsr.w	r0, r0, r5
 8000874:	fa01 f204 	lsl.w	r2, r1, r4
 8000878:	ea40 0002 	orr.w	r0, r0, r2
 800087c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000880:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000884:	f141 0100 	adc.w	r1, r1, #0
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f1c4 0520 	rsb	r5, r4, #32
 8000898:	fa00 f205 	lsl.w	r2, r0, r5
 800089c:	ea4e 0e02 	orr.w	lr, lr, r2
 80008a0:	fa20 f304 	lsr.w	r3, r0, r4
 80008a4:	fa01 f205 	lsl.w	r2, r1, r5
 80008a8:	ea43 0302 	orr.w	r3, r3, r2
 80008ac:	fa21 f004 	lsr.w	r0, r1, r4
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	fa21 f204 	lsr.w	r2, r1, r4
 80008b8:	ea20 0002 	bic.w	r0, r0, r2
 80008bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c4:	bf08      	it	eq
 80008c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	f094 0f00 	teq	r4, #0
 80008d0:	d10f      	bne.n	80008f2 <__aeabi_dmul+0x1c2>
 80008d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008d6:	0040      	lsls	r0, r0, #1
 80008d8:	eb41 0101 	adc.w	r1, r1, r1
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf08      	it	eq
 80008e2:	3c01      	subeq	r4, #1
 80008e4:	d0f7      	beq.n	80008d6 <__aeabi_dmul+0x1a6>
 80008e6:	ea41 0106 	orr.w	r1, r1, r6
 80008ea:	f095 0f00 	teq	r5, #0
 80008ee:	bf18      	it	ne
 80008f0:	4770      	bxne	lr
 80008f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008f6:	0052      	lsls	r2, r2, #1
 80008f8:	eb43 0303 	adc.w	r3, r3, r3
 80008fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000900:	bf08      	it	eq
 8000902:	3d01      	subeq	r5, #1
 8000904:	d0f7      	beq.n	80008f6 <__aeabi_dmul+0x1c6>
 8000906:	ea43 0306 	orr.w	r3, r3, r6
 800090a:	4770      	bx	lr
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000914:	bf18      	it	ne
 8000916:	ea95 0f0c 	teqne	r5, ip
 800091a:	d00c      	beq.n	8000936 <__aeabi_dmul+0x206>
 800091c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000926:	d1d1      	bne.n	80008cc <__aeabi_dmul+0x19c>
 8000928:	ea81 0103 	eor.w	r1, r1, r3
 800092c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	bd70      	pop	{r4, r5, r6, pc}
 8000936:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800093a:	bf06      	itte	eq
 800093c:	4610      	moveq	r0, r2
 800093e:	4619      	moveq	r1, r3
 8000940:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000944:	d019      	beq.n	800097a <__aeabi_dmul+0x24a>
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	d102      	bne.n	8000952 <__aeabi_dmul+0x222>
 800094c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000950:	d113      	bne.n	800097a <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	d105      	bne.n	8000964 <__aeabi_dmul+0x234>
 8000958:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800095c:	bf1c      	itt	ne
 800095e:	4610      	movne	r0, r2
 8000960:	4619      	movne	r1, r3
 8000962:	d10a      	bne.n	800097a <__aeabi_dmul+0x24a>
 8000964:	ea81 0103 	eor.w	r1, r1, r3
 8000968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800096c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	bd70      	pop	{r4, r5, r6, pc}
 800097a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800097e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000982:	bd70      	pop	{r4, r5, r6, pc}

08000984 <__aeabi_ddiv>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800098a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800098e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000992:	bf1d      	ittte	ne
 8000994:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000998:	ea94 0f0c 	teqne	r4, ip
 800099c:	ea95 0f0c 	teqne	r5, ip
 80009a0:	f000 f8a7 	bleq	8000af2 <__aeabi_ddiv+0x16e>
 80009a4:	eba4 0405 	sub.w	r4, r4, r5
 80009a8:	ea81 0e03 	eor.w	lr, r1, r3
 80009ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b4:	f000 8088 	beq.w	8000ac8 <__aeabi_ddiv+0x144>
 80009b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009dc:	429d      	cmp	r5, r3
 80009de:	bf08      	it	eq
 80009e0:	4296      	cmpeq	r6, r2
 80009e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ea:	d202      	bcs.n	80009f2 <__aeabi_ddiv+0x6e>
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f2:	1ab6      	subs	r6, r6, r2
 80009f4:	eb65 0503 	sbc.w	r5, r5, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a48:	085b      	lsrs	r3, r3, #1
 8000a4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a56:	bf22      	ittt	cs
 8000a58:	1ab6      	subcs	r6, r6, r2
 8000a5a:	4675      	movcs	r5, lr
 8000a5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a60:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a64:	d018      	beq.n	8000a98 <__aeabi_ddiv+0x114>
 8000a66:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a82:	d1c0      	bne.n	8000a06 <__aeabi_ddiv+0x82>
 8000a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a88:	d10b      	bne.n	8000aa2 <__aeabi_ddiv+0x11e>
 8000a8a:	ea41 0100 	orr.w	r1, r1, r0
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a96:	e7b6      	b.n	8000a06 <__aeabi_ddiv+0x82>
 8000a98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a9c:	bf04      	itt	eq
 8000a9e:	4301      	orreq	r1, r0
 8000aa0:	2000      	moveq	r0, #0
 8000aa2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aa6:	bf88      	it	hi
 8000aa8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aac:	f63f aeaf 	bhi.w	800080e <__aeabi_dmul+0xde>
 8000ab0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab4:	bf04      	itt	eq
 8000ab6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000abe:	f150 0000 	adcs.w	r0, r0, #0
 8000ac2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000acc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ad0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad4:	bfc2      	ittt	gt
 8000ad6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ada:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ade:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae4:	f04f 0e00 	mov.w	lr, #0
 8000ae8:	3c01      	subs	r4, #1
 8000aea:	e690      	b.n	800080e <__aeabi_dmul+0xde>
 8000aec:	ea45 0e06 	orr.w	lr, r5, r6
 8000af0:	e68d      	b.n	800080e <__aeabi_dmul+0xde>
 8000af2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000af6:	ea94 0f0c 	teq	r4, ip
 8000afa:	bf08      	it	eq
 8000afc:	ea95 0f0c 	teqeq	r5, ip
 8000b00:	f43f af3b 	beq.w	800097a <__aeabi_dmul+0x24a>
 8000b04:	ea94 0f0c 	teq	r4, ip
 8000b08:	d10a      	bne.n	8000b20 <__aeabi_ddiv+0x19c>
 8000b0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b0e:	f47f af34 	bne.w	800097a <__aeabi_dmul+0x24a>
 8000b12:	ea95 0f0c 	teq	r5, ip
 8000b16:	f47f af25 	bne.w	8000964 <__aeabi_dmul+0x234>
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	e72c      	b.n	800097a <__aeabi_dmul+0x24a>
 8000b20:	ea95 0f0c 	teq	r5, ip
 8000b24:	d106      	bne.n	8000b34 <__aeabi_ddiv+0x1b0>
 8000b26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b2a:	f43f aefd 	beq.w	8000928 <__aeabi_dmul+0x1f8>
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4619      	mov	r1, r3
 8000b32:	e722      	b.n	800097a <__aeabi_dmul+0x24a>
 8000b34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b38:	bf18      	it	ne
 8000b3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3e:	f47f aec5 	bne.w	80008cc <__aeabi_dmul+0x19c>
 8000b42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b46:	f47f af0d 	bne.w	8000964 <__aeabi_dmul+0x234>
 8000b4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b4e:	f47f aeeb 	bne.w	8000928 <__aeabi_dmul+0x1f8>
 8000b52:	e712      	b.n	800097a <__aeabi_dmul+0x24a>

08000b54 <__gedf2>:
 8000b54:	f04f 3cff 	mov.w	ip, #4294967295
 8000b58:	e006      	b.n	8000b68 <__cmpdf2+0x4>
 8000b5a:	bf00      	nop

08000b5c <__ledf2>:
 8000b5c:	f04f 0c01 	mov.w	ip, #1
 8000b60:	e002      	b.n	8000b68 <__cmpdf2+0x4>
 8000b62:	bf00      	nop

08000b64 <__cmpdf2>:
 8000b64:	f04f 0c01 	mov.w	ip, #1
 8000b68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b7e:	d01b      	beq.n	8000bb8 <__cmpdf2+0x54>
 8000b80:	b001      	add	sp, #4
 8000b82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b86:	bf0c      	ite	eq
 8000b88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b8c:	ea91 0f03 	teqne	r1, r3
 8000b90:	bf02      	ittt	eq
 8000b92:	ea90 0f02 	teqeq	r0, r2
 8000b96:	2000      	moveq	r0, #0
 8000b98:	4770      	bxeq	lr
 8000b9a:	f110 0f00 	cmn.w	r0, #0
 8000b9e:	ea91 0f03 	teq	r1, r3
 8000ba2:	bf58      	it	pl
 8000ba4:	4299      	cmppl	r1, r3
 8000ba6:	bf08      	it	eq
 8000ba8:	4290      	cmpeq	r0, r2
 8000baa:	bf2c      	ite	cs
 8000bac:	17d8      	asrcs	r0, r3, #31
 8000bae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bb2:	f040 0001 	orr.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc0:	d102      	bne.n	8000bc8 <__cmpdf2+0x64>
 8000bc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bc6:	d107      	bne.n	8000bd8 <__cmpdf2+0x74>
 8000bc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd0:	d1d6      	bne.n	8000b80 <__cmpdf2+0x1c>
 8000bd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bd6:	d0d3      	beq.n	8000b80 <__cmpdf2+0x1c>
 8000bd8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_cdrcmple>:
 8000be0:	4684      	mov	ip, r0
 8000be2:	4610      	mov	r0, r2
 8000be4:	4662      	mov	r2, ip
 8000be6:	468c      	mov	ip, r1
 8000be8:	4619      	mov	r1, r3
 8000bea:	4663      	mov	r3, ip
 8000bec:	e000      	b.n	8000bf0 <__aeabi_cdcmpeq>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_cdcmpeq>:
 8000bf0:	b501      	push	{r0, lr}
 8000bf2:	f7ff ffb7 	bl	8000b64 <__cmpdf2>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	bf48      	it	mi
 8000bfa:	f110 0f00 	cmnmi.w	r0, #0
 8000bfe:	bd01      	pop	{r0, pc}

08000c00 <__aeabi_dcmpeq>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff fff4 	bl	8000bf0 <__aeabi_cdcmpeq>
 8000c08:	bf0c      	ite	eq
 8000c0a:	2001      	moveq	r0, #1
 8000c0c:	2000      	movne	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmplt>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffea 	bl	8000bf0 <__aeabi_cdcmpeq>
 8000c1c:	bf34      	ite	cc
 8000c1e:	2001      	movcc	r0, #1
 8000c20:	2000      	movcs	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmple>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffe0 	bl	8000bf0 <__aeabi_cdcmpeq>
 8000c30:	bf94      	ite	ls
 8000c32:	2001      	movls	r0, #1
 8000c34:	2000      	movhi	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmpge>:
 8000c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c40:	f7ff ffce 	bl	8000be0 <__aeabi_cdrcmple>
 8000c44:	bf94      	ite	ls
 8000c46:	2001      	movls	r0, #1
 8000c48:	2000      	movhi	r0, #0
 8000c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4e:	bf00      	nop

08000c50 <__aeabi_dcmpgt>:
 8000c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c54:	f7ff ffc4 	bl	8000be0 <__aeabi_cdrcmple>
 8000c58:	bf34      	ite	cc
 8000c5a:	2001      	movcc	r0, #1
 8000c5c:	2000      	movcs	r0, #0
 8000c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c62:	bf00      	nop

08000c64 <__aeabi_d2iz>:
 8000c64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c6c:	d215      	bcs.n	8000c9a <__aeabi_d2iz+0x36>
 8000c6e:	d511      	bpl.n	8000c94 <__aeabi_d2iz+0x30>
 8000c70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c78:	d912      	bls.n	8000ca0 <__aeabi_d2iz+0x3c>
 8000c7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8e:	bf18      	it	ne
 8000c90:	4240      	negne	r0, r0
 8000c92:	4770      	bx	lr
 8000c94:	f04f 0000 	mov.w	r0, #0
 8000c98:	4770      	bx	lr
 8000c9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9e:	d105      	bne.n	8000cac <__aeabi_d2iz+0x48>
 8000ca0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	bf08      	it	eq
 8000ca6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000caa:	4770      	bx	lr
 8000cac:	f04f 0000 	mov.w	r0, #0
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_uldivmod>:
 8000cb4:	b94b      	cbnz	r3, 8000cca <__aeabi_uldivmod+0x16>
 8000cb6:	b942      	cbnz	r2, 8000cca <__aeabi_uldivmod+0x16>
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	bf08      	it	eq
 8000cbc:	2800      	cmpeq	r0, #0
 8000cbe:	d002      	beq.n	8000cc6 <__aeabi_uldivmod+0x12>
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	f000 b83b 	b.w	8000d40 <__aeabi_idiv0>
 8000cca:	b082      	sub	sp, #8
 8000ccc:	46ec      	mov	ip, sp
 8000cce:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cd2:	f000 f81d 	bl	8000d10 <__gnu_uldivmod_helper>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	b002      	add	sp, #8
 8000cdc:	bc0c      	pop	{r2, r3}
 8000cde:	4770      	bx	lr

08000ce0 <__gnu_ldivmod_helper>:
 8000ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce4:	9c06      	ldr	r4, [sp, #24]
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	4606      	mov	r6, r0
 8000cea:	460f      	mov	r7, r1
 8000cec:	4698      	mov	r8, r3
 8000cee:	f000 f829 	bl	8000d44 <__divdi3>
 8000cf2:	fb05 f301 	mul.w	r3, r5, r1
 8000cf6:	fb00 3808 	mla	r8, r0, r8, r3
 8000cfa:	fba5 2300 	umull	r2, r3, r5, r0
 8000cfe:	4443      	add	r3, r8
 8000d00:	1ab2      	subs	r2, r6, r2
 8000d02:	eb67 0303 	sbc.w	r3, r7, r3
 8000d06:	e9c4 2300 	strd	r2, r3, [r4]
 8000d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d0e:	bf00      	nop

08000d10 <__gnu_uldivmod_helper>:
 8000d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d14:	9c06      	ldr	r4, [sp, #24]
 8000d16:	4615      	mov	r5, r2
 8000d18:	4606      	mov	r6, r0
 8000d1a:	460f      	mov	r7, r1
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	f000 f967 	bl	8000ff0 <__udivdi3>
 8000d22:	fb00 f808 	mul.w	r8, r0, r8
 8000d26:	fba0 2305 	umull	r2, r3, r0, r5
 8000d2a:	fb05 8801 	mla	r8, r5, r1, r8
 8000d2e:	4443      	add	r3, r8
 8000d30:	1ab2      	subs	r2, r6, r2
 8000d32:	eb67 0303 	sbc.w	r3, r7, r3
 8000d36:	e9c4 2300 	strd	r2, r3, [r4]
 8000d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <__divdi3>:
 8000d44:	2900      	cmp	r1, #0
 8000d46:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d4a:	bfa8      	it	ge
 8000d4c:	2600      	movge	r6, #0
 8000d4e:	f2c0 80a9 	blt.w	8000ea4 <__divdi3+0x160>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f2c0 80a1 	blt.w	8000e9a <__divdi3+0x156>
 8000d58:	4689      	mov	r9, r1
 8000d5a:	4690      	mov	r8, r2
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	4614      	mov	r4, r2
 8000d60:	4605      	mov	r5, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d147      	bne.n	8000df8 <__divdi3+0xb4>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	d95b      	bls.n	8000e24 <__divdi3+0xe0>
 8000d6c:	fab2 f382 	clz	r3, r2
 8000d70:	b153      	cbz	r3, 8000d88 <__divdi3+0x44>
 8000d72:	f1c3 0220 	rsb	r2, r3, #32
 8000d76:	fa01 f703 	lsl.w	r7, r1, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	fa08 f403 	lsl.w	r4, r8, r3
 8000d82:	4317      	orrs	r7, r2
 8000d84:	fa00 f503 	lsl.w	r5, r0, r3
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbb7 f2f1 	udiv	r2, r7, r1
 8000d8e:	0c2b      	lsrs	r3, r5, #16
 8000d90:	fb01 7c12 	mls	ip, r1, r2, r7
 8000d94:	b2a0      	uxth	r0, r4
 8000d96:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8000d9a:	fb00 f302 	mul.w	r3, r0, r2
 8000d9e:	42bb      	cmp	r3, r7
 8000da0:	d909      	bls.n	8000db6 <__divdi3+0x72>
 8000da2:	193f      	adds	r7, r7, r4
 8000da4:	f102 3cff 	add.w	ip, r2, #4294967295
 8000da8:	d204      	bcs.n	8000db4 <__divdi3+0x70>
 8000daa:	42bb      	cmp	r3, r7
 8000dac:	bf84      	itt	hi
 8000dae:	3a02      	subhi	r2, #2
 8000db0:	193f      	addhi	r7, r7, r4
 8000db2:	d800      	bhi.n	8000db6 <__divdi3+0x72>
 8000db4:	4662      	mov	r2, ip
 8000db6:	1aff      	subs	r7, r7, r3
 8000db8:	fbb7 f3f1 	udiv	r3, r7, r1
 8000dbc:	b2ad      	uxth	r5, r5
 8000dbe:	fb01 7113 	mls	r1, r1, r3, r7
 8000dc2:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000dc6:	fb00 f003 	mul.w	r0, r0, r3
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d908      	bls.n	8000de0 <__divdi3+0x9c>
 8000dce:	1909      	adds	r1, r1, r4
 8000dd0:	f103 37ff 	add.w	r7, r3, #4294967295
 8000dd4:	d203      	bcs.n	8000dde <__divdi3+0x9a>
 8000dd6:	4288      	cmp	r0, r1
 8000dd8:	bf88      	it	hi
 8000dda:	3b02      	subhi	r3, #2
 8000ddc:	d800      	bhi.n	8000de0 <__divdi3+0x9c>
 8000dde:	463b      	mov	r3, r7
 8000de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	4611      	mov	r1, r2
 8000dea:	b116      	cbz	r6, 8000df2 <__divdi3+0xae>
 8000dec:	4240      	negs	r0, r0
 8000dee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000df6:	4770      	bx	lr
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	bf84      	itt	hi
 8000dfc:	2200      	movhi	r2, #0
 8000dfe:	4613      	movhi	r3, r2
 8000e00:	d8f1      	bhi.n	8000de6 <__divdi3+0xa2>
 8000e02:	fabc f18c 	clz	r1, ip
 8000e06:	2900      	cmp	r1, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__divdi3+0x1e8>
 8000e0c:	45cc      	cmp	ip, r9
 8000e0e:	bf28      	it	cs
 8000e10:	4580      	cmpcs	r8, r0
 8000e12:	bf8c      	ite	hi
 8000e14:	2200      	movhi	r2, #0
 8000e16:	2201      	movls	r2, #1
 8000e18:	bf9c      	itt	ls
 8000e1a:	2301      	movls	r3, #1
 8000e1c:	460a      	movls	r2, r1
 8000e1e:	d9e2      	bls.n	8000de6 <__divdi3+0xa2>
 8000e20:	4613      	mov	r3, r2
 8000e22:	e7e0      	b.n	8000de6 <__divdi3+0xa2>
 8000e24:	b912      	cbnz	r2, 8000e2c <__divdi3+0xe8>
 8000e26:	2301      	movs	r3, #1
 8000e28:	fbb3 f4f2 	udiv	r4, r3, r2
 8000e2c:	fab4 f384 	clz	r3, r4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d13d      	bne.n	8000eb0 <__divdi3+0x16c>
 8000e34:	1b3f      	subs	r7, r7, r4
 8000e36:	0c20      	lsrs	r0, r4, #16
 8000e38:	fa1f fc84 	uxth.w	ip, r4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	fbb7 f1f0 	udiv	r1, r7, r0
 8000e42:	0c2b      	lsrs	r3, r5, #16
 8000e44:	fb00 7711 	mls	r7, r0, r1, r7
 8000e48:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8000e4c:	fb0c f301 	mul.w	r3, ip, r1
 8000e50:	42bb      	cmp	r3, r7
 8000e52:	d90a      	bls.n	8000e6a <__divdi3+0x126>
 8000e54:	193f      	adds	r7, r7, r4
 8000e56:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e5a:	f080 80c1 	bcs.w	8000fe0 <__divdi3+0x29c>
 8000e5e:	42bb      	cmp	r3, r7
 8000e60:	bf84      	itt	hi
 8000e62:	3902      	subhi	r1, #2
 8000e64:	193f      	addhi	r7, r7, r4
 8000e66:	f240 80bb 	bls.w	8000fe0 <__divdi3+0x29c>
 8000e6a:	1aff      	subs	r7, r7, r3
 8000e6c:	fbb7 f3f0 	udiv	r3, r7, r0
 8000e70:	b2ad      	uxth	r5, r5
 8000e72:	fb00 7013 	mls	r0, r0, r3, r7
 8000e76:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8000e7a:	fb0c fc03 	mul.w	ip, ip, r3
 8000e7e:	4584      	cmp	ip, r0
 8000e80:	d908      	bls.n	8000e94 <__divdi3+0x150>
 8000e82:	1900      	adds	r0, r0, r4
 8000e84:	f103 37ff 	add.w	r7, r3, #4294967295
 8000e88:	d203      	bcs.n	8000e92 <__divdi3+0x14e>
 8000e8a:	4584      	cmp	ip, r0
 8000e8c:	bf88      	it	hi
 8000e8e:	3b02      	subhi	r3, #2
 8000e90:	d800      	bhi.n	8000e94 <__divdi3+0x150>
 8000e92:	463b      	mov	r3, r7
 8000e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e98:	e7a5      	b.n	8000de6 <__divdi3+0xa2>
 8000e9a:	43f6      	mvns	r6, r6
 8000e9c:	4252      	negs	r2, r2
 8000e9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ea2:	e759      	b.n	8000d58 <__divdi3+0x14>
 8000ea4:	4240      	negs	r0, r0
 8000ea6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eaa:	f04f 36ff 	mov.w	r6, #4294967295
 8000eae:	e750      	b.n	8000d52 <__divdi3+0xe>
 8000eb0:	409c      	lsls	r4, r3
 8000eb2:	f1c3 0220 	rsb	r2, r3, #32
 8000eb6:	fa27 f102 	lsr.w	r1, r7, r2
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa25 f202 	lsr.w	r2, r5, r2
 8000ec0:	409f      	lsls	r7, r3
 8000ec2:	4317      	orrs	r7, r2
 8000ec4:	fbb1 f2f0 	udiv	r2, r1, r0
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	fb00 1112 	mls	r1, r0, r2, r1
 8000ed0:	fa1f fc84 	uxth.w	ip, r4
 8000ed4:	ea48 4101 	orr.w	r1, r8, r1, lsl #16
 8000ed8:	fb0c f802 	mul.w	r8, ip, r2
 8000edc:	4588      	cmp	r8, r1
 8000ede:	fa05 f503 	lsl.w	r5, r5, r3
 8000ee2:	d908      	bls.n	8000ef6 <__divdi3+0x1b2>
 8000ee4:	1909      	adds	r1, r1, r4
 8000ee6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000eea:	d27f      	bcs.n	8000fec <__divdi3+0x2a8>
 8000eec:	4588      	cmp	r8, r1
 8000eee:	bf84      	itt	hi
 8000ef0:	3a02      	subhi	r2, #2
 8000ef2:	1909      	addhi	r1, r1, r4
 8000ef4:	d97a      	bls.n	8000fec <__divdi3+0x2a8>
 8000ef6:	ebc8 0101 	rsb	r1, r8, r1
 8000efa:	fbb1 f3f0 	udiv	r3, r1, r0
 8000efe:	fb00 1113 	mls	r1, r0, r3, r1
 8000f02:	b2bf      	uxth	r7, r7
 8000f04:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f08:	fb0c f103 	mul.w	r1, ip, r3
 8000f0c:	42b9      	cmp	r1, r7
 8000f0e:	d909      	bls.n	8000f24 <__divdi3+0x1e0>
 8000f10:	193f      	adds	r7, r7, r4
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d204      	bcs.n	8000f22 <__divdi3+0x1de>
 8000f18:	42b9      	cmp	r1, r7
 8000f1a:	bf84      	itt	hi
 8000f1c:	3b02      	subhi	r3, #2
 8000f1e:	193f      	addhi	r7, r7, r4
 8000f20:	d800      	bhi.n	8000f24 <__divdi3+0x1e0>
 8000f22:	4643      	mov	r3, r8
 8000f24:	1a7f      	subs	r7, r7, r1
 8000f26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000f2a:	e788      	b.n	8000e3e <__divdi3+0xfa>
 8000f2c:	f1c1 0320 	rsb	r3, r1, #32
 8000f30:	fa28 f203 	lsr.w	r2, r8, r3
 8000f34:	fa0c fc01 	lsl.w	ip, ip, r1
 8000f38:	ea42 0c0c 	orr.w	ip, r2, ip
 8000f3c:	fa29 f403 	lsr.w	r4, r9, r3
 8000f40:	ea4f 4a1c 	mov.w	sl, ip, lsr #16
 8000f44:	fa20 f303 	lsr.w	r3, r0, r3
 8000f48:	fa09 f901 	lsl.w	r9, r9, r1
 8000f4c:	ea43 0009 	orr.w	r0, r3, r9
 8000f50:	fbb4 f7fa 	udiv	r7, r4, sl
 8000f54:	fb0a 4417 	mls	r4, sl, r7, r4
 8000f58:	0c03      	lsrs	r3, r0, #16
 8000f5a:	fa1f f98c 	uxth.w	r9, ip
 8000f5e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f62:	fb09 fb07 	mul.w	fp, r9, r7
 8000f66:	45a3      	cmp	fp, r4
 8000f68:	fa08 f201 	lsl.w	r2, r8, r1
 8000f6c:	d909      	bls.n	8000f82 <__divdi3+0x23e>
 8000f6e:	eb14 040c 	adds.w	r4, r4, ip
 8000f72:	f107 33ff 	add.w	r3, r7, #4294967295
 8000f76:	d237      	bcs.n	8000fe8 <__divdi3+0x2a4>
 8000f78:	45a3      	cmp	fp, r4
 8000f7a:	bf84      	itt	hi
 8000f7c:	3f02      	subhi	r7, #2
 8000f7e:	4464      	addhi	r4, ip
 8000f80:	d932      	bls.n	8000fe8 <__divdi3+0x2a4>
 8000f82:	ebcb 0404 	rsb	r4, fp, r4
 8000f86:	fbb4 f3fa 	udiv	r3, r4, sl
 8000f8a:	fb0a 4413 	mls	r4, sl, r3, r4
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f94:	fb09 f403 	mul.w	r4, r9, r3
 8000f98:	4284      	cmp	r4, r0
 8000f9a:	d909      	bls.n	8000fb0 <__divdi3+0x26c>
 8000f9c:	eb10 000c 	adds.w	r0, r0, ip
 8000fa0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fa4:	d21e      	bcs.n	8000fe4 <__divdi3+0x2a0>
 8000fa6:	4284      	cmp	r4, r0
 8000fa8:	bf84      	itt	hi
 8000faa:	3b02      	subhi	r3, #2
 8000fac:	4460      	addhi	r0, ip
 8000fae:	d919      	bls.n	8000fe4 <__divdi3+0x2a0>
 8000fb0:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8000fb4:	1b00      	subs	r0, r0, r4
 8000fb6:	fba7 2302 	umull	r2, r3, r7, r2
 8000fba:	4298      	cmp	r0, r3
 8000fbc:	d30d      	bcc.n	8000fda <__divdi3+0x296>
 8000fbe:	bf14      	ite	ne
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	2301      	moveq	r3, #1
 8000fc4:	fa05 f101 	lsl.w	r1, r5, r1
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	bf2c      	ite	cs
 8000fcc:	2200      	movcs	r2, #0
 8000fce:	f003 0201 	andcc.w	r2, r3, #1
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	f43f af06 	beq.w	8000de6 <__divdi3+0xa2>
 8000fda:	1e7b      	subs	r3, r7, #1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	e702      	b.n	8000de6 <__divdi3+0xa2>
 8000fe0:	4641      	mov	r1, r8
 8000fe2:	e742      	b.n	8000e6a <__divdi3+0x126>
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	e7e3      	b.n	8000fb0 <__divdi3+0x26c>
 8000fe8:	461f      	mov	r7, r3
 8000fea:	e7ca      	b.n	8000f82 <__divdi3+0x23e>
 8000fec:	461a      	mov	r2, r3
 8000fee:	e782      	b.n	8000ef6 <__divdi3+0x1b2>

08000ff0 <__udivdi3>:
 8000ff0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	4605      	mov	r5, r0
 8000ff8:	460e      	mov	r6, r1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d141      	bne.n	8001082 <__udivdi3+0x92>
 8000ffe:	428a      	cmp	r2, r1
 8001000:	d954      	bls.n	80010ac <__udivdi3+0xbc>
 8001002:	fab2 f382 	clz	r3, r2
 8001006:	b14b      	cbz	r3, 800101c <__udivdi3+0x2c>
 8001008:	f1c3 0620 	rsb	r6, r3, #32
 800100c:	4099      	lsls	r1, r3
 800100e:	fa20 f606 	lsr.w	r6, r0, r6
 8001012:	fa02 f403 	lsl.w	r4, r2, r3
 8001016:	430e      	orrs	r6, r1
 8001018:	fa00 f503 	lsl.w	r5, r0, r3
 800101c:	0c22      	lsrs	r2, r4, #16
 800101e:	fbb6 f0f2 	udiv	r0, r6, r2
 8001022:	0c2b      	lsrs	r3, r5, #16
 8001024:	fb02 6110 	mls	r1, r2, r0, r6
 8001028:	b2a7      	uxth	r7, r4
 800102a:	ea43 4601 	orr.w	r6, r3, r1, lsl #16
 800102e:	fb07 f300 	mul.w	r3, r7, r0
 8001032:	42b3      	cmp	r3, r6
 8001034:	d909      	bls.n	800104a <__udivdi3+0x5a>
 8001036:	1936      	adds	r6, r6, r4
 8001038:	f100 31ff 	add.w	r1, r0, #4294967295
 800103c:	d204      	bcs.n	8001048 <__udivdi3+0x58>
 800103e:	42b3      	cmp	r3, r6
 8001040:	bf84      	itt	hi
 8001042:	3802      	subhi	r0, #2
 8001044:	1936      	addhi	r6, r6, r4
 8001046:	d800      	bhi.n	800104a <__udivdi3+0x5a>
 8001048:	4608      	mov	r0, r1
 800104a:	1af6      	subs	r6, r6, r3
 800104c:	fbb6 f3f2 	udiv	r3, r6, r2
 8001050:	b2ad      	uxth	r5, r5
 8001052:	fb02 6213 	mls	r2, r2, r3, r6
 8001056:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800105a:	fb07 f703 	mul.w	r7, r7, r3
 800105e:	4297      	cmp	r7, r2
 8001060:	d909      	bls.n	8001076 <__udivdi3+0x86>
 8001062:	1912      	adds	r2, r2, r4
 8001064:	f103 31ff 	add.w	r1, r3, #4294967295
 8001068:	f080 80ea 	bcs.w	8001240 <__udivdi3+0x250>
 800106c:	4297      	cmp	r7, r2
 800106e:	bf88      	it	hi
 8001070:	3b02      	subhi	r3, #2
 8001072:	f240 80e5 	bls.w	8001240 <__udivdi3+0x250>
 8001076:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800107a:	2100      	movs	r1, #0
 800107c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001080:	4770      	bx	lr
 8001082:	428b      	cmp	r3, r1
 8001084:	bf84      	itt	hi
 8001086:	2100      	movhi	r1, #0
 8001088:	4608      	movhi	r0, r1
 800108a:	d8f7      	bhi.n	800107c <__udivdi3+0x8c>
 800108c:	fab3 f483 	clz	r4, r3
 8001090:	2c00      	cmp	r4, #0
 8001092:	d149      	bne.n	8001128 <__udivdi3+0x138>
 8001094:	428b      	cmp	r3, r1
 8001096:	bf28      	it	cs
 8001098:	4282      	cmpcs	r2, r0
 800109a:	bf8c      	ite	hi
 800109c:	2100      	movhi	r1, #0
 800109e:	2101      	movls	r1, #1
 80010a0:	bf9c      	itt	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	4621      	movls	r1, r4
 80010a6:	d9e9      	bls.n	800107c <__udivdi3+0x8c>
 80010a8:	4608      	mov	r0, r1
 80010aa:	e7e7      	b.n	800107c <__udivdi3+0x8c>
 80010ac:	b912      	cbnz	r2, 80010b4 <__udivdi3+0xc4>
 80010ae:	2401      	movs	r4, #1
 80010b0:	fbb4 f4f2 	udiv	r4, r4, r2
 80010b4:	fab4 f784 	clz	r7, r4
 80010b8:	2f00      	cmp	r7, #0
 80010ba:	f040 8082 	bne.w	80011c2 <__udivdi3+0x1d2>
 80010be:	1b0b      	subs	r3, r1, r4
 80010c0:	0c26      	lsrs	r6, r4, #16
 80010c2:	b2a7      	uxth	r7, r4
 80010c4:	2101      	movs	r1, #1
 80010c6:	fbb3 f0f6 	udiv	r0, r3, r6
 80010ca:	0c2a      	lsrs	r2, r5, #16
 80010cc:	fb06 3310 	mls	r3, r6, r0, r3
 80010d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80010d4:	fb07 f200 	mul.w	r2, r7, r0
 80010d8:	429a      	cmp	r2, r3
 80010da:	d90a      	bls.n	80010f2 <__udivdi3+0x102>
 80010dc:	191b      	adds	r3, r3, r4
 80010de:	f100 3cff 	add.w	ip, r0, #4294967295
 80010e2:	f080 80af 	bcs.w	8001244 <__udivdi3+0x254>
 80010e6:	429a      	cmp	r2, r3
 80010e8:	bf84      	itt	hi
 80010ea:	3802      	subhi	r0, #2
 80010ec:	191b      	addhi	r3, r3, r4
 80010ee:	f240 80a9 	bls.w	8001244 <__udivdi3+0x254>
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	fbb3 f2f6 	udiv	r2, r3, r6
 80010f8:	b2ad      	uxth	r5, r5
 80010fa:	fb06 3312 	mls	r3, r6, r2, r3
 80010fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001102:	fb07 f702 	mul.w	r7, r7, r2
 8001106:	42af      	cmp	r7, r5
 8001108:	d909      	bls.n	800111e <__udivdi3+0x12e>
 800110a:	192c      	adds	r4, r5, r4
 800110c:	f102 33ff 	add.w	r3, r2, #4294967295
 8001110:	f080 809a 	bcs.w	8001248 <__udivdi3+0x258>
 8001114:	42a7      	cmp	r7, r4
 8001116:	bf88      	it	hi
 8001118:	3a02      	subhi	r2, #2
 800111a:	f240 8095 	bls.w	8001248 <__udivdi3+0x258>
 800111e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8001122:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001126:	4770      	bx	lr
 8001128:	f1c4 0520 	rsb	r5, r4, #32
 800112c:	fa22 f605 	lsr.w	r6, r2, r5
 8001130:	40a3      	lsls	r3, r4
 8001132:	4333      	orrs	r3, r6
 8001134:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8001138:	fa21 f605 	lsr.w	r6, r1, r5
 800113c:	40a1      	lsls	r1, r4
 800113e:	fa20 f505 	lsr.w	r5, r0, r5
 8001142:	fbb6 fcf8 	udiv	ip, r6, r8
 8001146:	430d      	orrs	r5, r1
 8001148:	fb08 661c 	mls	r6, r8, ip, r6
 800114c:	0c29      	lsrs	r1, r5, #16
 800114e:	fa1f f983 	uxth.w	r9, r3
 8001152:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 8001156:	fb09 f70c 	mul.w	r7, r9, ip
 800115a:	42b7      	cmp	r7, r6
 800115c:	fa02 f204 	lsl.w	r2, r2, r4
 8001160:	d904      	bls.n	800116c <__udivdi3+0x17c>
 8001162:	18f6      	adds	r6, r6, r3
 8001164:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001168:	d376      	bcc.n	8001258 <__udivdi3+0x268>
 800116a:	468c      	mov	ip, r1
 800116c:	1bf6      	subs	r6, r6, r7
 800116e:	fbb6 f7f8 	udiv	r7, r6, r8
 8001172:	fb08 6617 	mls	r6, r8, r7, r6
 8001176:	b2ad      	uxth	r5, r5
 8001178:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 800117c:	fb09 f607 	mul.w	r6, r9, r7
 8001180:	42ae      	cmp	r6, r5
 8001182:	d904      	bls.n	800118e <__udivdi3+0x19e>
 8001184:	18ed      	adds	r5, r5, r3
 8001186:	f107 31ff 	add.w	r1, r7, #4294967295
 800118a:	d35f      	bcc.n	800124c <__udivdi3+0x25c>
 800118c:	460f      	mov	r7, r1
 800118e:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
 8001192:	1bad      	subs	r5, r5, r6
 8001194:	fba7 2302 	umull	r2, r3, r7, r2
 8001198:	429d      	cmp	r5, r3
 800119a:	d30d      	bcc.n	80011b8 <__udivdi3+0x1c8>
 800119c:	fa00 f104 	lsl.w	r1, r0, r4
 80011a0:	bf14      	ite	ne
 80011a2:	2500      	movne	r5, #0
 80011a4:	2501      	moveq	r5, #1
 80011a6:	4291      	cmp	r1, r2
 80011a8:	bf2c      	ite	cs
 80011aa:	2100      	movcs	r1, #0
 80011ac:	f005 0101 	andcc.w	r1, r5, #1
 80011b0:	4638      	mov	r0, r7
 80011b2:	2900      	cmp	r1, #0
 80011b4:	f43f af62 	beq.w	800107c <__udivdi3+0x8c>
 80011b8:	1e78      	subs	r0, r7, #1
 80011ba:	2100      	movs	r1, #0
 80011bc:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80011c0:	4770      	bx	lr
 80011c2:	40bc      	lsls	r4, r7
 80011c4:	f1c7 0320 	rsb	r3, r7, #32
 80011c8:	fa21 fc03 	lsr.w	ip, r1, r3
 80011cc:	0c26      	lsrs	r6, r4, #16
 80011ce:	40b9      	lsls	r1, r7
 80011d0:	fa20 f303 	lsr.w	r3, r0, r3
 80011d4:	430b      	orrs	r3, r1
 80011d6:	fbbc f1f6 	udiv	r1, ip, r6
 80011da:	0c1a      	lsrs	r2, r3, #16
 80011dc:	fb06 cc11 	mls	ip, r6, r1, ip
 80011e0:	fa1f f884 	uxth.w	r8, r4
 80011e4:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80011e8:	fb08 f201 	mul.w	r2, r8, r1
 80011ec:	4562      	cmp	r2, ip
 80011ee:	fa00 f507 	lsl.w	r5, r0, r7
 80011f2:	d909      	bls.n	8001208 <__udivdi3+0x218>
 80011f4:	eb1c 0c04 	adds.w	ip, ip, r4
 80011f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80011fc:	d233      	bcs.n	8001266 <__udivdi3+0x276>
 80011fe:	4562      	cmp	r2, ip
 8001200:	bf84      	itt	hi
 8001202:	3902      	subhi	r1, #2
 8001204:	44a4      	addhi	ip, r4
 8001206:	d92e      	bls.n	8001266 <__udivdi3+0x276>
 8001208:	ebc2 0c0c 	rsb	ip, r2, ip
 800120c:	fbbc f2f6 	udiv	r2, ip, r6
 8001210:	b29b      	uxth	r3, r3
 8001212:	fb06 cc12 	mls	ip, r6, r2, ip
 8001216:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800121a:	fb08 f002 	mul.w	r0, r8, r2
 800121e:	4298      	cmp	r0, r3
 8001220:	d909      	bls.n	8001236 <__udivdi3+0x246>
 8001222:	191b      	adds	r3, r3, r4
 8001224:	f102 37ff 	add.w	r7, r2, #4294967295
 8001228:	d204      	bcs.n	8001234 <__udivdi3+0x244>
 800122a:	4298      	cmp	r0, r3
 800122c:	bf84      	itt	hi
 800122e:	3a02      	subhi	r2, #2
 8001230:	191b      	addhi	r3, r3, r4
 8001232:	d800      	bhi.n	8001236 <__udivdi3+0x246>
 8001234:	463a      	mov	r2, r7
 8001236:	1a1b      	subs	r3, r3, r0
 8001238:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800123c:	4647      	mov	r7, r8
 800123e:	e742      	b.n	80010c6 <__udivdi3+0xd6>
 8001240:	460b      	mov	r3, r1
 8001242:	e718      	b.n	8001076 <__udivdi3+0x86>
 8001244:	4660      	mov	r0, ip
 8001246:	e754      	b.n	80010f2 <__udivdi3+0x102>
 8001248:	461a      	mov	r2, r3
 800124a:	e768      	b.n	800111e <__udivdi3+0x12e>
 800124c:	42ae      	cmp	r6, r5
 800124e:	bf84      	itt	hi
 8001250:	3f02      	subhi	r7, #2
 8001252:	18ed      	addhi	r5, r5, r3
 8001254:	d89b      	bhi.n	800118e <__udivdi3+0x19e>
 8001256:	e799      	b.n	800118c <__udivdi3+0x19c>
 8001258:	42b7      	cmp	r7, r6
 800125a:	bf84      	itt	hi
 800125c:	f1ac 0c02 	subhi.w	ip, ip, #2
 8001260:	18f6      	addhi	r6, r6, r3
 8001262:	d883      	bhi.n	800116c <__udivdi3+0x17c>
 8001264:	e781      	b.n	800116a <__udivdi3+0x17a>
 8001266:	4601      	mov	r1, r0
 8001268:	e7ce      	b.n	8001208 <__udivdi3+0x218>
 800126a:	bf00      	nop

0800126c <CmdLED>:
{
    HAL_IncTick();
}

void CmdLED(int mode)
{
 800126c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800126e:	b9f8      	cbnz	r0, 80012b0 <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8001270:	4668      	mov	r0, sp
 8001272:	f000 fc63 	bl	8001b3c <fetch_uint32_arg>
  if(rc) {
 8001276:	b108      	cbz	r0, 800127c <CmdLED+0x10>
    printf("Missing LED index\n");
 8001278:	480f      	ldr	r0, [pc, #60]	; (80012b8 <CmdLED+0x4c>)
 800127a:	e004      	b.n	8001286 <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 800127c:	a801      	add	r0, sp, #4
 800127e:	f000 fc5d 	bl	8001b3c <fetch_uint32_arg>
  if(rc) {
 8001282:	b118      	cbz	r0, 800128c <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <CmdLED+0x50>)
 8001286:	f005 f999 	bl	80065bc <puts>
    return;
 800128a:	e011      	b.n	80012b0 <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 800128c:	9900      	ldr	r1, [sp, #0]
 800128e:	1ecb      	subs	r3, r1, #3
 8001290:	2b07      	cmp	r3, #7
 8001292:	d903      	bls.n	800129c <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 8001294:	480a      	ldr	r0, [pc, #40]	; (80012c0 <CmdLED+0x54>)
 8001296:	f005 f941 	bl	800651c <printf>
	   (unsigned int)led);
    return;
 800129a:	e009      	b.n	80012b0 <CmdLED+0x44>
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 800129e:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 80012a0:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 80012a2:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 80012a4:	b111      	cbz	r1, 80012ac <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 80012a6:	f004 fc57 	bl	8005b58 <BSP_LED_On>
 80012aa:	e001      	b.n	80012b0 <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 80012ac:	f004 fc62 	bl	8005b74 <BSP_LED_Off>
  }

} 
 80012b0:	b003      	add	sp, #12
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b6:	bf00      	nop
 80012b8:	0800b1d0 	.word	0x0800b1d0
 80012bc:	0800b1e2 	.word	0x0800b1e2
 80012c0:	0800b20b 	.word	0x0800b20b
 80012c4:	0800b3a2 	.word	0x0800b3a2

080012c8 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80012c8:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80012ca:	b958      	cbnz	r0, 80012e4 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80012cc:	4668      	mov	r0, sp
 80012ce:	f004 fdd7 	bl	8005e80 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <CmdAccel+0x24>)
 80012d4:	f9bd 1000 	ldrsh.w	r1, [sp]
 80012d8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80012dc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80012e0:	f005 f91c 	bl	800651c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 80012e4:	b003      	add	sp, #12
 80012e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ea:	bf00      	nop
 80012ec:	0800b238 	.word	0x0800b238

080012f0 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 80012f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80012f2:	b9f8      	cbnz	r0, 8001334 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 80012f4:	a801      	add	r0, sp, #4
 80012f6:	f004 fdef 	bl	8005ed8 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 80012fa:	eddf 7a10 	vldr	s15, [pc, #64]	; 800133c <CmdGyro+0x4c>
 80012fe:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 8001302:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 8001306:	ed9d 6a03 	vldr	s12, [sp, #12]

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800130a:	ee66 6aa7 	vmul.f32	s13, s13, s15
	 (int)(xyz[1]*256),
 800130e:	ee27 7a27 	vmul.f32	s14, s14, s15
	 (int)(xyz[2]*256));
 8001312:	ee66 7a27 	vmul.f32	s15, s12, s15
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001316:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800131a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800131e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <CmdGyro+0x50>)
 8001324:	ee16 1a90 	vmov	r1, s13
 8001328:	ee17 2a10 	vmov	r2, s14
 800132c:	ee17 3a90 	vmov	r3, s15
 8001330:	f005 f8f4 	bl	800651c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8001334:	b005      	add	sp, #20
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
 800133a:	bf00      	nop
 800133c:	43800000 	.word	0x43800000
 8001340:	0800b26b 	.word	0x0800b26b

08001344 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8001344:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8001346:	b958      	cbnz	r0, 8001360 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8001348:	f004 fc6a 	bl	8005c20 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <CmdButton+0x20>)
 800134e:	4906      	ldr	r1, [pc, #24]	; (8001368 <CmdButton+0x24>)
 8001350:	2800      	cmp	r0, #0
 8001352:	bf18      	it	ne
 8001354:	4619      	movne	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8001358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 800135c:	f005 b8de 	b.w	800651c <printf>
 8001360:	bd08      	pop	{r3, pc}
 8001362:	bf00      	nop
 8001364:	0800b29a 	.word	0x0800b29a
 8001368:	0800b2a2 	.word	0x0800b2a2
 800136c:	0800b2ab 	.word	0x0800b2ab

08001370 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 8001372:	2003      	movs	r0, #3
 8001374:	f004 fbf0 	bl	8005b58 <BSP_LED_On>
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);

int main(int argc, char **argv)
{
 800137c:	b510      	push	{r4, lr}
 800137e:	b090      	sub	sp, #64	; 0x40
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001380:	2301      	movs	r3, #1
 8001382:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001384:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001392:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001394:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001398:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800139a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800139c:	f001 f86e 	bl	800247c <HAL_RCC_OscConfig>
 80013a0:	bb10      	cbnz	r0, 80013e8 <main+0x6c>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013a2:	230f      	movs	r3, #15
 80013a4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80013ae:	4621      	mov	r1, r4
 80013b0:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80013b4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80013b6:	f001 fb83 	bl	8002ac0 <HAL_RCC_ClockConfig>
 80013ba:	4604      	mov	r4, r0
 80013bc:	b9a0      	cbnz	r0, 80013e8 <main+0x6c>
  uint32_t i;
  uint8_t accelRc, gyroRc;
  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 80013be:	f001 fd63 	bl	8002e88 <HAL_Init>

  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
 80013c2:	f000 fce9 	bl	8001d98 <TerminalInit>
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <main+0x80>)
 80013c8:	5d18      	ldrb	r0, [r3, r4]
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80013ca:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 80013cc:	f004 fb90 	bl	8005af0 <BSP_LED_Init>
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80013d0:	2c08      	cmp	r4, #8
 80013d2:	d1f8      	bne.n	80013c6 <main+0x4a>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80013d4:	2000      	movs	r0, #0
 80013d6:	4601      	mov	r1, r0
 80013d8:	f004 fbe8 	bl	8005bac <BSP_PB_Init>

  /* Initialize the Accelerometer */
  accelRc = BSP_ACCELERO_Init();
 80013dc:	f004 fd38 	bl	8005e50 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 80013e0:	b120      	cbz	r0, 80013ec <main+0x70>
    printf("Failed to initialize acceleromter\n");
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <main+0x84>)
 80013e4:	f005 f8ea 	bl	80065bc <puts>
    Error_Handler();
 80013e8:	f7ff ffc2 	bl	8001370 <Error_Handler>
  }

  /* Initialize the Gyroscope */
  gyroRc = BSP_GYRO_Init();
 80013ec:	f004 fd52 	bl	8005e94 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 80013f0:	b108      	cbz	r0, 80013f6 <main+0x7a>
    printf("Failed to initialize Gyroscope\n");
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <main+0x88>)
 80013f4:	e7f6      	b.n	80013e4 <main+0x68>
    Error_Handler();
  }

  while(1) {
    TaskInput();
 80013f6:	f000 faf7 	bl	80019e8 <TaskInput>
 80013fa:	e7fc      	b.n	80013f6 <main+0x7a>
 80013fc:	0800b3a2 	.word	0x0800b3a2
 8001400:	0800b2c4 	.word	0x0800b2c4
 8001404:	0800b2e6 	.word	0x0800b2e6

08001408 <SysTick_Handler>:
  }
}

void SysTick_Handler(void)
{
    HAL_IncTick();
 8001408:	f001 bd50 	b.w	8002eac <HAL_IncTick>

0800140c <TaskNull>:

const uint32_t LED[] = {GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};


void TaskNull(void* data)
{
 800140c:	e7fe      	b.n	800140c <TaskNull>
	...

08001410 <TaskSwitcher>:
		}
	return;
}

int32_t TaskSwitcher(void)
{
 8001410:	b570      	push	{r4, r5, r6, lr}
//PARAMETER: none
//RETURNS: position of next task to be executed
static int32_t TaskNext(void){
	int32_t i;
	uint32_t count=0;
	i = currentTask;
 8001412:	4d1a      	ldr	r5, [pc, #104]	; (800147c <TaskSwitcher+0x6c>)
	printf("\n");
 8001414:	200a      	movs	r0, #10
//PARAMETER: none
//RETURNS: position of next task to be executed
static int32_t TaskNext(void){
	int32_t i;
	uint32_t count=0;
	i = currentTask;
 8001416:	682c      	ldr	r4, [r5, #0]
	printf("\n");
 8001418:	f005 f894 	bl	8006544 <putchar>
//DESCRIPTION: find next task in a loop 
//PARAMETER: none
//RETURNS: position of next task to be executed
static int32_t TaskNext(void){
	int32_t i;
	uint32_t count=0;
 800141c:	2300      	movs	r3, #0
	i = currentTask;
	printf("\n");
	do { 
		i = ((i) % (MAX_TASKS - 1))+1;
 800141e:	2209      	movs	r2, #9
 8001420:	fb94 f1f2 	sdiv	r1, r4, r2
 8001424:	fb02 4411 	mls	r4, r2, r1, r4
 8001428:	3401      	adds	r4, #1
		count++;
	} while((tasks[i].f == NULL) && (count <= MAX_TASKS));
 800142a:	2038      	movs	r0, #56	; 0x38
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <TaskSwitcher+0x70>)
 800142e:	fb00 f104 	mul.w	r1, r0, r4
	uint32_t count=0;
	i = currentTask;
	printf("\n");
	do { 
		i = ((i) % (MAX_TASKS - 1))+1;
		count++;
 8001432:	3301      	adds	r3, #1
	} while((tasks[i].f == NULL) && (count <= MAX_TASKS));
 8001434:	5856      	ldr	r6, [r2, r1]
 8001436:	b916      	cbnz	r6, 800143e <TaskSwitcher+0x2e>
 8001438:	2b0b      	cmp	r3, #11
 800143a:	d1f0      	bne.n	800141e <TaskSwitcher+0xe>
 800143c:	e003      	b.n	8001446 <TaskSwitcher+0x36>

	return (count <= MAX_TASKS) ? i : -1;
 800143e:	2b0b      	cmp	r3, #11
 8001440:	d001      	beq.n	8001446 <TaskSwitcher+0x36>
	int32_t nextTask;
	register uint32_t *currentPCB asm("r0");
	register uint32_t *nextPCB asm("r1");
	//printf("Task switcher called\n\n");
	nextTask = TaskNext();
	if(nextTask < 0)
 8001442:	2c00      	cmp	r4, #0
 8001444:	da05      	bge.n	8001452 <TaskSwitcher+0x42>
	{
		/* In the case of no tasks to run,return to the original thread */
		printf("TaskSwitcher(): No tasks to run!\n");
 8001446:	480f      	ldr	r0, [pc, #60]	; (8001484 <TaskSwitcher+0x74>)
 8001448:	f005 f8b8 	bl	80065bc <puts>
		nextTask = 0;
		return -1;
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	bd70      	pop	{r4, r5, r6, pc}
	}
	/* If the current task is the only one  to be running, just return */
	if(nextTask == currentTask){
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	429c      	cmp	r4, r3
 8001456:	d00e      	beq.n	8001476 <TaskSwitcher+0x66>
		return 0;
	}
	currentPCB = &(tasks[currentTask].pcb.r4);
 8001458:	fb00 2003 	mla	r0, r0, r3, r2
	nextPCB = &(tasks[nextTask].pcb.r4);
	currentTask = nextTask;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <TaskSwitcher+0x6c>)
	/* If the current task is the only one  to be running, just return */
	if(nextTask == currentTask){
		return 0;
	}
	currentPCB = &(tasks[currentTask].pcb.r4);
	nextPCB = &(tasks[nextTask].pcb.r4);
 800145e:	4411      	add	r1, r2
	}
	/* If the current task is the only one  to be running, just return */
	if(nextTask == currentTask){
		return 0;
	}
	currentPCB = &(tasks[currentTask].pcb.r4);
 8001460:	300c      	adds	r0, #12
	nextPCB = &(tasks[nextTask].pcb.r4);
 8001462:	310c      	adds	r1, #12
	currentTask = nextTask;
 8001464:	601c      	str	r4, [r3, #0]
	asm volatile (
 8001466:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800146a:	f8c0 d000 	str.w	sp, [r0]
 800146e:	e8b1 5ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8001472:	f8d1 d000 	ldr.w	sp, [r1]
		nextTask = 0;
		return -1;
	}
	/* If the current task is the only one  to be running, just return */
	if(nextTask == currentTask){
		return 0;
 8001476:	2000      	movs	r0, #0
		: /* No Outputs */
		: [current] "r" (currentPCB), [next] "r"
		(nextPCB) /* Inputs */: /* 'No' Clobbers */);
		/* We are now on the other context */
	return 0;
}
 8001478:	bd70      	pop	{r4, r5, r6, pc}
 800147a:	bf00      	nop
 800147c:	20000ab8 	.word	0x20000ab8
 8001480:	20000f00 	.word	0x20000f00
 8001484:	0800b3aa 	.word	0x0800b3aa

08001488 <TaskKill>:
//NAME: TaskKill
//DESCRIPTION:  Kill the task with given id
//PARAMETER: id of the task
//RETURNS: returns task id that is killed or else return -1 if given id is invalid
int32_t TaskKill(int32_t id){
	if(tasks[id].f != NULL){
 8001488:	2338      	movs	r3, #56	; 0x38
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <TaskKill+0x24>)
 800148c:	4343      	muls	r3, r0

//NAME: TaskKill
//DESCRIPTION:  Kill the task with given id
//PARAMETER: id of the task
//RETURNS: returns task id that is killed or else return -1 if given id is invalid
int32_t TaskKill(int32_t id){
 800148e:	b510      	push	{r4, lr}
	if(tasks[id].f != NULL){
 8001490:	58d1      	ldr	r1, [r2, r3]
 8001492:	18d4      	adds	r4, r2, r3
 8001494:	b139      	cbz	r1, 80014a6 <TaskKill+0x1e>
		tasks[id].f = NULL;    //add test conditions here
 8001496:	2100      	movs	r1, #0
 8001498:	50d1      	str	r1, [r2, r3]
		tasks[id].data = NULL;
		currentTask--;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <TaskKill+0x28>)
//PARAMETER: id of the task
//RETURNS: returns task id that is killed or else return -1 if given id is invalid
int32_t TaskKill(int32_t id){
	if(tasks[id].f != NULL){
		tasks[id].f = NULL;    //add test conditions here
		tasks[id].data = NULL;
 800149c:	6061      	str	r1, [r4, #4]
		currentTask--;
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
		return id ;
 80014a4:	bd10      	pop	{r4, pc}
	}
	else{
		return -1;
 80014a6:	f04f 30ff 	mov.w	r0, #4294967295
	} 
}
 80014aa:	bd10      	pop	{r4, pc}
 80014ac:	20000f00 	.word	0x20000f00
 80014b0:	20000ab8 	.word	0x20000ab8

080014b4 <TaskShell>:


__attribute__((naked)) static void TaskShell(void)
{
	/* call the appropriate Task Function */
	tasks[currentTask].f(tasks[currentTask].data);
 80014b4:	4c06      	ldr	r4, [pc, #24]	; (80014d0 <TaskShell+0x1c>)
 80014b6:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <TaskShell+0x20>)
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	2138      	movs	r1, #56	; 0x38
 80014bc:	434b      	muls	r3, r1
 80014be:	18d1      	adds	r1, r2, r3
 80014c0:	58d3      	ldr	r3, [r2, r3]
 80014c2:	6848      	ldr	r0, [r1, #4]
 80014c4:	4798      	blx	r3
	/* Terminate this task */
	TaskKill(currentTask);
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	f7ff ffde 	bl	8001488 <TaskKill>
	/* Call scheduler, Never returns */
	TaskSwitcher();
 80014cc:	f7ff bfa0 	b.w	8001410 <TaskSwitcher>
 80014d0:	20000ab8 	.word	0x20000ab8
 80014d4:	20000f00 	.word	0x20000f00

080014d8 <TaskAdd>:
//NAME: TaskAdd
//DESCRIPTION:  Add new task
//PARAMETER: add new function and data int the task array
//RETURNS: position of current task
int32_t TaskAdd(void (*f)(void *data), void *data)
{
 80014d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014dc:	4c15      	ldr	r4, [pc, #84]	; (8001534 <TaskAdd+0x5c>)
 80014de:	4e16      	ldr	r6, [pc, #88]	; (8001538 <TaskAdd+0x60>)
 80014e0:	4607      	mov	r7, r0
 80014e2:	4688      	mov	r8, r1
	 /* Fill in initial PCB */
	 for( int i=0; i<MAX_TASKS; i++) 
 80014e4:	2500      	movs	r5, #0
	 {
		 memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 80014e6:	4620      	mov	r0, r4
 80014e8:	2100      	movs	r1, #0
 80014ea:	222c      	movs	r2, #44	; 0x2c
 80014ec:	f004 ffcc 	bl	8006488 <memset>
		 tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
		 tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
		 tasks[i].pcb.lr =(uint32_t)TaskShell;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <TaskAdd+0x64>)
{
	 /* Fill in initial PCB */
	 for( int i=0; i<MAX_TASKS; i++) 
	 {
		 memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
		 tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 80014f2:	62a6      	str	r6, [r4, #40]	; 0x28
		 tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
		 tasks[i].pcb.lr =(uint32_t)TaskShell;
 80014f4:	6263      	str	r3, [r4, #36]	; 0x24
		 /* Put an initial stack frame on too */
		 stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 80014f6:	60f3      	str	r3, [r6, #12]
		 if(tasks[i].f == NULL)
 80014f8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
	 /* Fill in initial PCB */
	 for( int i=0; i<MAX_TASKS; i++) 
	 {
		 memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
		 tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
		 tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 80014fc:	61e6      	str	r6, [r4, #28]
		 tasks[i].pcb.lr =(uint32_t)TaskShell;
		 /* Put an initial stack frame on too */
		 stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
		 if(tasks[i].f == NULL)
 80014fe:	b96b      	cbnz	r3, 800151c <TaskAdd+0x44>
		 {
			tasks[i].f = f;
 8001500:	2238      	movs	r2, #56	; 0x38
 8001502:	436a      	muls	r2, r5
 8001504:	4c0e      	ldr	r4, [pc, #56]	; (8001540 <TaskAdd+0x68>)
 8001506:	18a3      	adds	r3, r4, r2
 8001508:	50a7      	str	r7, [r4, r2]
			tasks[i].data = data;
			tasks[i].stack = stacks[i];
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <TaskAdd+0x6c>)
		 /* Put an initial stack frame on too */
		 stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
		 if(tasks[i].f == NULL)
		 {
			tasks[i].f = f;
			tasks[i].data = data;
 800150c:	f8c3 8004 	str.w	r8, [r3, #4]
			tasks[i].stack = stacks[i];
 8001510:	eb02 2285 	add.w	r2, r2, r5, lsl #10
 8001514:	609a      	str	r2, [r3, #8]
			//printf(" Task:  %d added\n", i);
		 	return i;
 8001516:	4628      	mov	r0, r5
 8001518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//PARAMETER: add new function and data int the task array
//RETURNS: position of current task
int32_t TaskAdd(void (*f)(void *data), void *data)
{
	 /* Fill in initial PCB */
	 for( int i=0; i<MAX_TASKS; i++) 
 800151c:	3501      	adds	r5, #1
 800151e:	2d0a      	cmp	r5, #10
 8001520:	f104 0438 	add.w	r4, r4, #56	; 0x38
 8001524:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001528:	d1dd      	bne.n	80014e6 <TaskAdd+0xe>
			tasks[i].stack = stacks[i];
			//printf(" Task:  %d added\n", i);
		 	return i;
		 }
	 }
		 return -1;
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001532:	bf00      	nop
 8001534:	20000f0c 	.word	0x20000f0c
 8001538:	20001520 	.word	0x20001520
 800153c:	080014b5 	.word	0x080014b5
 8001540:	20000f00 	.word	0x20000f00
 8001544:	20001130 	.word	0x20001130

08001548 <task0>:

//NAME: task0
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task0(void *data){
 8001548:	b510      	push	{r4, lr}
 800154a:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++){
		printf("Task: 0\n");
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <task0+0x34>)
 800154e:	f005 f835 	bl	80065bc <puts>
		HAL_GPIO_WritePin(GPIOE, LED[0], 1);
 8001552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001556:	2201      	movs	r2, #1
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <task0+0x38>)
 800155a:	f001 fde7 	bl	800312c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800155e:	20c8      	movs	r0, #200	; 0xc8
 8001560:	f001 fcb2 	bl	8002ec8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED[0], 0);
 8001564:	4806      	ldr	r0, [pc, #24]	; (8001580 <task0+0x38>)
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	2200      	movs	r2, #0
 800156c:	f001 fdde 	bl	800312c <HAL_GPIO_WritePin>
		TaskSwitcher();
 8001570:	f7ff ff4e 	bl	8001410 <TaskSwitcher>
//NAME: task0
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task0(void *data){
	for(int i = 0; i < 10; i++){
 8001574:	3c01      	subs	r4, #1
 8001576:	d1e9      	bne.n	800154c <task0+0x4>
		HAL_Delay(200);
		HAL_GPIO_WritePin(GPIOE, LED[0], 0);
		TaskSwitcher();
	}
	return;
}
 8001578:	bd10      	pop	{r4, pc}
 800157a:	bf00      	nop
 800157c:	0800b3cb 	.word	0x0800b3cb
 8001580:	48001000 	.word	0x48001000

08001584 <task1>:

//NAME: task1
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task1(void *data){
 8001584:	b510      	push	{r4, lr}
 8001586:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++){
		printf("Task: 1\n");
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <task1+0x34>)
 800158a:	f005 f817 	bl	80065bc <puts>
		HAL_GPIO_WritePin(GPIOE, LED[1], 1);
 800158e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001592:	2201      	movs	r2, #1
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <task1+0x38>)
 8001596:	f001 fdc9 	bl	800312c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800159a:	20c8      	movs	r0, #200	; 0xc8
 800159c:	f001 fc94 	bl	8002ec8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED[1], 0);
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <task1+0x38>)
 80015a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a6:	2200      	movs	r2, #0
 80015a8:	f001 fdc0 	bl	800312c <HAL_GPIO_WritePin>
		TaskSwitcher();	
 80015ac:	f7ff ff30 	bl	8001410 <TaskSwitcher>
//NAME: task1
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task1(void *data){
	for(int i = 0; i < 10; i++){
 80015b0:	3c01      	subs	r4, #1
 80015b2:	d1e9      	bne.n	8001588 <task1+0x4>
		HAL_GPIO_WritePin(GPIOE, LED[1], 0);
		TaskSwitcher();	
	}
	return;

}
 80015b4:	bd10      	pop	{r4, pc}
 80015b6:	bf00      	nop
 80015b8:	0800b3d3 	.word	0x0800b3d3
 80015bc:	48001000 	.word	0x48001000

080015c0 <task2>:

//NAME: task2
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task2(void *data){
 80015c0:	b510      	push	{r4, lr}
 80015c2:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++){
		printf("Task: 2\n");
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <task2+0x34>)
 80015c6:	f004 fff9 	bl	80065bc <puts>
		HAL_GPIO_WritePin(GPIOE, LED[2], 1);
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	2201      	movs	r2, #1
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <task2+0x38>)
 80015d2:	f001 fdab 	bl	800312c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80015d6:	20c8      	movs	r0, #200	; 0xc8
 80015d8:	f001 fc76 	bl	8002ec8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED[2], 0);
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <task2+0x38>)
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e2:	2200      	movs	r2, #0
 80015e4:	f001 fda2 	bl	800312c <HAL_GPIO_WritePin>
		TaskSwitcher();
 80015e8:	f7ff ff12 	bl	8001410 <TaskSwitcher>
//NAME: task2
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task2(void *data){
	for(int i = 0; i < 10; i++){
 80015ec:	3c01      	subs	r4, #1
 80015ee:	d1e9      	bne.n	80015c4 <task2+0x4>
		HAL_GPIO_WritePin(GPIOE, LED[2], 0);
		TaskSwitcher();
	}
	return;

}
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	bf00      	nop
 80015f4:	0800b3db 	.word	0x0800b3db
 80015f8:	48001000 	.word	0x48001000

080015fc <task3>:

//NAME: task3
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task3(void *data){
 80015fc:	b510      	push	{r4, lr}
 80015fe:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++){
		printf("Task: 3\n");
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <task3+0x34>)
 8001602:	f004 ffdb 	bl	80065bc <puts>
		HAL_GPIO_WritePin(GPIOE, LED[4], 1);
 8001606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160a:	2201      	movs	r2, #1
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <task3+0x38>)
 800160e:	f001 fd8d 	bl	800312c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001612:	20c8      	movs	r0, #200	; 0xc8
 8001614:	f001 fc58 	bl	8002ec8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED[4], 0);
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <task3+0x38>)
 800161a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161e:	2200      	movs	r2, #0
 8001620:	f001 fd84 	bl	800312c <HAL_GPIO_WritePin>
		TaskSwitcher();
 8001624:	f7ff fef4 	bl	8001410 <TaskSwitcher>
//NAME: task3
//DESCRIPTION: toggles led
//PARAMETER: void type data
//RETURNS: none
void task3(void *data){
	for(int i = 0; i < 10; i++){
 8001628:	3c01      	subs	r4, #1
 800162a:	d1e9      	bne.n	8001600 <task3+0x4>
		HAL_Delay(200);
		HAL_GPIO_WritePin(GPIOE, LED[4], 0);
		TaskSwitcher();
	}
	return;
}
 800162c:	bd10      	pop	{r4, pc}
 800162e:	bf00      	nop
 8001630:	0800b3e3 	.word	0x0800b3e3
 8001634:	48001000 	.word	0x48001000

08001638 <task4>:

//NAME: task4
//DESCRIPTION: Runs dcmotor
//PARAMETER: void type data
//RETURNS: none
void task4(void *data){
 8001638:	b510      	push	{r4, lr}
 800163a:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++){
		printf("Task: 4\n");
 800163c:	4806      	ldr	r0, [pc, #24]	; (8001658 <task4+0x20>)
 800163e:	f004 ffbd 	bl	80065bc <puts>
		dcRun();
 8001642:	f000 f901 	bl	8001848 <dcRun>
		HAL_Delay(500);
 8001646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800164a:	f001 fc3d 	bl	8002ec8 <HAL_Delay>
		//dcStop();
		TaskSwitcher();
 800164e:	f7ff fedf 	bl	8001410 <TaskSwitcher>
//NAME: task4
//DESCRIPTION: Runs dcmotor
//PARAMETER: void type data
//RETURNS: none
void task4(void *data){
	for(int i = 0; i < 10; i++){
 8001652:	3c01      	subs	r4, #1
 8001654:	d1f2      	bne.n	800163c <task4+0x4>
		HAL_Delay(500);
		//dcStop();
		TaskSwitcher();
	}
	return;
}
 8001656:	bd10      	pop	{r4, pc}
 8001658:	0800b3eb 	.word	0x0800b3eb

0800165c <TaskCurrent>:
//DESCRIPTION: return the id of current task
//PARAMETER: none
//RETURNS: position of currnet task to be executed
int32_t TaskCurrent(){
	return currentTask;
}
 800165c:	4b01      	ldr	r3, [pc, #4]	; (8001664 <TaskCurrent+0x8>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000ab8 	.word	0x20000ab8

08001668 <TaskInit>:
//NAME: TaskInit 
//DESCRIPTION: Initializes the stack header
//PARAMETER: none
//RETURNS: none
void TaskInit(void)
{
 8001668:	b510      	push	{r4, lr}
 800166a:	2300      	movs	r3, #0
	for(int x = 0 ; x<MAX_TASKS ; x++)
	{
		tasks[x].f    = NULL;               //assign NULL the variable
 800166c:	4c0f      	ldr	r4, [pc, #60]	; (80016ac <TaskInit+0x44>)
 800166e:	2100      	movs	r1, #0
 8001670:	191a      	adds	r2, r3, r4
 8001672:	5119      	str	r1, [r3, r4]
 8001674:	3338      	adds	r3, #56	; 0x38
//DESCRIPTION: Initializes the stack header
//PARAMETER: none
//RETURNS: none
void TaskInit(void)
{
	for(int x = 0 ; x<MAX_TASKS ; x++)
 8001676:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
	{
		tasks[x].f    = NULL;               //assign NULL the variable
		tasks[x].data = NULL;               //assign NULL to the variable
 800167a:	6051      	str	r1, [r2, #4]
//DESCRIPTION: Initializes the stack header
//PARAMETER: none
//RETURNS: none
void TaskInit(void)
{
	for(int x = 0 ; x<MAX_TASKS ; x++)
 800167c:	d1f6      	bne.n	800166c <TaskInit+0x4>
		tasks[x].data = NULL;               //assign NULL to the variable
	}

	//adding TaskNull function as an initial task in the task array
	int i =0;
	memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 800167e:	222c      	movs	r2, #44	; 0x2c
 8001680:	f104 000c 	add.w	r0, r4, #12
 8001684:	f004 ff00 	bl	8006488 <memset>
 	tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <TaskInit+0x48>)
 	tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 	tasks[i].pcb.lr =(uint32_t)TaskShell;
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <TaskInit+0x4c>)
	}

	//adding TaskNull function as an initial task in the task array
	int i =0;
	memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 	tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 800168c:	6363      	str	r3, [r4, #52]	; 0x34
 	tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 	tasks[i].pcb.lr =(uint32_t)TaskShell;
 	/* Put an initial stack frame on too */
 	stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 800168e:	60da      	str	r2, [r3, #12]
	//adding TaskNull function as an initial task in the task array
	int i =0;
	memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 	tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 	tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 	tasks[i].pcb.lr =(uint32_t)TaskShell;
 8001690:	6322      	str	r2, [r4, #48]	; 0x30
 	/* Put an initial stack frame on too */
 	stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 	if(tasks[i].f == NULL)
 8001692:	6822      	ldr	r2, [r4, #0]

	//adding TaskNull function as an initial task in the task array
	int i =0;
	memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 	tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 	tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 8001694:	62a3      	str	r3, [r4, #40]	; 0x28
 	tasks[i].pcb.lr =(uint32_t)TaskShell;
 	/* Put an initial stack frame on too */
 	stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 8001696:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 	if(tasks[i].f == NULL)
 800169a:	b912      	cbnz	r2, 80016a2 <TaskInit+0x3a>
 	{
 		tasks[i].f = TaskNull;
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <TaskInit+0x50>)
 		tasks[i].data = NULL;
 		tasks[i].stack = stacks[i];
 800169e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 
 	}
	currentTask = 0;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <TaskInit+0x54>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop
 80016ac:	20000f00 	.word	0x20000f00
 80016b0:	20001520 	.word	0x20001520
 80016b4:	080014b5 	.word	0x080014b5
 80016b8:	0800140d 	.word	0x0800140d
 80016bc:	20000ab8 	.word	0x20000ab8

080016c0 <CmdTaskKill>:

//NAME: CmdTaskKill
//DESCRIPTION: command to call TaskKill function 
//PARAMETER: mode
//RETURNS: none
void CmdTaskKill(int mode){
 80016c0:	b513      	push	{r0, r1, r4, lr}
	if(mode != CMD_INTERACTIVE) {
 80016c2:	b9a8      	cbnz	r0, 80016f0 <CmdTaskKill+0x30>
    	return;
	}
	int32_t id;
	rc = fetch_int32_arg(&id);
 80016c4:	a801      	add	r0, sp, #4
 80016c6:	f000 fa25 	bl	8001b14 <fetch_int32_arg>
 80016ca:	4c0a      	ldr	r4, [pc, #40]	; (80016f4 <CmdTaskKill+0x34>)
 80016cc:	6020      	str	r0, [r4, #0]

	if(rc){
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	b11b      	cbz	r3, 80016da <CmdTaskKill+0x1a>
		printf("Enter task ID to kill\n");
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <CmdTaskKill+0x38>)
 80016d4:	f004 ff72 	bl	80065bc <puts>
		return;
 80016d8:	e00a      	b.n	80016f0 <CmdTaskKill+0x30>
	}

	rc = TaskKill((int32_t)id);
 80016da:	9801      	ldr	r0, [sp, #4]
 80016dc:	f7ff fed4 	bl	8001488 <TaskKill>
 80016e0:	6020      	str	r0, [r4, #0]
	if (rc == -1){
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	d103      	bne.n	80016f0 <CmdTaskKill+0x30>
		printf("Invalid task id: %d\n", (int)id);
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <CmdTaskKill+0x3c>)
 80016ea:	9901      	ldr	r1, [sp, #4]
 80016ec:	f004 ff16 	bl	800651c <printf>
		return;
	}	
}
 80016f0:	b002      	add	sp, #8
 80016f2:	bd10      	pop	{r4, pc}
 80016f4:	20000efc 	.word	0x20000efc
 80016f8:	0800b3f3 	.word	0x0800b3f3
 80016fc:	0800b409 	.word	0x0800b409

08001700 <CmdTaskTest>:
//NAME: CmdTaskTest
//DESCRIPTION: command to calls TaskSwitcher to test the task
//PARAMETER: mode
//RETURNS: none
void CmdTaskTest(int mode){
	if(mode != CMD_INTERACTIVE) {
 8001700:	b908      	cbnz	r0, 8001706 <CmdTaskTest+0x6>
    	return;
	}
	TaskSwitcher();	
 8001702:	f7ff be85 	b.w	8001410 <TaskSwitcher>
 8001706:	4770      	bx	lr

08001708 <CmdTaskAdd>:

//NAME: CmdTaskAdd
//DESCRIPTION: command to call TaskAdd function
//PARAMETER: mode
//RETURNS: none
void CmdTaskAdd(int mode){
 8001708:	b510      	push	{r4, lr}
 800170a:	4604      	mov	r4, r0
	TaskInit();
 800170c:	f7ff ffac 	bl	8001668 <TaskInit>

	if(mode != CMD_INTERACTIVE) {
 8001710:	b9ac      	cbnz	r4, 800173e <CmdTaskAdd+0x36>
    	return;
	}

	TaskAdd(task0, (void*) 0);
 8001712:	4621      	mov	r1, r4
 8001714:	480a      	ldr	r0, [pc, #40]	; (8001740 <CmdTaskAdd+0x38>)
 8001716:	f7ff fedf 	bl	80014d8 <TaskAdd>
	TaskAdd(task1, (void*) 1);
 800171a:	2101      	movs	r1, #1
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <CmdTaskAdd+0x3c>)
 800171e:	f7ff fedb 	bl	80014d8 <TaskAdd>
	TaskAdd(task2, (void*) 2);
 8001722:	2102      	movs	r1, #2
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <CmdTaskAdd+0x40>)
 8001726:	f7ff fed7 	bl	80014d8 <TaskAdd>
	TaskAdd(task3, (void*) 3);
 800172a:	2103      	movs	r1, #3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <CmdTaskAdd+0x44>)
 800172e:	f7ff fed3 	bl	80014d8 <TaskAdd>
	TaskAdd(task4, (void*) 4);
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <CmdTaskAdd+0x48>)
 8001734:	2104      	movs	r1, #4

}
 8001736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	TaskAdd(task0, (void*) 0);
	TaskAdd(task1, (void*) 1);
	TaskAdd(task2, (void*) 2);
	TaskAdd(task3, (void*) 3);
	TaskAdd(task4, (void*) 4);
 800173a:	f7ff becd 	b.w	80014d8 <TaskAdd>
 800173e:	bd10      	pop	{r4, pc}
 8001740:	08001549 	.word	0x08001549
 8001744:	08001585 	.word	0x08001585
 8001748:	080015c1 	.word	0x080015c1
 800174c:	080015fd 	.word	0x080015fd
 8001750:	08001639 	.word	0x08001639

08001754 <CmdTaskCurrent>:

//NAME: CmdTaskCurrent
//DESCRIPTION: command to calls TaskCurrent to display current task
//PARAMETER: mode
//RETURNS: none
void CmdTaskCurrent(int mode){
 8001754:	b508      	push	{r3, lr}
	if(mode != CMD_INTERACTIVE) {
 8001756:	b938      	cbnz	r0, 8001768 <CmdTaskCurrent+0x14>
    	return;
	}
	int32_t current;
	current = TaskCurrent();
 8001758:	f7ff ff80 	bl	800165c <TaskCurrent>
	printf("current task : %ld\n", current);
}
 800175c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTaskCurrent(int mode){
	if(mode != CMD_INTERACTIVE) {
    	return;
	}
	int32_t current;
	current = TaskCurrent();
 8001760:	4601      	mov	r1, r0
	printf("current task : %ld\n", current);
 8001762:	4802      	ldr	r0, [pc, #8]	; (800176c <CmdTaskCurrent+0x18>)
 8001764:	f004 beda 	b.w	800651c <printf>
 8001768:	bd08      	pop	{r3, pc}
 800176a:	bf00      	nop
 800176c:	0800b41e 	.word	0x0800b41e

08001770 <DcMotorInit>:

// Name: DcMotorInit
// Description: Initializes peripheral for dc motor
// Parameters: mode
// Return: None
void DcMotorInit(int mode){
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(mode != CMD_INTERACTIVE) {
 8001772:	4605      	mov	r5, r0

// Name: DcMotorInit
// Description: Initializes peripheral for dc motor
// Parameters: mode
// Return: None
void DcMotorInit(int mode){
 8001774:	b089      	sub	sp, #36	; 0x24
    if(mode != CMD_INTERACTIVE) {
 8001776:	2800      	cmp	r0, #0
 8001778:	d154      	bne.n	8001824 <DcMotorInit+0xb4>
      return;
      }

	 __GPIOF_CLK_ENABLE();
 800177a:	4e2b      	ldr	r6, [pc, #172]	; (8001828 <DcMotorInit+0xb8>)
    /* Configure GPIO pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
 800177c:	4c2b      	ldr	r4, [pc, #172]	; (800182c <DcMotorInit+0xbc>)
void DcMotorInit(int mode){
    if(mode != CMD_INTERACTIVE) {
      return;
      }

	 __GPIOF_CLK_ENABLE();
 800177e:	6973      	ldr	r3, [r6, #20]
 8001780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001784:	6173      	str	r3, [r6, #20]
    /* Configure GPIO pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // for alternate function
 8001786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	60a0      	str	r0, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800178e:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = 3;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001790:	4621      	mov	r1, r4
 8001792:	4827      	ldr	r0, [pc, #156]	; (8001830 <DcMotorInit+0xc0>)
	 __GPIOF_CLK_ENABLE();
    /* Configure GPIO pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // for alternate function
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001794:	60e7      	str	r7, [r4, #12]
      }

	 __GPIOF_CLK_ENABLE();
    /* Configure GPIO pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // for alternate function
 8001796:	e884 000c 	stmia.w	r4, {r2, r3}
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 3;
 800179a:	6127      	str	r7, [r4, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179c:	f001 fc08 	bl	8002fb0 <HAL_GPIO_Init>

    __GPIOA_CLK_ENABLE();
 80017a0:	6973      	ldr	r3, [r6, #20]
 80017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a6:	6173      	str	r3, [r6, #20]
    /*Configure GPIO pins for PF4*/
    GPIO_InitStruct.Pin = (GPIO_PIN_2 | GPIO_PIN_3);
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	210c      	movs	r1, #12
 80017aa:	2301      	movs	r3, #1
 80017ac:	e884 000a 	stmia.w	r4, {r1, r3}
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
  	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 0;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	4621      	mov	r1, r4

    __GPIOA_CLK_ENABLE();
    /*Configure GPIO pins for PF4*/
    GPIO_InitStruct.Pin = (GPIO_PIN_2 | GPIO_PIN_3);
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	60a5      	str	r5, [r4, #8]
  	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 0;
 80017b8:	6125      	str	r5, [r4, #16]
    __GPIOA_CLK_ENABLE();
    /*Configure GPIO pins for PF4*/
    GPIO_InitStruct.Pin = (GPIO_PIN_2 | GPIO_PIN_3);
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
  	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80017ba:	60e7      	str	r7, [r4, #12]
    GPIO_InitStruct.Alternate = 0;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f001 fbf8 	bl	8002fb0 <HAL_GPIO_Init>

    /* Initialize PWM */
     __TIM15_CLK_ENABLE();
 80017c0:	69b3      	ldr	r3, [r6, #24]
    tim15.Instance = TIM15; 
 80017c2:	4c1c      	ldr	r4, [pc, #112]	; (8001834 <DcMotorInit+0xc4>)
    tim15.Init.Prescaler = 72;
 80017c4:	481c      	ldr	r0, [pc, #112]	; (8001838 <DcMotorInit+0xc8>)
  	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 0;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Initialize PWM */
     __TIM15_CLK_ENABLE();
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ca:	61b3      	str	r3, [r6, #24]
    tim15.Instance = TIM15; 
    tim15.Init.Prescaler = 72;
 80017cc:	2348      	movs	r3, #72	; 0x48
 80017ce:	e884 0009 	stmia.w	r4, {r0, r3}
    tim15.Init.CounterMode   = TIM_COUNTERMODE_UP; 
    tim15.Init.Period        = 1000; 
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    tim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; 
    tim15.Init.RepetitionCounter = 0; 

    /*Initalize the Timer*/
    rc = HAL_TIM_Base_Init(&tim15);
 80017d6:	4620      	mov	r0, r4

    /* Initialize PWM */
     __TIM15_CLK_ENABLE();
    tim15.Instance = TIM15; 
    tim15.Init.Prescaler = 72;
    tim15.Init.CounterMode   = TIM_COUNTERMODE_UP; 
 80017d8:	60a5      	str	r5, [r4, #8]
    tim15.Init.Period        = 1000; 
    tim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; 
 80017da:	6125      	str	r5, [r4, #16]
    tim15.Init.RepetitionCounter = 0; 
 80017dc:	6165      	str	r5, [r4, #20]
    /* Initialize PWM */
     __TIM15_CLK_ENABLE();
    tim15.Instance = TIM15; 
    tim15.Init.Prescaler = 72;
    tim15.Init.CounterMode   = TIM_COUNTERMODE_UP; 
    tim15.Init.Period        = 1000; 
 80017de:	60e3      	str	r3, [r4, #12]
    tim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; 
    tim15.Init.RepetitionCounter = 0; 

    /*Initalize the Timer*/
    rc = HAL_TIM_Base_Init(&tim15);
 80017e0:	f003 f948 	bl	8004a74 <HAL_TIM_Base_Init>
 80017e4:	4d15      	ldr	r5, [pc, #84]	; (800183c <DcMotorInit+0xcc>)
 80017e6:	4601      	mov	r1, r0
 80017e8:	7028      	strb	r0, [r5, #0]
    if(rc != HAL_OK) 
 80017ea:	b108      	cbz	r0, 80017f0 <DcMotorInit+0x80>
     {
      printf("Unable to initalize Timer, rc=%d\n",(unsigned)rc);
 80017ec:	4814      	ldr	r0, [pc, #80]	; (8001840 <DcMotorInit+0xd0>)
 80017ee:	e006      	b.n	80017fe <DcMotorInit+0x8e>
      return;
     }

    /*Start the timer*/
     rc = HAL_TIM_Base_Start(&tim15);
 80017f0:	4620      	mov	r0, r4
 80017f2:	f003 f8d8 	bl	80049a6 <HAL_TIM_Base_Start>
 80017f6:	4601      	mov	r1, r0
 80017f8:	7028      	strb	r0, [r5, #0]
     if(rc != HAL_OK) 
 80017fa:	b118      	cbz	r0, 8001804 <DcMotorInit+0x94>
     {
      printf("Unable to start the timer, rc=%d\n",(unsigned)rc);
 80017fc:	4811      	ldr	r0, [pc, #68]	; (8001844 <DcMotorInit+0xd4>)
 80017fe:	f004 fe8d 	bl	800651c <printf>
 8001802:	e00f      	b.n	8001824 <DcMotorInit+0xb4>
      return;
     }

    /*Configure output:*/
    TIM_OC_InitTypeDef sConfig; 
    sConfig.OCMode       = TIM_OCMODE_PWM1; 
 8001804:	2360      	movs	r3, #96	; 0x60
 8001806:	9301      	str	r3, [sp, #4]
    sConfig.Pulse        = 500; 
 8001808:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800180c:	9302      	str	r3, [sp, #8]
    sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH; 
 800180e:	9003      	str	r0, [sp, #12]
    sConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW; 
 8001810:	2308      	movs	r3, #8
    sConfig.OCFastMode   = TIM_OCFAST_DISABLE; 
 8001812:	9005      	str	r0, [sp, #20]
    sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET; 
 8001814:	9006      	str	r0, [sp, #24]
    sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET; 
 8001816:	9007      	str	r0, [sp, #28]
    HAL_TIM_PWM_ConfigChannel(&tim15,&sConfig,TIM_CHANNEL_2);
 8001818:	a901      	add	r1, sp, #4
 800181a:	4620      	mov	r0, r4
 800181c:	2204      	movs	r2, #4
    /*Configure output:*/
    TIM_OC_InitTypeDef sConfig; 
    sConfig.OCMode       = TIM_OCMODE_PWM1; 
    sConfig.Pulse        = 500; 
    sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH; 
    sConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW; 
 800181e:	9304      	str	r3, [sp, #16]
    sConfig.OCFastMode   = TIM_OCFAST_DISABLE; 
    sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET; 
    sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET; 
    HAL_TIM_PWM_ConfigChannel(&tim15,&sConfig,TIM_CHANNEL_2);
 8001820:	f003 fa4a 	bl	8004cb8 <HAL_TIM_PWM_ConfigChannel>

    return;
}
 8001824:	b009      	add	sp, #36	; 0x24
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	20003930 	.word	0x20003930
 8001830:	48001400 	.word	0x48001400
 8001834:	20003944 	.word	0x20003944
 8001838:	40014000 	.word	0x40014000
 800183c:	20000efc 	.word	0x20000efc
 8001840:	0800b4dd 	.word	0x0800b4dd
 8001844:	0800b4ff 	.word	0x0800b4ff

08001848 <dcRun>:

// Name: dcRun
// Description: starts the dc motor
// Parameters: None
// Return: None
void dcRun(){
 8001848:	b508      	push	{r3, lr}
    TIM15->CCR2= 500;    
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <dcRun+0x30>)
 800184c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET); //enable the motor
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	2104      	movs	r1, #4
 8001858:	2201      	movs	r2, #1
 800185a:	f001 fc67 	bl	800312c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET); //disable the motor
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	2108      	movs	r1, #8
 8001864:	2200      	movs	r2, #0
 8001866:	f001 fc61 	bl	800312c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&tim15,TIM_CHANNEL_2); 
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <dcRun+0x34>)
 800186c:	2104      	movs	r1, #4
    return;
}
 800186e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// Return: None
void dcRun(){
    TIM15->CCR2= 500;    
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET); //enable the motor
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET); //disable the motor
    HAL_TIM_PWM_Start(&tim15,TIM_CHANNEL_2); 
 8001872:	f003 ba91 	b.w	8004d98 <HAL_TIM_PWM_Start>
 8001876:	bf00      	nop
 8001878:	40014000 	.word	0x40014000
 800187c:	20003944 	.word	0x20003944

08001880 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8001880:	2801      	cmp	r0, #1
#include "common.h"

int mytest( int x );

void CmdTest(int action)
{
 8001882:	b508      	push	{r3, lr}

  if(action==CMD_SHORT_HELP) return;
 8001884:	d00f      	beq.n	80018a6 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8001886:	2802      	cmp	r0, #2
 8001888:	d104      	bne.n	8001894 <CmdTest+0x14>
    printf("testasm\n\n"
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 800188c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
  if(action==CMD_LONG_HELP) {
    printf("testasm\n\n"
 8001890:	f004 be94 	b.w	80065bc <puts>
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 8001894:	204d      	movs	r0, #77	; 0x4d
 8001896:	f7fe fcdb 	bl	8000250 <mytest>
}
 800189a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 800189e:	4601      	mov	r1, r0
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <CmdTest+0x2c>)
 80018a2:	f004 be3b 	b.w	800651c <printf>
 80018a6:	bd08      	pop	{r3, pc}
 80018a8:	0800b55a 	.word	0x0800b55a
 80018ac:	0800b593 	.word	0x0800b593

080018b0 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 80018b0:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 80018b2:	b940      	cbnz	r0, 80018c6 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80018b4:	4668      	mov	r0, sp
 80018b6:	f000 f941 	bl	8001b3c <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80018ba:	a801      	add	r0, sp, #4
 80018bc:	f000 f93e 	bl	8001b3c <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80018c0:	9b00      	ldr	r3, [sp, #0]
 80018c2:	9a01      	ldr	r2, [sp, #4]
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	b003      	add	sp, #12
 80018c8:	f85d fb04 	ldr.w	pc, [sp], #4

080018cc <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 80018cc:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 80018ce:	b938      	cbnz	r0, 80018e0 <CmdR+0x14>

  fetch_uint32_arg(&addr);
 80018d0:	a801      	add	r0, sp, #4
 80018d2:	f000 f933 	bl	8001b3c <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 80018d6:	9901      	ldr	r1, [sp, #4]
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <CmdR+0x1c>)
 80018da:	680a      	ldr	r2, [r1, #0]
 80018dc:	f004 fe1e 	bl	800651c <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 80018e0:	b003      	add	sp, #12
 80018e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018e6:	bf00      	nop
 80018e8:	0800b5b7 	.word	0x0800b5b7

080018ec <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 80018ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f0:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80018f2:	b908      	cbnz	r0, 80018f8 <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80018f4:	4831      	ldr	r0, [pc, #196]	; (80019bc <parse+0xd0>)
 80018f6:	e022      	b.n	800193e <parse+0x52>
    return -1;
  }

  if(len==0) {
 80018f8:	b909      	cbnz	r1, 80018fe <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 80018fa:	4831      	ldr	r0, [pc, #196]	; (80019c0 <parse+0xd4>)
 80018fc:	e01f      	b.n	800193e <parse+0x52>
    return -1;
  }

  if(table == NULL) {
 80018fe:	b122      	cbz	r2, 800190a <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <parse+0xd8>)
 8001902:	3901      	subs	r1, #1
 8001904:	681e      	ldr	r6, [r3, #0]
 8001906:	4603      	mov	r3, r0
 8001908:	e009      	b.n	800191e <parse+0x32>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 800190a:	482f      	ldr	r0, [pc, #188]	; (80019c8 <parse+0xdc>)
 800190c:	e017      	b.n	800193e <parse+0x52>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800190e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001912:	b15a      	cbz	r2, 800192c <parse+0x40>
 8001914:	4432      	add	r2, r6
 8001916:	3901      	subs	r1, #1
 8001918:	7852      	ldrb	r2, [r2, #1]
 800191a:	0712      	lsls	r2, r2, #28
 800191c:	d506      	bpl.n	800192c <parse+0x40>
 800191e:	1c4f      	adds	r7, r1, #1
 8001920:	4618      	mov	r0, r3
 8001922:	460c      	mov	r4, r1
 8001924:	d1f3      	bne.n	800190e <parse+0x22>
  if((i==0) || (*buf==0)) {
 8001926:	7803      	ldrb	r3, [r0, #0]
 8001928:	b91b      	cbnz	r3, 8001932 <parse+0x46>
 800192a:	e042      	b.n	80019b2 <parse+0xc6>
 800192c:	2c00      	cmp	r4, #0
 800192e:	d1fa      	bne.n	8001926 <parse+0x3a>
 8001930:	e03f      	b.n	80019b2 <parse+0xc6>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 8001932:	4926      	ldr	r1, [pc, #152]	; (80019cc <parse+0xe0>)
 8001934:	f004 ff86 	bl	8006844 <strtok>
  if(p==NULL) {
 8001938:	4606      	mov	r6, r0
 800193a:	b910      	cbnz	r0, 8001942 <parse+0x56>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 800193c:	4824      	ldr	r0, [pc, #144]	; (80019d0 <parse+0xe4>)
 800193e:	4925      	ldr	r1, [pc, #148]	; (80019d4 <parse+0xe8>)
 8001940:	e035      	b.n	80019ae <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8001942:	4925      	ldr	r1, [pc, #148]	; (80019d8 <parse+0xec>)
 8001944:	f004 fecc 	bl	80066e0 <strcasecmp>
 8001948:	4604      	mov	r4, r0
 800194a:	b9a0      	cbnz	r0, 8001976 <parse+0x8a>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 800194c:	491f      	ldr	r1, [pc, #124]	; (80019cc <parse+0xe0>)
 800194e:	f004 ff79 	bl	8006844 <strtok>
    if(p == NULL) {
 8001952:	4606      	mov	r6, r0
 8001954:	b988      	cbnz	r0, 800197a <parse+0x8e>
 8001956:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 8001958:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800195c:	b359      	cbz	r1, 80019b6 <parse+0xca>
	if(t->help != NULL) {
 800195e:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8001962:	b11a      	cbz	r2, 800196c <parse+0x80>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001964:	481d      	ldr	r0, [pc, #116]	; (80019dc <parse+0xf0>)
 8001966:	f004 fdd9 	bl	800651c <printf>
 800196a:	e7f4      	b.n	8001956 <parse+0x6a>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 800196c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8001970:	2001      	movs	r0, #1
 8001972:	4798      	blx	r3
 8001974:	e7ef      	b.n	8001956 <parse+0x6a>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8001976:	2700      	movs	r7, #0
 8001978:	e008      	b.n	800198c <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 800197a:	2702      	movs	r7, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 800197c:	e006      	b.n	800198c <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 800197e:	4630      	mov	r0, r6
 8001980:	4641      	mov	r1, r8
 8001982:	f004 fead 	bl	80066e0 <strcasecmp>
 8001986:	4604      	mov	r4, r0
 8001988:	b130      	cbz	r0, 8001998 <parse+0xac>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 800198a:	350c      	adds	r5, #12
 800198c:	f8d5 8000 	ldr.w	r8, [r5]
 8001990:	f1b8 0f00 	cmp.w	r8, #0
 8001994:	d1f3      	bne.n	800197e <parse+0x92>
 8001996:	e008      	b.n	80019aa <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8001998:	b11f      	cbz	r7, 80019a2 <parse+0xb6>
	printf("%s:\n",t->cmdname);
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <parse+0xf4>)
 800199c:	4641      	mov	r1, r8
 800199e:	f004 fdbd 	bl	800651c <printf>
      }
      t->func(arg);
 80019a2:	686b      	ldr	r3, [r5, #4]
 80019a4:	4638      	mov	r0, r7
 80019a6:	4798      	blx	r3
      return 0;
 80019a8:	e005      	b.n	80019b6 <parse+0xca>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <parse+0xf8>)
 80019ac:	4631      	mov	r1, r6
 80019ae:	f004 fdb5 	bl	800651c <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 80019b2:	f04f 34ff 	mov.w	r4, #4294967295
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 80019b6:	4620      	mov	r0, r4
 80019b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019bc:	0800b602 	.word	0x0800b602
 80019c0:	0800b623 	.word	0x0800b623
 80019c4:	200001fc 	.word	0x200001fc
 80019c8:	0800b633 	.word	0x0800b633
 80019cc:	0800b656 	.word	0x0800b656
 80019d0:	0800b65d 	.word	0x0800b65d
 80019d4:	0800b6e6 	.word	0x0800b6e6
 80019d8:	0800b68d 	.word	0x0800b68d
 80019dc:	0800b692 	.word	0x0800b692
 80019e0:	0800b69e 	.word	0x0800b69e
 80019e4:	0800b6a3 	.word	0x0800b6a3

080019e8 <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 80019e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 80019ea:	4d3f      	ldr	r5, [pc, #252]	; (8001ae8 <TaskInput+0x100>)
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	b123      	cbz	r3, 80019fa <TaskInput+0x12>
    printf("ARMON>");
 80019f0:	483e      	ldr	r0, [pc, #248]	; (8001aec <TaskInput+0x104>)
 80019f2:	f004 fd93 	bl	800651c <printf>
    printPrompt = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 80019fa:	f10d 0007 	add.w	r0, sp, #7
 80019fe:	f000 fa3b 	bl	8001e78 <TerminalReadAnyNonBlock>
  if(rc) {
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d16e      	bne.n	8001ae4 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 8001a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d001      	beq.n	8001a12 <TaskInput+0x2a>
 8001a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a10:	d10d      	bne.n	8001a2e <TaskInput+0x46>
 8001a12:	4c37      	ldr	r4, [pc, #220]	; (8001af0 <TaskInput+0x108>)
 8001a14:	6822      	ldr	r2, [r4, #0]
 8001a16:	b152      	cbz	r2, 8001a2e <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 8001a18:	4836      	ldr	r0, [pc, #216]	; (8001af4 <TaskInput+0x10c>)
 8001a1a:	f004 fd7f 	bl	800651c <printf>
    buf--;     /* Then remove it from the buffer */
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <TaskInput+0x110>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	3a01      	subs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
    count--;   /* Then keep track of how many are left */
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	6023      	str	r3, [r4, #0]
 8001a2c:	e05a      	b.n	8001ae4 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 8001a2e:	2b21      	cmp	r3, #33	; 0x21
 8001a30:	d115      	bne.n	8001a5e <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <TaskInput+0x114>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d054      	beq.n	8001ae4 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 8001a3a:	4c31      	ldr	r4, [pc, #196]	; (8001b00 <TaskInput+0x118>)
 8001a3c:	4931      	ldr	r1, [pc, #196]	; (8001b04 <TaskInput+0x11c>)
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f004 fe72 	bl	8006728 <strcpy>
      printf("%s",input);
 8001a44:	4621      	mov	r1, r4
 8001a46:	4830      	ldr	r0, [pc, #192]	; (8001b08 <TaskInput+0x120>)
 8001a48:	f004 fd68 	bl	800651c <printf>
      count = strlen(input);
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f004 fec9 	bl	80067e4 <strlen>
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <TaskInput+0x108>)
 8001a54:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <TaskInput+0x110>)
 8001a58:	4404      	add	r4, r0
 8001a5a:	601c      	str	r4, [r3, #0]
      goto parseme;
 8001a5c:	e024      	b.n	8001aa8 <TaskInput+0xc0>
    }
  } else if(isprint((unsigned int)c)) {
 8001a5e:	4a2b      	ldr	r2, [pc, #172]	; (8001b0c <TaskInput+0x124>)
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	441a      	add	r2, r3
 8001a64:	7852      	ldrb	r2, [r2, #1]
 8001a66:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8001a6a:	d011      	beq.n	8001a90 <TaskInput+0xa8>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <TaskInput+0x108>)
 8001a6e:	6811      	ldr	r1, [r2, #0]
 8001a70:	294f      	cmp	r1, #79	; 0x4f
 8001a72:	d901      	bls.n	8001a78 <TaskInput+0x90>
      /* We are out of space */
      printf("\x07"); /* Beep */
 8001a74:	2007      	movs	r0, #7
 8001a76:	e008      	b.n	8001a8a <TaskInput+0xa2>
      return;
    } else {
      *buf++ = c;
 8001a78:	4c1f      	ldr	r4, [pc, #124]	; (8001af8 <TaskInput+0x110>)
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	7003      	strb	r3, [r0, #0]
 8001a7e:	1c45      	adds	r5, r0, #1
      count++;
 8001a80:	3101      	adds	r1, #1
      /* Echo it back to the user */
      printf("%c",c);
 8001a82:	f89d 0007 	ldrb.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 8001a86:	6025      	str	r5, [r4, #0]
      count++;
 8001a88:	6011      	str	r1, [r2, #0]
      /* Echo it back to the user */
      printf("%c",c);
 8001a8a:	f004 fd5b 	bl	8006544 <putchar>
 8001a8e:	e029      	b.n	8001ae4 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8001a90:	2b0d      	cmp	r3, #13
 8001a92:	d127      	bne.n	8001ae4 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001a96:	481b      	ldr	r0, [pc, #108]	; (8001b04 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001a98:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001a9a:	4919      	ldr	r1, [pc, #100]	; (8001b00 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001a9c:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001a9e:	f004 fe43 	bl	8006728 <strcpy>
    saved = 1;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <TaskInput+0x114>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	4c13      	ldr	r4, [pc, #76]	; (8001af8 <TaskInput+0x110>)
 8001aac:	f004 fd4a 	bl	8006544 <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <TaskInput+0x108>)
 8001ab2:	6821      	ldr	r1, [r4, #0]
 8001ab4:	6816      	ldr	r6, [r2, #0]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	1a72      	subs	r2, r6, r1
 8001abc:	441a      	add	r2, r3
 8001abe:	2a4f      	cmp	r2, #79	; 0x4f
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	d802      	bhi.n	8001acc <TaskInput+0xe4>
 8001ac6:	f803 2b01 	strb.w	r2, [r3], #1
 8001aca:	e7f6      	b.n	8001aba <TaskInput+0xd2>
 8001acc:	6023      	str	r3, [r4, #0]
    count = 0;
    parse(input, sizeof(input), Commands);
 8001ace:	4e0c      	ldr	r6, [pc, #48]	; (8001b00 <TaskInput+0x118>)
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <TaskInput+0x128>)
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
 8001ad2:	6002      	str	r2, [r0, #0]
    parse(input, sizeof(input), Commands);
 8001ad4:	2150      	movs	r1, #80	; 0x50
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f7ff ff07 	bl	80018ec <parse>
    buf = input;
    printPrompt = 1;
 8001ade:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 8001ae0:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8001ae2:	602b      	str	r3, [r5, #0]
  }
}
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	0800b6d8 	.word	0x0800b6d8
 8001af0:	20000abc 	.word	0x20000abc
 8001af4:	0800b6df 	.word	0x0800b6df
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000ac0 	.word	0x20000ac0
 8001b00:	200039d0 	.word	0x200039d0
 8001b04:	20003980 	.word	0x20003980
 8001b08:	0800b6e3 	.word	0x0800b6e3
 8001b0c:	200001fc 	.word	0x200001fc
 8001b10:	2000000c 	.word	0x2000000c

08001b14 <fetch_int32_arg>:
  return -1;
}

/* Fetch an integer argument */
int fetch_int32_arg(int32_t *dest)
{
 8001b14:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <fetch_int32_arg+0x24>)
  return -1;
}

/* Fetch an integer argument */
int fetch_int32_arg(int32_t *dest)
{
 8001b18:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f004 fe92 	bl	8006844 <strtok>
  if(p == NULL) {
 8001b20:	b130      	cbz	r0, 8001b30 <fetch_int32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = strtol(p,NULL,0);
 8001b22:	2100      	movs	r1, #0
 8001b24:	460a      	mov	r2, r1
 8001b26:	f004 ff5b 	bl	80069e0 <strtol>
 8001b2a:	6020      	str	r0, [r4, #0]
  return 0;
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
  }
  
  *dest = strtol(p,NULL,0);
  return 0;
}     
 8001b34:	bd10      	pop	{r4, pc}
 8001b36:	bf00      	nop
 8001b38:	0800b656 	.word	0x0800b656

08001b3c <fetch_uint32_arg>:

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8001b3c:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8001b40:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f004 fe7e 	bl	8006844 <strtok>
  if(p == NULL) {
 8001b48:	b130      	cbz	r0, 8001b58 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	f004 fff1 	bl	8006b34 <strtoul>
 8001b52:	6020      	str	r0, [r4, #0]
  return 0;
 8001b54:	2000      	movs	r0, #0
 8001b56:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 8001b5c:	bd10      	pop	{r4, pc}
 8001b5e:	bf00      	nop
 8001b60:	0800b656 	.word	0x0800b656

08001b64 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001b64:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001b66:	4906      	ldr	r1, [pc, #24]	; (8001b80 <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001b68:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f004 fe6a 	bl	8006844 <strtok>
  if(p == NULL) {
 8001b70:	b110      	cbz	r0, 8001b78 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8001b72:	6020      	str	r0, [r4, #0]
  return 0;
 8001b74:	2000      	movs	r0, #0
 8001b76:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
  }
  
  *dest = p;
  return 0;
}
 8001b7c:	bd10      	pop	{r4, pc}
 8001b7e:	bf00      	nop
 8001b80:	0800b656 	.word	0x0800b656

08001b84 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8001b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b88:	4683      	mov	fp, r0
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8001b8e:	4689      	mov	r9, r1
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d03b      	beq.n	8001c0c <DumpBuffer+0x88>
 8001b94:	ac01      	add	r4, sp, #4
 8001b96:	2500      	movs	r5, #0
 8001b98:	4627      	mov	r7, r4

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 8001b9a:	454d      	cmp	r5, r9
 8001b9c:	eb05 010a 	add.w	r1, r5, sl
 8001ba0:	f005 060f 	and.w	r6, r5, #15
 8001ba4:	d021      	beq.n	8001bea <DumpBuffer+0x66>
    if((i% BYTES_PER_LINE) == 0) {
 8001ba6:	b91e      	cbnz	r6, 8001bb0 <DumpBuffer+0x2c>
      printf("%08x:",(unsigned int)address);
 8001ba8:	481a      	ldr	r0, [pc, #104]	; (8001c14 <DumpBuffer+0x90>)
 8001baa:	f004 fcb7 	bl	800651c <printf>
      bufp = buf;
 8001bae:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <DumpBuffer+0x94>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8001bb2:	f81b 1005 	ldrb.w	r1, [fp, r5]
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001bb6:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001bb8:	4818      	ldr	r0, [pc, #96]	; (8001c1c <DumpBuffer+0x98>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001bba:	440b      	add	r3, r1
 8001bbc:	f104 0801 	add.w	r8, r4, #1
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8001bc6:	bf0a      	itet	eq
 8001bc8:	232e      	moveq	r3, #46	; 0x2e
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 8001bca:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8001bcc:	7023      	strbeq	r3, [r4, #0]
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001bce:	f004 fca5 	bl	800651c <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8001bd2:	2e0f      	cmp	r6, #15

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8001bd4:	4644      	mov	r4, r8
    }

    printf(" %02x",((unsigned int)c) & 0xff);
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8001bd6:	d106      	bne.n	8001be6 <DumpBuffer+0x62>
      *bufp = '\0';  /* NULL terminate buffer */
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f888 3000 	strb.w	r3, [r8]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8001bde:	4810      	ldr	r0, [pc, #64]	; (8001c20 <DumpBuffer+0x9c>)
 8001be0:	4639      	mov	r1, r7
 8001be2:	f004 fc9b 	bl	800651c <printf>
  if(count == 0) return;

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 8001be6:	3501      	adds	r5, #1
 8001be8:	e7d7      	b.n	8001b9a <DumpBuffer+0x16>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001bea:	2300      	movs	r3, #0
 8001bec:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 8001bee:	b16e      	cbz	r6, 8001c0c <DumpBuffer+0x88>
 8001bf0:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001bf2:	f1c6 0310 	rsb	r3, r6, #16
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	d204      	bcs.n	8001c04 <DumpBuffer+0x80>
      printf("   ");
 8001bfa:	480a      	ldr	r0, [pc, #40]	; (8001c24 <DumpBuffer+0xa0>)
 8001bfc:	f004 fc8e 	bl	800651c <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001c00:	3401      	adds	r4, #1
 8001c02:	e7f6      	b.n	8001bf2 <DumpBuffer+0x6e>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8001c04:	4806      	ldr	r0, [pc, #24]	; (8001c20 <DumpBuffer+0x9c>)
 8001c06:	4639      	mov	r1, r7
 8001c08:	f004 fc88 	bl	800651c <printf>
  }



}
 8001c0c:	b007      	add	sp, #28
 8001c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	0800b6ec 	.word	0x0800b6ec
 8001c18:	200001fc 	.word	0x200001fc
 8001c1c:	0800b6f2 	.word	0x0800b6f2
 8001c20:	0800b6f8 	.word	0x0800b6f8
 8001c24:	0800b6fe 	.word	0x0800b6fe

08001c28 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8001c28:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 8001c2a:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8001c2c:	d01d      	beq.n	8001c6a <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	4c0e      	ldr	r4, [pc, #56]	; (8001c6c <CmdDump+0x44>)
 8001c32:	4d0f      	ldr	r5, [pc, #60]	; (8001c70 <CmdDump+0x48>)
 8001c34:	d109      	bne.n	8001c4a <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8001c36:	480f      	ldr	r0, [pc, #60]	; (8001c74 <CmdDump+0x4c>)
 8001c38:	f004 fcc0 	bl	80065bc <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001c3c:	6821      	ldr	r1, [r4, #0]
 8001c3e:	682a      	ldr	r2, [r5, #0]
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8001c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001c46:	f004 bc69 	b.w	800651c <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff ff76 	bl	8001b3c <fetch_uint32_arg>
  if(rc == 0) {
 8001c50:	b910      	cbnz	r0, 8001c58 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 8001c52:	4628      	mov	r0, r5
 8001c54:	f7ff ff72 	bl	8001b3c <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	6829      	ldr	r1, [r5, #0]
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f7ff ff91 	bl	8001b84 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	682a      	ldr	r2, [r5, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	6023      	str	r3, [r4, #0]
 8001c6a:	bd38      	pop	{r3, r4, r5, pc}
 8001c6c:	20000ac4 	.word	0x20000ac4
 8001c70:	20000010 	.word	0x20000010
 8001c74:	0800b702 	.word	0x0800b702
 8001c78:	0800b89a 	.word	0x0800b89a

08001c7c <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8001c7c:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <_sbrk_r+0x2c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	b90a      	cbnz	r2, 8001c88 <_sbrk_r+0xc>
                heap_end = &end;
 8001c84:	4a09      	ldr	r2, [pc, #36]	; (8001cac <_sbrk_r+0x30>)
 8001c86:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8001c88:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8001c8a:	466b      	mov	r3, sp
 8001c8c:	4401      	add	r1, r0
 8001c8e:	4299      	cmp	r1, r3
 8001c90:	d906      	bls.n	8001ca0 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 8001c92:	f004 fbab 	bl	80063ec <__errno>
 8001c96:	230c      	movs	r3, #12
 8001c98:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8001c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9e:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 8001ca0:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <_sbrk_r+0x2c>)
 8001ca2:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8001ca4:	bd08      	pop	{r3, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000ac8 	.word	0x20000ac8
 8001cac:	2000476c 	.word	0x2000476c

08001cb0 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	4770      	bx	lr

08001cb6 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8001cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cba:	6053      	str	r3, [r2, #4]
        return 0;
}
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	4770      	bx	lr

08001cc0 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	4770      	bx	lr

08001cc4 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	4770      	bx	lr

08001cc8 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001cca:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001ccc:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001cce:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001cd0:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <USBD_CDC_DataIn+0x78>)
 8001cd4:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001cd6:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 8001cd8:	d12e      	bne.n	8001d38 <USBD_CDC_DataIn+0x70>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <USBD_CDC_DataIn+0x7c>)
 8001cdc:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 8001ce0:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8001ce4:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8001ce6:	fa12 f181 	uxtah	r1, r2, r1
 8001cea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001cee:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 8001cf2:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 8001cf6:	b289      	uxth	r1, r1
 8001cf8:	1a8a      	subs	r2, r1, r2
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8001d00:	2200      	movs	r2, #0
 8001d02:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8001d06:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 8001d0a:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8001d0e:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8001d10:	b289      	uxth	r1, r1
 8001d12:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 8001d14:	b182      	cbz	r2, 8001d38 <USBD_CDC_DataIn+0x70>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 8001d16:	1853      	adds	r3, r2, r1
 8001d18:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 8001d1a:	bf88      	it	hi
 8001d1c:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001d20:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8001d22:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001d24:	3186      	adds	r1, #134	; 0x86
 8001d26:	462a      	mov	r2, r5
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <USBD_CDC_DataIn+0x78>)
 8001d2a:	f003 fc40 	bl	80055ae <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8001d2e:	4804      	ldr	r0, [pc, #16]	; (8001d40 <USBD_CDC_DataIn+0x78>)
 8001d30:	f003 fc4b 	bl	80055ca <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8001d34:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8001d38:	4630      	mov	r0, r6
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
 8001d3c:	20003c44 	.word	0x20003c44
 8001d40:	20003a20 	.word	0x20003a20
 8001d44:	20000acc 	.word	0x20000acc

08001d48 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8001d48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8001d4c:	b9e0      	cbnz	r0, 8001d88 <CmdStats+0x40>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4e:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001d50:	480f      	ldr	r0, [pc, #60]	; (8001d90 <CmdStats+0x48>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001d52:	2100      	movs	r1, #0
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001d54:	f8d0 5110 	ldr.w	r5, [r0, #272]	; 0x110
 8001d58:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
 8001d5c:	f8d0 8118 	ldr.w	r8, [r0, #280]	; 0x118
 8001d60:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 8001d64:	f8d0 6120 	ldr.w	r6, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001d68:	2214      	movs	r2, #20
 8001d6a:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8001d6e:	f004 fb8b 	bl	8006488 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001d72:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8001d74:	4807      	ldr	r0, [pc, #28]	; (8001d94 <CmdStats+0x4c>)
 8001d76:	f8cd 8000 	str.w	r8, [sp]
 8001d7a:	9701      	str	r7, [sp, #4]
 8001d7c:	9602      	str	r6, [sp, #8]
 8001d7e:	2100      	movs	r1, #0
 8001d80:	462a      	mov	r2, r5
 8001d82:	4623      	mov	r3, r4
 8001d84:	f004 fbca 	bl	800651c <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8001d88:	b004      	add	sp, #16
 8001d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000acc 	.word	0x20000acc
 8001d94:	0800b8e8 	.word	0x0800b8e8

08001d98 <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 8001d98:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 8001d9a:	4c17      	ldr	r4, [pc, #92]	; (8001df8 <TerminalInit+0x60>)
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	6858      	ldr	r0, [r3, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	460b      	mov	r3, r1
 8001da6:	f004 fc11 	bl	80065cc <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	2100      	movs	r1, #0
 8001dae:	6898      	ldr	r0, [r3, #8]
 8001db0:	2202      	movs	r2, #2
 8001db2:	460b      	mov	r3, r1
 8001db4:	f004 fc0a 	bl	80065cc <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8001db8:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001dba:	4c10      	ldr	r4, [pc, #64]	; (8001dfc <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 8001dbc:	68d8      	ldr	r0, [r3, #12]
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f004 fc02 	bl	80065cc <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001dc8:	4620      	mov	r0, r4
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <TerminalInit+0x68>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f003 f809 	bl	8004de4 <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 8001dd2:	490c      	ldr	r1, [pc, #48]	; (8001e04 <TerminalInit+0x6c>)
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <TerminalInit+0x70>)
 8001dd6:	694b      	ldr	r3, [r1, #20]
 8001dd8:	6013      	str	r3, [r2, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <TerminalInit+0x74>)
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8001ddc:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8001dde:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8001de0:	f003 f815 	bl	8004e0e <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8001de4:	4620      	mov	r0, r4
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <TerminalInit+0x78>)
 8001de8:	f003 fbda 	bl	80055a0 <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8001dec:	4620      	mov	r0, r4
#endif

}
 8001dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8001df2:	f003 b813 	b.w	8004e1c <USBD_Start>
 8001df6:	bf00      	nop
 8001df8:	20000628 	.word	0x20000628
 8001dfc:	20003a20 	.word	0x20003a20
 8001e00:	20000128 	.word	0x20000128
 8001e04:	2000005c 	.word	0x2000005c
 8001e08:	20003c44 	.word	0x20003c44
 8001e0c:	08001cc9 	.word	0x08001cc9
 8001e10:	20000168 	.word	0x20000168

08001e14 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e16:	b672      	cpsid	i
  uint32_t count, tail;
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
 8001e18:	2300      	movs	r3, #0
  while(TerminalState[index].inCount && (count < len)) {
 8001e1a:	4d0f      	ldr	r5, [pc, #60]	; (8001e58 <TerminalRead+0x44>)
 8001e1c:	f44f 7692 	mov.w	r6, #292	; 0x124
 8001e20:	4346      	muls	r6, r0
 8001e22:	19ac      	adds	r4, r5, r6
 8001e24:	3480      	adds	r4, #128	; 0x80
 8001e26:	88a7      	ldrh	r7, [r4, #4]
 8001e28:	b2bf      	uxth	r7, r7
 8001e2a:	b18f      	cbz	r7, 8001e50 <TerminalRead+0x3c>
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00f      	beq.n	8001e50 <TerminalRead+0x3c>
    tail   = TerminalState[index].inTail;
 8001e30:	8867      	ldrh	r7, [r4, #2]
 8001e32:	b2bf      	uxth	r7, r7
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001e34:	443e      	add	r6, r7
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001e36:	3701      	adds	r7, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001e38:	5dad      	ldrb	r5, [r5, r6]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001e3a:	f007 077f 	and.w	r7, r7, #127	; 0x7f
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001e3e:	54cd      	strb	r5, [r1, r3]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001e40:	8067      	strh	r7, [r4, #2]
    TerminalState[index].inCount--;
 8001e42:	88a5      	ldrh	r5, [r4, #4]
 8001e44:	b2ad      	uxth	r5, r5
 8001e46:	3d01      	subs	r5, #1
 8001e48:	b2ad      	uxth	r5, r5
 8001e4a:	80a5      	strh	r5, [r4, #4]
    count++;
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	e7e4      	b.n	8001e1a <TerminalRead+0x6>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001e50:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000acc 	.word	0x20000acc

08001e5c <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	2000      	movs	r0, #0
 8001e60:	461a      	mov	r2, r3
 8001e62:	f7ff bfd7 	b.w	8001e14 <TerminalRead>

08001e66 <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8001e66:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f7ff ffd3 	bl	8001e14 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8001e6e:	f1d0 0001 	rsbs	r0, r0, #1
 8001e72:	bf38      	it	cc
 8001e74:	2000      	movcc	r0, #0
 8001e76:	bd08      	pop	{r3, pc}

08001e78 <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8001e78:	4601      	mov	r1, r0
 8001e7a:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fff2 	bl	8001e66 <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8001e82:	3000      	adds	r0, #0
 8001e84:	bf18      	it	ne
 8001e86:	2001      	movne	r0, #1
 8001e88:	bd08      	pop	{r3, pc}
	...

08001e8c <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <TerminalOutputBufferWrite+0xe8>)
 8001e90:	f44f 7492 	mov.w	r4, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001e94:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001e96:	fb04 3400 	mla	r4, r4, r0, r3
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001e9a:	d906      	bls.n	8001eaa <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001e9c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    return 1;
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001eaa:	f8b4 510a 	ldrh.w	r5, [r4, #266]	; 0x10a
 8001eae:	fa12 f585 	uxtah	r5, r2, r5
 8001eb2:	2d7f      	cmp	r5, #127	; 0x7f
 8001eb4:	d904      	bls.n	8001ec0 <TerminalOutputBufferWrite+0x34>
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8001eb6:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
 8001eba:	3501      	adds	r5, #1
 8001ebc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8001ec0:	f44f 7492 	mov.w	r4, #292	; 0x124
 8001ec4:	fb04 3500 	mla	r5, r4, r0, r3
 8001ec8:	f505 7584 	add.w	r5, r5, #264	; 0x108
 8001ecc:	886d      	ldrh	r5, [r5, #2]
 8001ece:	fa12 f585 	uxtah	r5, r2, r5
 8001ed2:	2d7f      	cmp	r5, #127	; 0x7f
 8001ed4:	d8f4      	bhi.n	8001ec0 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed6:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8001ed8:	fb04 3400 	mla	r4, r4, r0, r3
 8001edc:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 8001ee0:	4415      	add	r5, r2
 8001ee2:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8001ee6:	440a      	add	r2, r1
  while((len != 0) 
 8001ee8:	4291      	cmp	r1, r2
 8001eea:	d01d      	beq.n	8001f28 <TerminalOutputBufferWrite+0x9c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001eec:	f44f 7592 	mov.w	r5, #292	; 0x124
 8001ef0:	fb05 3500 	mla	r5, r5, r0, r3
 8001ef4:	f505 7484 	add.w	r4, r5, #264	; 0x108
 8001ef8:	8866      	ldrh	r6, [r4, #2]
 8001efa:	b2b6      	uxth	r6, r6
 8001efc:	2e7f      	cmp	r6, #127	; 0x7f
 8001efe:	d813      	bhi.n	8001f28 <TerminalOutputBufferWrite+0x9c>
    head = TerminalState[index].outHead;
 8001f00:	f8b5 7106 	ldrh.w	r7, [r5, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8001f04:	f811 cb01 	ldrb.w	ip, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8001f08:	b2bf      	uxth	r7, r7
 8001f0a:	f505 7680 	add.w	r6, r5, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8001f0e:	443d      	add	r5, r7
    TerminalState[index].outHead = TERMINALINCR(head);
 8001f10:	3701      	adds	r7, #1
 8001f12:	f007 077f 	and.w	r7, r7, #127	; 0x7f
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8001f16:	f885 c086 	strb.w	ip, [r5, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
 8001f1a:	80f7      	strh	r7, [r6, #6]
    TerminalState[index].outCount++;
 8001f1c:	8865      	ldrh	r5, [r4, #2]
 8001f1e:	b2ad      	uxth	r5, r5
 8001f20:	3501      	adds	r5, #1
 8001f22:	b2ad      	uxth	r5, r5
 8001f24:	8065      	strh	r5, [r4, #2]
 8001f26:	e7df      	b.n	8001ee8 <TerminalOutputBufferWrite+0x5c>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8001f28:	f44f 7292 	mov.w	r2, #292	; 0x124
 8001f2c:	fb02 3200 	mla	r2, r2, r0, r3
 8001f30:	f8b2 1108 	ldrh.w	r1, [r2, #264]	; 0x108
  count = TerminalState[index].outCount;
 8001f34:	f8b2 210a 	ldrh.w	r2, [r2, #266]	; 0x10a
    TerminalState[index].outCount++;
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8001f38:	b289      	uxth	r1, r1
  count = TerminalState[index].outCount;
 8001f3a:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8001f3c:	1854      	adds	r4, r2, r1
 8001f3e:	2c7f      	cmp	r4, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8001f40:	bf88      	it	hi
 8001f42:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  }
  switch(index) {
 8001f46:	b990      	cbnz	r0, 8001f6e <TerminalOutputBufferWrite+0xe2>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8001f48:	4c0b      	ldr	r4, [pc, #44]	; (8001f78 <TerminalOutputBufferWrite+0xec>)
 8001f4a:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
 8001f4e:	2803      	cmp	r0, #3
 8001f50:	d10d      	bne.n	8001f6e <TerminalOutputBufferWrite+0xe2>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8001f52:	4419      	add	r1, r3
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001f54:	b295      	uxth	r5, r2
 8001f56:	4620      	mov	r0, r4
 8001f58:	3186      	adds	r1, #134	; 0x86
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	f003 fb27 	bl	80055ae <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8001f60:	4620      	mov	r0, r4
 8001f62:	f003 fb32 	bl	80055ca <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8001f66:	b910      	cbnz	r0, 8001f6e <TerminalOutputBufferWrite+0xe2>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <TerminalOutputBufferWrite+0xe8>)
 8001f6a:	f8a3 510c 	strh.w	r5, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001f6e:	b662      	cpsie	i
 8001f70:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8001f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f74:	20000acc 	.word	0x20000acc
 8001f78:	20003a20 	.word	0x20003a20

08001f7c <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	461d      	mov	r5, r3
 8001f80:	4614      	mov	r4, r2
 8001f82:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8001f84:	42bc      	cmp	r4, r7
 8001f86:	4626      	mov	r6, r4
 8001f88:	d00f      	beq.n	8001faa <_write_r+0x2e>
    if(*ptr == '\n') {
 8001f8a:	7833      	ldrb	r3, [r6, #0]
 8001f8c:	2b0a      	cmp	r3, #10
 8001f8e:	f104 0401 	add.w	r4, r4, #1
 8001f92:	d104      	bne.n	8001f9e <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8001f94:	2000      	movs	r0, #0
 8001f96:	4906      	ldr	r1, [pc, #24]	; (8001fb0 <_write_r+0x34>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f7ff ff77 	bl	8001e8c <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8001f9e:	4631      	mov	r1, r6
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff ff72 	bl	8001e8c <TerminalOutputBufferWrite>
 8001fa8:	e7ec      	b.n	8001f84 <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8001faa:	4628      	mov	r0, r5
 8001fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	0800b65b 	.word	0x0800b65b

08001fb4 <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001fb6:	4c1b      	ldr	r4, [pc, #108]	; (8002024 <TerminalInputBufferWrite+0x70>)
 8001fb8:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001fbc:	fb03 4300 	mla	r3, r3, r0, r4
 8001fc0:	f8b3 5084 	ldrh.w	r5, [r3, #132]	; 0x84
 8001fc4:	fa12 f585 	uxtah	r5, r2, r5
 8001fc8:	2d7f      	cmp	r5, #127	; 0x7f
 8001fca:	d906      	bls.n	8001fda <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8001fcc:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001fd0:	3201      	adds	r2, #1
 8001fd2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 8001fda:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 8001fde:	4415      	add	r5, r2
 8001fe0:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 8001fe4:	440a      	add	r2, r1
  while(len != 0) {
 8001fe6:	4291      	cmp	r1, r2
 8001fe8:	d019      	beq.n	800201e <TerminalInputBufferWrite+0x6a>
    head = TerminalState[index].inHead;
 8001fea:	f44f 7792 	mov.w	r7, #292	; 0x124
 8001fee:	4347      	muls	r7, r0
 8001ff0:	19e3      	adds	r3, r4, r7
    TerminalState[index].inBuffer[head] = *p++;
 8001ff2:	f811 cb01 	ldrb.w	ip, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8001ff6:	f8b3 6080 	ldrh.w	r6, [r3, #128]	; 0x80
 8001ffa:	b2b6      	uxth	r6, r6
    TerminalState[index].inBuffer[head] = *p++;
 8001ffc:	4437      	add	r7, r6
    TerminalState[index].inHead = TERMINALINCR(head);
 8001ffe:	3601      	adds	r6, #1
 8002000:	f006 067f 	and.w	r6, r6, #127	; 0x7f
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8002004:	f804 c007 	strb.w	ip, [r4, r7]
    TerminalState[index].inHead = TERMINALINCR(head);
 8002008:	f8a3 6080 	strh.w	r6, [r3, #128]	; 0x80
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 800200c:	f103 0580 	add.w	r5, r3, #128	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8002010:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002014:	b29b      	uxth	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	b29b      	uxth	r3, r3
 800201a:	80ab      	strh	r3, [r5, #4]
 800201c:	e7e3      	b.n	8001fe6 <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 800201e:	2000      	movs	r0, #0
}
 8002020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002022:	bf00      	nop
 8002024:	20000acc 	.word	0x20000acc

08002028 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8002028:	4801      	ldr	r0, [pc, #4]	; (8002030 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800202a:	f001 bc84 	b.w	8003936 <HAL_PCD_IRQHandler>
 800202e:	bf00      	nop
 8002030:	20003c48 	.word	0x20003c48

08002034 <DecodeReadRegister>:
#include "decoder.h"


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8002034:	b510      	push	{r4, lr}
 8002036:	460b      	mov	r3, r1
  uint32_t address, val;

  if(p == NULL) return 0;
 8002038:	4604      	mov	r4, r0
 800203a:	b1b0      	cbz	r0, 800206a <DecodeReadRegister+0x36>
  if(r == NULL) return 0;
 800203c:	b1b1      	cbz	r1, 800206c <DecodeReadRegister+0x38>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 800203e:	8888      	ldrh	r0, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8002040:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8002042:	6862      	ldr	r2, [r4, #4]

  /* read register according to size */
  switch(r->size) {
 8002044:	2910      	cmp	r1, #16
 8002046:	d005      	beq.n	8002054 <DecodeReadRegister+0x20>
 8002048:	2920      	cmp	r1, #32
 800204a:	d005      	beq.n	8002058 <DecodeReadRegister+0x24>
 800204c:	2908      	cmp	r1, #8
 800204e:	d105      	bne.n	800205c <DecodeReadRegister+0x28>
  case 8:
    val = *(uint8_t *)address;
 8002050:	5c80      	ldrb	r0, [r0, r2]
    break;
 8002052:	bd10      	pop	{r4, pc}
  case 16:
    val = *(uint16_t *)address;
 8002054:	5a80      	ldrh	r0, [r0, r2]
    break;  
 8002056:	bd10      	pop	{r4, pc}
  case 32:
    val = *(uint32_t *)address;
 8002058:	5880      	ldr	r0, [r0, r2]
    break;
 800205a:	bd10      	pop	{r4, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <DecodeReadRegister+0x3c>)
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	f004 fa5b 	bl	800651c <printf>
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 0;
 8002066:	2000      	movs	r0, #0
 8002068:	bd10      	pop	{r4, pc}
 800206a:	bd10      	pop	{r4, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 800206c:	4608      	mov	r0, r1
	   r->name,
	   p->name);
    return 0;
  }
  return val;
}
 800206e:	bd10      	pop	{r4, pc}
 8002070:	0800b992 	.word	0x0800b992

08002074 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	460b      	mov	r3, r1
  uint32_t address;

  if(p == NULL) return 1;
 8002078:	4604      	mov	r4, r0
 800207a:	b1a8      	cbz	r0, 80020a8 <DecodeWriteRegister+0x34>
  if(r == NULL) return 1;
 800207c:	b1a1      	cbz	r1, 80020a8 <DecodeWriteRegister+0x34>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 800207e:	888d      	ldrh	r5, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8002080:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8002082:	6840      	ldr	r0, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8002084:	2910      	cmp	r1, #16
 8002086:	d005      	beq.n	8002094 <DecodeWriteRegister+0x20>
 8002088:	2920      	cmp	r1, #32
 800208a:	d005      	beq.n	8002098 <DecodeWriteRegister+0x24>
 800208c:	2908      	cmp	r1, #8
 800208e:	d106      	bne.n	800209e <DecodeWriteRegister+0x2a>
  case 8:
    *(uint8_t *)address = val;
 8002090:	542a      	strb	r2, [r5, r0]
 8002092:	e002      	b.n	800209a <DecodeWriteRegister+0x26>
    break;
  case 16:
    *(uint16_t *)address = val;
 8002094:	522a      	strh	r2, [r5, r0]
 8002096:	e000      	b.n	800209a <DecodeWriteRegister+0x26>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8002098:	502a      	str	r2, [r5, r0]
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
 800209a:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 800209c:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <DecodeWriteRegister+0x38>)
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	f004 fa3a 	bl	800651c <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 80020a8:	2001      	movs	r0, #1
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
}
 80020aa:	bd38      	pop	{r3, r4, r5, pc}
 80020ac:	0800b992 	.word	0x0800b992

080020b0 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 80020b0:	b530      	push	{r4, r5, lr}
 80020b2:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 80020b4:	b198      	cbz	r0, 80020de <DecodeField+0x2e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 80020b6:	7943      	ldrb	r3, [r0, #5]
 80020b8:	7904      	ldrb	r4, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80020ba:	4d0a      	ldr	r5, [pc, #40]	; (80020e4 <DecodeField+0x34>)
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	40e1      	lsrs	r1, r4
 80020c2:	3a01      	subs	r2, #1
 80020c4:	400a      	ands	r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80020c6:	6801      	ldr	r1, [r0, #0]
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <DecodeField+0x38>)
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	bf98      	it	ls
 80020d0:	4628      	movls	r0, r5
 80020d2:	9001      	str	r0, [sp, #4]
 80020d4:	9402      	str	r4, [sp, #8]
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <DecodeField+0x3c>)
 80020d8:	4613      	mov	r3, r2
 80020da:	f004 fa1f 	bl	800651c <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 80020de:	b005      	add	sp, #20
 80020e0:	bd30      	pop	{r4, r5, pc}
 80020e2:	bf00      	nop
 80020e4:	0800b9cc 	.word	0x0800b9cc
 80020e8:	0800b9c6 	.word	0x0800b9c6
 80020ec:	0800b9d2 	.word	0x0800b9d2

080020f0 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 80020f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020f2:	4615      	mov	r5, r2
 80020f4:	461e      	mov	r6, r3
  Field_t const *f;
  
  if(r == NULL) return;
 80020f6:	4604      	mov	r4, r0
 80020f8:	b1d8      	cbz	r0, 8002132 <DecodeRegister+0x42>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 80020fa:	7983      	ldrb	r3, [r0, #6]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	8883      	ldrh	r3, [r0, #4]
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <DecodeRegister+0x48>)
	 r->name,
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8002102:	4419      	add	r1, r3
  Field_t const *f;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8002104:	9101      	str	r1, [sp, #4]
 8002106:	6821      	ldr	r1, [r4, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	f004 fa07 	bl	800651c <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 800210e:	68a4      	ldr	r4, [r4, #8]
 8002110:	b144      	cbz	r4, 8002124 <DecodeRegister+0x34>
 8002112:	b176      	cbz	r6, 8002132 <DecodeRegister+0x42>
    for(f = r->fields; f->name != NULL; f++) {
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	b133      	cbz	r3, 8002126 <DecodeRegister+0x36>
      DecodeField(f,val);
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7ff ffc8 	bl	80020b0 <DecodeField>
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    for(f = r->fields; f->name != NULL; f++) {
 8002120:	3408      	adds	r4, #8
 8002122:	e7f7      	b.n	8002114 <DecodeRegister+0x24>
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
 8002124:	b12e      	cbz	r6, 8002132 <DecodeRegister+0x42>
    printf("\n");
 8002126:	200a      	movs	r0, #10
  }

}
 8002128:	b002      	add	sp, #8
 800212a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    for(f = r->fields; f->name != NULL; f++) {
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
    printf("\n");
 800212e:	f004 ba09 	b.w	8006544 <putchar>
  }

}
 8002132:	b002      	add	sp, #8
 8002134:	bd70      	pop	{r4, r5, r6, pc}
 8002136:	bf00      	nop
 8002138:	0800b9fb 	.word	0x0800b9fb

0800213c <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;

  if(p == NULL) return;
 8002140:	4605      	mov	r5, r0
 8002142:	b1a8      	cbz	r0, 8002170 <DecodePeripheral+0x34>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <DecodePeripheral+0x38>)
 8002146:	e895 0006 	ldmia.w	r5, {r1, r2}
 800214a:	f004 f9e7 	bl	800651c <printf>
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 800214e:	68ac      	ldr	r4, [r5, #8]
 8002150:	b904      	cbnz	r4, 8002154 <DecodePeripheral+0x18>
 8002152:	bd70      	pop	{r4, r5, r6, pc}
    for(r = p->registers; r->name != NULL; r++) {
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	b15a      	cbz	r2, 8002170 <DecodePeripheral+0x34>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8002158:	4621      	mov	r1, r4
 800215a:	4628      	mov	r0, r5
 800215c:	f7ff ff6a 	bl	8002034 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8002160:	6869      	ldr	r1, [r5, #4]

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8002162:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8002164:	4633      	mov	r3, r6
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff ffc2 	bl	80020f0 <DecodeRegister>
  printf("Peripheral %-13s: Base address: 0x%08x\n",
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
 800216c:	340c      	adds	r4, #12
 800216e:	e7f1      	b.n	8002154 <DecodePeripheral+0x18>
 8002170:	bd70      	pop	{r4, r5, r6, pc}
 8002172:	bf00      	nop
 8002174:	0800ba36 	.word	0x0800ba36

08002178 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	4606      	mov	r6, r0
  uint32_t col;
  col = 8;
  printf("\t");
 800217c:	2009      	movs	r0, #9
 800217e:	f004 f9e1 	bl	8006544 <putchar>
 8002182:	f106 050c 	add.w	r5, r6, #12

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8002186:	2408      	movs	r4, #8
 8002188:	462f      	mov	r7, r5
  printf("\t");
  for(; p->name != NULL; p++) {
 800218a:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800218e:	b1a1      	cbz	r1, 80021ba <DecodePrintPeripherals+0x42>
    col += printf("%s",p->name);
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <DecodePrintPeripherals+0x44>)
 8002192:	f004 f9c3 	bl	800651c <printf>
 8002196:	1bab      	subs	r3, r5, r6
 8002198:	443b      	add	r3, r7
 800219a:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 800219c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80021a0:	b14b      	cbz	r3, 80021b6 <DecodePrintPeripherals+0x3e>
      col += printf(", ");
 80021a2:	4807      	ldr	r0, [pc, #28]	; (80021c0 <DecodePrintPeripherals+0x48>)
 80021a4:	f004 f9ba 	bl	800651c <printf>
 80021a8:	4404      	add	r4, r0
      if(col > 70) {
 80021aa:	2c46      	cmp	r4, #70	; 0x46
 80021ac:	d903      	bls.n	80021b6 <DecodePrintPeripherals+0x3e>
	col = 8;
	printf("\n\t");
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <DecodePrintPeripherals+0x4c>)
 80021b0:	f004 f9b4 	bl	800651c <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 80021b4:	2408      	movs	r4, #8
 80021b6:	350c      	adds	r5, #12
 80021b8:	e7e7      	b.n	800218a <DecodePrintPeripherals+0x12>
	printf("\n\t");
      }
    }
  }
}
 80021ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021bc:	0800b6e3 	.word	0x0800b6e3
 80021c0:	0800b9cf 	.word	0x0800b9cf
 80021c4:	0800ba5e 	.word	0x0800ba5e

080021c8 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r) {
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 80021cc:	2009      	movs	r0, #9
 80021ce:	f004 f9b9 	bl	8006544 <putchar>
 80021d2:	f106 050c 	add.w	r5, r6, #12
  }
}

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
 80021d6:	2408      	movs	r4, #8
 80021d8:	462f      	mov	r7, r5
  printf("\t");
  for(; r->name != NULL; r++) {
 80021da:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80021de:	b1b1      	cbz	r1, 800220e <DecodePrintRegisters+0x46>
    col += printf("%s",r->name);
 80021e0:	480b      	ldr	r0, [pc, #44]	; (8002210 <DecodePrintRegisters+0x48>)
 80021e2:	f004 f99b 	bl	800651c <printf>
 80021e6:	1bab      	subs	r3, r5, r6
 80021e8:	443b      	add	r3, r7
 80021ea:	4420      	add	r0, r4
    if((r+1)->name != NULL) {
 80021ec:	f853 3c0c 	ldr.w	r3, [r3, #-12]
void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
 80021f0:	b2c4      	uxtb	r4, r0
    if((r+1)->name != NULL) {
 80021f2:	b153      	cbz	r3, 800220a <DecodePrintRegisters+0x42>
      col += printf(", ");
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <DecodePrintRegisters+0x4c>)
 80021f6:	f004 f991 	bl	800651c <printf>
 80021fa:	4420      	add	r0, r4
 80021fc:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 80021fe:	2c46      	cmp	r4, #70	; 0x46
 8002200:	d903      	bls.n	800220a <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <DecodePrintRegisters+0x50>)
 8002204:	f004 f98a 	bl	800651c <printf>
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
    if((r+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8002208:	2408      	movs	r4, #8
 800220a:	350c      	adds	r5, #12
 800220c:	e7e5      	b.n	80021da <DecodePrintRegisters+0x12>
	printf("\n\t");
      }
    }
  }
}
 800220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002210:	0800b6e3 	.word	0x0800b6e3
 8002214:	0800b9cf 	.word	0x0800b9cf
 8002218:	0800ba5e 	.word	0x0800ba5e

0800221c <CmdDecode>:

void CmdDecode(int mode)
{
 800221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8002220:	2802      	cmp	r0, #2
    }
  }
}

void CmdDecode(int mode)
{
 8002222:	b086      	sub	sp, #24
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8002224:	d120      	bne.n	8002268 <CmdDecode+0x4c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8002226:	a805      	add	r0, sp, #20
 8002228:	f7ff fc9c 	bl	8001b64 <fetch_string_arg>
    if(rc) {
 800222c:	b910      	cbnz	r0, 8002234 <CmdDecode+0x18>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 800222e:	9e05      	ldr	r6, [sp, #20]
 8002230:	4c69      	ldr	r4, [pc, #420]	; (80023d8 <CmdDecode+0x1bc>)
 8002232:	e007      	b.n	8002244 <CmdDecode+0x28>
  if(mode == CMD_LONG_HELP) {
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
    if(rc) {
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002234:	4869      	ldr	r0, [pc, #420]	; (80023dc <CmdDecode+0x1c0>)
 8002236:	f004 f9c1 	bl	80065bc <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 800223a:	4869      	ldr	r0, [pc, #420]	; (80023e0 <CmdDecode+0x1c4>)
 800223c:	f7ff ff9c 	bl	8002178 <DecodePrintPeripherals>
      printf("\n\n"
 8002240:	4868      	ldr	r0, [pc, #416]	; (80023e4 <CmdDecode+0x1c8>)
 8002242:	e042      	b.n	80022ca <CmdDecode+0xae>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8002244:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8002248:	f1a4 070c 	sub.w	r7, r4, #12
 800224c:	b325      	cbz	r5, 8002298 <CmdDecode+0x7c>
 800224e:	4630      	mov	r0, r6
 8002250:	4629      	mov	r1, r5
 8002252:	f004 fa45 	bl	80066e0 <strcasecmp>
 8002256:	340c      	adds	r4, #12
 8002258:	2800      	cmp	r0, #0
 800225a:	d1f3      	bne.n	8002244 <CmdDecode+0x28>
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
	return;
      }
      printf("Valid registers for peripheral %s:\n"
 800225c:	4862      	ldr	r0, [pc, #392]	; (80023e8 <CmdDecode+0x1cc>)
 800225e:	4629      	mov	r1, r5
 8002260:	f004 f95c 	bl	800651c <printf>
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 8002264:	68b8      	ldr	r0, [r7, #8]
 8002266:	e025      	b.n	80022b4 <CmdDecode+0x98>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8002268:	a802      	add	r0, sp, #8
 800226a:	f7ff fc7b 	bl	8001b64 <fetch_string_arg>
  if(rc) {
 800226e:	b910      	cbnz	r0, 8002276 <CmdDecode+0x5a>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8002270:	9e02      	ldr	r6, [sp, #8]
 8002272:	4c59      	ldr	r4, [pc, #356]	; (80023d8 <CmdDecode+0x1bc>)
 8002274:	e009      	b.n	800228a <CmdDecode+0x6e>
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
  if(rc) {
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8002276:	485d      	ldr	r0, [pc, #372]	; (80023ec <CmdDecode+0x1d0>)
 8002278:	f004 f9a0 	bl	80065bc <puts>
 800227c:	e021      	b.n	80022c2 <CmdDecode+0xa6>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 800227e:	4630      	mov	r0, r6
 8002280:	f004 fa2e 	bl	80066e0 <strcasecmp>
 8002284:	340c      	adds	r4, #12
 8002286:	4607      	mov	r7, r0
 8002288:	b310      	cbz	r0, 80022d0 <CmdDecode+0xb4>
 800228a:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 800228e:	f1a4 050c 	sub.w	r5, r4, #12
 8002292:	2900      	cmp	r1, #0
 8002294:	d1f3      	bne.n	800227e <CmdDecode+0x62>
 8002296:	e010      	b.n	80022ba <CmdDecode+0x9e>
	p++;
      }

      if(p->name == NULL) {
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8002298:	4631      	mov	r1, r6
 800229a:	4855      	ldr	r0, [pc, #340]	; (80023f0 <CmdDecode+0x1d4>)
 800229c:	f004 f93e 	bl	800651c <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
 80022a0:	484f      	ldr	r0, [pc, #316]	; (80023e0 <CmdDecode+0x1c4>)
 80022a2:	f7ff ff69 	bl	8002178 <DecodePrintPeripherals>
	return;
 80022a6:	e093      	b.n	80023d0 <CmdDecode+0x1b4>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80022a8:	4852      	ldr	r0, [pc, #328]	; (80023f4 <CmdDecode+0x1d8>)
 80022aa:	682a      	ldr	r2, [r5, #0]
 80022ac:	4631      	mov	r1, r6
 80022ae:	f004 f935 	bl	800651c <printf>
	   rname, p->name);
    DecodePrintRegisters(p->registers);
 80022b2:	68a8      	ldr	r0, [r5, #8]
	return;
      }
      printf("Valid registers for peripheral %s:\n"
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 80022b4:	f7ff ff88 	bl	80021c8 <DecodePrintRegisters>
 80022b8:	e006      	b.n	80022c8 <CmdDecode+0xac>
    p++;
  }

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 80022ba:	484f      	ldr	r0, [pc, #316]	; (80023f8 <CmdDecode+0x1dc>)
 80022bc:	4631      	mov	r1, r6
 80022be:	f004 f92d 	bl	800651c <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 80022c2:	4847      	ldr	r0, [pc, #284]	; (80023e0 <CmdDecode+0x1c4>)
 80022c4:	f7ff ff58 	bl	8002178 <DecodePrintPeripherals>
    printf("\n\n");
 80022c8:	484c      	ldr	r0, [pc, #304]	; (80023fc <CmdDecode+0x1e0>)
 80022ca:	f004 f977 	bl	80065bc <puts>
    return;
 80022ce:	e07f      	b.n	80023d0 <CmdDecode+0x1b4>
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 80022d0:	a803      	add	r0, sp, #12
 80022d2:	f7ff fc47 	bl	8001b64 <fetch_string_arg>
  if(rc) {
 80022d6:	b110      	cbz	r0, 80022de <CmdDecode+0xc2>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 80022d8:	4628      	mov	r0, r5
 80022da:	4639      	mov	r1, r7
 80022dc:	e010      	b.n	8002300 <CmdDecode+0xe4>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 80022de:	68ac      	ldr	r4, [r5, #8]
  while((r->name != NULL) && strcasecmp(rname,r->name)) {
 80022e0:	9e03      	ldr	r6, [sp, #12]
 80022e2:	6821      	ldr	r1, [r4, #0]
 80022e4:	4630      	mov	r0, r6
 80022e6:	b121      	cbz	r1, 80022f2 <CmdDecode+0xd6>
 80022e8:	f004 f9fa 	bl	80066e0 <strcasecmp>
 80022ec:	b158      	cbz	r0, 8002306 <CmdDecode+0xea>
    r++;
 80022ee:	340c      	adds	r4, #12
 80022f0:	e7f7      	b.n	80022e2 <CmdDecode+0xc6>
  }

  if(r->name == NULL) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 80022f2:	4943      	ldr	r1, [pc, #268]	; (8002400 <CmdDecode+0x1e4>)
 80022f4:	f004 f9f4 	bl	80066e0 <strcasecmp>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d1d5      	bne.n	80022a8 <CmdDecode+0x8c>
      DecodePeripheral(p,1);
 80022fc:	4628      	mov	r0, r5
 80022fe:	2101      	movs	r1, #1
 8002300:	f7ff ff1c 	bl	800213c <DecodePeripheral>
      return;
 8002304:	e064      	b.n	80023d0 <CmdDecode+0x1b4>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8002306:	a804      	add	r0, sp, #16
 8002308:	f7ff fc2c 	bl	8001b64 <fetch_string_arg>
  if(rc == 0) {
 800230c:	b960      	cbnz	r0, 8002328 <CmdDecode+0x10c>
    /* There was something... see if it matches a field name */
    f = r->fields;
 800230e:	68a6      	ldr	r6, [r4, #8]
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
 8002310:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002314:	6837      	ldr	r7, [r6, #0]
 8002316:	b19f      	cbz	r7, 8002340 <CmdDecode+0x124>
 8002318:	4640      	mov	r0, r8
 800231a:	4639      	mov	r1, r7
 800231c:	f004 f9e0 	bl	80066e0 <strcasecmp>
 8002320:	2800      	cmp	r0, #0
 8002322:	d02b      	beq.n	800237c <CmdDecode+0x160>
      f++;
 8002324:	3608      	adds	r6, #8
 8002326:	e7f5      	b.n	8002314 <CmdDecode+0xf8>
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8002328:	4621      	mov	r1, r4
 800232a:	4628      	mov	r0, r5
 800232c:	f7ff fe82 	bl	8002034 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8002330:	6869      	ldr	r1, [r5, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8002332:	9005      	str	r0, [sp, #20]
 8002334:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 8002336:	2301      	movs	r3, #1
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff fed9 	bl	80020f0 <DecodeRegister>
 800233e:	e047      	b.n	80023d0 <CmdDecode+0x1b4>
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8002340:	f004 f854 	bl	80063ec <__errno>
    val = strtoul(fname,NULL,0);
 8002344:	4639      	mov	r1, r7
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8002346:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002348:	463a      	mov	r2, r7
 800234a:	9804      	ldr	r0, [sp, #16]
 800234c:	f004 fbf2 	bl	8006b34 <strtoul>
 8002350:	9005      	str	r0, [sp, #20]
    if(errno != 0) {
 8002352:	f004 f84b 	bl	80063ec <__errno>
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	b123      	cbz	r3, 8002364 <CmdDecode+0x148>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 800235a:	482a      	ldr	r0, [pc, #168]	; (8002404 <CmdDecode+0x1e8>)
 800235c:	9904      	ldr	r1, [sp, #16]
 800235e:	f004 f8dd 	bl	800651c <printf>
	     fname);
      return;
 8002362:	e035      	b.n	80023d0 <CmdDecode+0x1b4>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8002364:	4621      	mov	r1, r4
 8002366:	9a05      	ldr	r2, [sp, #20]
 8002368:	4628      	mov	r0, r5
 800236a:	f7ff fe83 	bl	8002074 <DecodeWriteRegister>
    printf("%s.%s = 0x%08x\n",
 800236e:	6829      	ldr	r1, [r5, #0]
 8002370:	6822      	ldr	r2, [r4, #0]
 8002372:	9b05      	ldr	r3, [sp, #20]
 8002374:	4824      	ldr	r0, [pc, #144]	; (8002408 <CmdDecode+0x1ec>)
 8002376:	f004 f8d1 	bl	800651c <printf>
	   p->name, r->name,
	   (unsigned)val);
    return;
 800237a:	e029      	b.n	80023d0 <CmdDecode+0x1b4>
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
      f++;
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 800237c:	a805      	add	r0, sp, #20
 800237e:	f7ff fbdd 	bl	8001b3c <fetch_uint32_arg>
      if(rc) {
 8002382:	b110      	cbz	r0, 800238a <CmdDecode+0x16e>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8002384:	4821      	ldr	r0, [pc, #132]	; (800240c <CmdDecode+0x1f0>)
 8002386:	6821      	ldr	r1, [r4, #0]
 8002388:	e7e9      	b.n	800235e <CmdDecode+0x142>
	       r->name);
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 800238a:	4621      	mov	r1, r4
 800238c:	4628      	mov	r0, r5
 800238e:	f7ff fe51 	bl	8002034 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8002392:	7973      	ldrb	r3, [r6, #5]
 8002394:	2101      	movs	r1, #1
 8002396:	4099      	lsls	r1, r3

      oval = (t >> f->offset) & m; /* Save old value */
 8002398:	7933      	ldrb	r3, [r6, #4]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 800239a:	3901      	subs	r1, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 800239c:	fa01 f203 	lsl.w	r2, r1, r3
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 80023a0:	fa20 f803 	lsr.w	r8, r0, r3

      t &= ~(m << f->offset);
 80023a4:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 80023a8:	9805      	ldr	r0, [sp, #20]
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 80023aa:	ea08 0701 	and.w	r7, r8, r1

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 80023ae:	4001      	ands	r1, r0
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
      DecodeWriteRegister(p,r,t);
 80023b4:	431a      	orrs	r2, r3
 80023b6:	4621      	mov	r1, r4
 80023b8:	4628      	mov	r0, r5
 80023ba:	f7ff fe5b 	bl	8002074 <DecodeWriteRegister>
      printf("%s.%s.%s (%d) -> (%d)\n",
 80023be:	9b05      	ldr	r3, [sp, #20]
 80023c0:	9700      	str	r7, [sp, #0]
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	4812      	ldr	r0, [pc, #72]	; (8002410 <CmdDecode+0x1f4>)
 80023c6:	6829      	ldr	r1, [r5, #0]
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6833      	ldr	r3, [r6, #0]
 80023cc:	f004 f8a6 	bl	800651c <printf>
  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

}
 80023d0:	b006      	add	sp, #24
 80023d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d6:	bf00      	nop
 80023d8:	08015dc8 	.word	0x08015dc8
 80023dc:	0800ba61 	.word	0x0800ba61
 80023e0:	08015dbc 	.word	0x08015dbc
 80023e4:	0800bc50 	.word	0x0800bc50
 80023e8:	0800bdbc 	.word	0x0800bdbc
 80023ec:	0800bca5 	.word	0x0800bca5
 80023f0:	0800bd81 	.word	0x0800bd81
 80023f4:	0800bcd4 	.word	0x0800bcd4
 80023f8:	0800bde1 	.word	0x0800bde1
 80023fc:	0800be1b 	.word	0x0800be1b
 8002400:	0800be1d 	.word	0x0800be1d
 8002404:	0800bd53 	.word	0x0800bd53
 8002408:	0800bd71 	.word	0x0800bd71
 800240c:	0800bd11 	.word	0x0800bd11
 8002410:	0800bd3c 	.word	0x0800bd3c

08002414 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <SystemInit+0x58>)
 8002416:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800241a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800241e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <SystemInit+0x5c>)
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	f041 0101 	orr.w	r1, r1, #1
 800242a:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800242c:	6858      	ldr	r0, [r3, #4]
 800242e:	4911      	ldr	r1, [pc, #68]	; (8002474 <SystemInit+0x60>)
 8002430:	4001      	ands	r1, r0
 8002432:	6059      	str	r1, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002434:	6819      	ldr	r1, [r3, #0]
 8002436:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800243a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800243e:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002446:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 800244e:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	f021 010f 	bic.w	r1, r1, #15
 8002456:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800245a:	4907      	ldr	r1, [pc, #28]	; (8002478 <SystemInit+0x64>)
 800245c:	4001      	ands	r1, r0
 800245e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002460:	2100      	movs	r1, #0
 8002462:	6099      	str	r1, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002468:	6093      	str	r3, [r2, #8]
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00
 8002470:	40021000 	.word	0x40021000
 8002474:	f87fc00c 	.word	0xf87fc00c
 8002478:	ff00fccc 	.word	0xff00fccc

0800247c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	6803      	ldr	r3, [r0, #0]
 8002480:	07da      	lsls	r2, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002482:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002484:	d404      	bmi.n	8002490 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	079b      	lsls	r3, r3, #30
 800248a:	f100 80d5 	bmi.w	8002638 <HAL_RCC_OscConfig+0x1bc>
 800248e:	e16e      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002490:	4bbb      	ldr	r3, [pc, #748]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	f002 020c 	and.w	r2, r2, #12
 8002498:	2a04      	cmp	r2, #4
 800249a:	d007      	beq.n	80024ac <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	f002 020c 	and.w	r2, r2, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024a2:	2a08      	cmp	r2, #8
 80024a4:	d12a      	bne.n	80024fc <HAL_RCC_OscConfig+0x80>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	03dd      	lsls	r5, r3, #15
 80024aa:	d527      	bpl.n	80024fc <HAL_RCC_OscConfig+0x80>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80024b8:	f043 0320 	orr.w	r3, r3, #32
 80024bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	4baf      	ldr	r3, [pc, #700]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x4e>
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	e006      	b.n	80024d8 <HAL_RCC_OscConfig+0x5c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ce:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	fab2 f282 	clz	r2, r2
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024dc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	fab2 f282 	clz	r2, r2
 80024e4:	2101      	movs	r1, #1
 80024e6:	f002 021f 	and.w	r2, r2, #31
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	421a      	tst	r2, r3
 80024f0:	d0c9      	beq.n	8002486 <HAL_RCC_OscConfig+0xa>
 80024f2:	6863      	ldr	r3, [r4, #4]
 80024f4:	428b      	cmp	r3, r1
 80024f6:	d0c6      	beq.n	8002486 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 80024f8:	2001      	movs	r0, #1
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80024fc:	4ba1      	ldr	r3, [pc, #644]	; (8002784 <HAL_RCC_OscConfig+0x308>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002502:	f000 fcdb 	bl	8002ebc <HAL_GetTick>
 8002506:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002510:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002514:	f043 0320 	orr.w	r3, r3, #32
 8002518:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800251c:	2b01      	cmp	r3, #1
 800251e:	4b98      	ldr	r3, [pc, #608]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0xaa>
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	e006      	b.n	8002534 <HAL_RCC_OscConfig+0xb8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002538:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	2101      	movs	r1, #1
 8002542:	f002 021f 	and.w	r2, r2, #31
 8002546:	fa01 f202 	lsl.w	r2, r1, r2
 800254a:	421a      	tst	r2, r3
 800254c:	d008      	beq.n	8002560 <HAL_RCC_OscConfig+0xe4>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800254e:	f000 fcb5 	bl	8002ebc <HAL_GetTick>
 8002552:	f241 3388 	movw	r3, #5000	; 0x1388
 8002556:	1b40      	subs	r0, r0, r5
 8002558:	4298      	cmp	r0, r3
 800255a:	d9d5      	bls.n	8002508 <HAL_RCC_OscConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800255c:	2003      	movs	r0, #3
 800255e:	bd38      	pop	{r3, r4, r5, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002560:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x308>)
 8002562:	7922      	ldrb	r2, [r4, #4]
 8002564:	701a      	strb	r2, [r3, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002566:	f8d3 102a 	ldr.w	r1, [r3, #42]	; 0x2a
 800256a:	68a2      	ldr	r2, [r4, #8]
 800256c:	f021 010f 	bic.w	r1, r1, #15
 8002570:	430a      	orrs	r2, r1
 8002572:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d12e      	bne.n	80025da <HAL_RCC_OscConfig+0x15e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800257c:	f000 fc9e 	bl	8002ebc <HAL_GetTick>
 8002580:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002586:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800258a:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	f043 0320 	orr.w	r3, r3, #32
 8002592:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_OscConfig+0x124>
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e006      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a4:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b2:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	2101      	movs	r1, #1
 80025bc:	f002 021f 	and.w	r2, r2, #31
 80025c0:	fa01 f202 	lsl.w	r2, r1, r2
 80025c4:	421a      	tst	r2, r3
 80025c6:	f47f af5e 	bne.w	8002486 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80025ca:	f000 fc77 	bl	8002ebc <HAL_GetTick>
 80025ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80025d2:	1b40      	subs	r0, r0, r5
 80025d4:	4298      	cmp	r0, r3
 80025d6:	d9d4      	bls.n	8002582 <HAL_RCC_OscConfig+0x106>
 80025d8:	e7c0      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80025da:	f000 fc6f 	bl	8002ebc <HAL_GetTick>
 80025de:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ec:	f043 0320 	orr.w	r3, r3, #32
 80025f0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	4b62      	ldr	r3, [pc, #392]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x182>
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	e006      	b.n	800260c <HAL_RCC_OscConfig+0x190>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002602:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002610:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	2101      	movs	r1, #1
 800261a:	f002 021f 	and.w	r2, r2, #31
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	421a      	tst	r2, r3
 8002624:	f43f af2f 	beq.w	8002486 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f000 fc48 	bl	8002ebc <HAL_GetTick>
 800262c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002630:	1b40      	subs	r0, r0, r5
 8002632:	4298      	cmp	r0, r3
 8002634:	d9d4      	bls.n	80025e0 <HAL_RCC_OscConfig+0x164>
 8002636:	e791      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002638:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	f012 0f0c 	tst.w	r2, #12
 8002640:	d007      	beq.n	8002652 <HAL_RCC_OscConfig+0x1d6>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	f002 020c 	and.w	r2, r2, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002648:	2a08      	cmp	r2, #8
 800264a:	d127      	bne.n	800269c <HAL_RCC_OscConfig+0x220>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	03d8      	lsls	r0, r3, #15
 8002650:	d424      	bmi.n	800269c <HAL_RCC_OscConfig+0x220>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	2302      	movs	r3, #2
 8002654:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002658:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265c:	f043 0320 	orr.w	r3, r3, #32
 8002660:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002664:	2b01      	cmp	r3, #1
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x1f2>
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	e005      	b.n	800267a <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	2202      	movs	r2, #2
 8002670:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002674:	fab2 f282 	clz	r2, r2
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	2202      	movs	r2, #2
 800267c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	2101      	movs	r1, #1
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	421a      	tst	r2, r3
 8002690:	d033      	beq.n	80026fa <HAL_RCC_OscConfig+0x27e>
 8002692:	6923      	ldr	r3, [r4, #16]
 8002694:	428b      	cmp	r3, r1
 8002696:	f47f af2f 	bne.w	80024f8 <HAL_RCC_OscConfig+0x7c>
 800269a:	e02e      	b.n	80026fa <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269c:	6922      	ldr	r2, [r4, #16]
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x30c>)
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	d03a      	beq.n	800271a <HAL_RCC_OscConfig+0x29e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a8:	f000 fc08 	bl	8002ebc <HAL_GetTick>
 80026ac:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	2302      	movs	r3, #2
 80026b0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	f043 0320 	orr.w	r3, r3, #32
 80026bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x24e>
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	e005      	b.n	80026d6 <HAL_RCC_OscConfig+0x25a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	2202      	movs	r2, #2
 80026cc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	2202      	movs	r2, #2
 80026d8:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	2101      	movs	r1, #1
 80026e2:	f002 021f 	and.w	r2, r2, #31
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	421a      	tst	r2, r3
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f000 fbe5 	bl	8002ebc <HAL_GetTick>
 80026f2:	1b40      	subs	r0, r0, r5
 80026f4:	2864      	cmp	r0, #100	; 0x64
 80026f6:	d9da      	bls.n	80026ae <HAL_RCC_OscConfig+0x232>
 80026f8:	e730      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	21f8      	movs	r1, #248	; 0xf8
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002704:	fab1 f181 	clz	r1, r1
 8002708:	6963      	ldr	r3, [r4, #20]
 800270a:	b2c9      	uxtb	r1, r1
 800270c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002710:	408b      	lsls	r3, r1
 8002712:	4313      	orrs	r3, r2
 8002714:	4a1a      	ldr	r2, [pc, #104]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e029      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800271c:	f000 fbce 	bl	8002ebc <HAL_GetTick>
 8002720:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	2302      	movs	r3, #2
 8002724:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002728:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272c:	f043 0320 	orr.w	r3, r3, #32
 8002730:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002734:	2b01      	cmp	r3, #1
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_OscConfig+0x304>)
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x2c2>
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	e005      	b.n	800274a <HAL_RCC_OscConfig+0x2ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	2202      	movs	r2, #2
 8002740:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002744:	fab2 f282 	clz	r2, r2
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	2202      	movs	r2, #2
 800274c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	2101      	movs	r1, #1
 8002756:	f002 021f 	and.w	r2, r2, #31
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	421a      	tst	r2, r3
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x2f2>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f000 fbab 	bl	8002ebc <HAL_GetTick>
 8002766:	1b40      	subs	r0, r0, r5
 8002768:	2864      	cmp	r0, #100	; 0x64
 800276a:	d9da      	bls.n	8002722 <HAL_RCC_OscConfig+0x2a6>
 800276c:	e6f6      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	0719      	lsls	r1, r3, #28
 8002772:	d40b      	bmi.n	800278c <HAL_RCC_OscConfig+0x310>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	075a      	lsls	r2, r3, #29
 8002778:	f140 80b6 	bpl.w	80028e8 <HAL_RCC_OscConfig+0x46c>
 800277c:	e04e      	b.n	800281c <HAL_RCC_OscConfig+0x3a0>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40021002 	.word	0x40021002
 8002788:	42420000 	.word	0x42420000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278c:	69a2      	ldr	r2, [r4, #24]
 800278e:	4bbb      	ldr	r3, [pc, #748]	; (8002a7c <HAL_RCC_OscConfig+0x600>)
 8002790:	b312      	cbz	r2, 80027d8 <HAL_RCC_OscConfig+0x35c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002796:	f000 fb91 	bl	8002ebc <HAL_GetTick>
 800279a:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	2302      	movs	r3, #2
 800279e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	2302      	movs	r3, #2
 80027a8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b0:	4bb3      	ldr	r3, [pc, #716]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	2202      	movs	r2, #2
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	2101      	movs	r1, #1
 80027c0:	f002 021f 	and.w	r2, r2, #31
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	421a      	tst	r2, r3
 80027ca:	d1d3      	bne.n	8002774 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f000 fb76 	bl	8002ebc <HAL_GetTick>
 80027d0:	1b40      	subs	r0, r0, r5
 80027d2:	2864      	cmp	r0, #100	; 0x64
 80027d4:	d9e2      	bls.n	800279c <HAL_RCC_OscConfig+0x320>
 80027d6:	e6c1      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d8:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80027da:	f000 fb6f 	bl	8002ebc <HAL_GetTick>
 80027de:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	2302      	movs	r3, #2
 80027e2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	2302      	movs	r3, #2
 80027ec:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f4:	4ba2      	ldr	r3, [pc, #648]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	2202      	movs	r2, #2
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	2101      	movs	r1, #1
 8002804:	f002 021f 	and.w	r2, r2, #31
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	421a      	tst	r2, r3
 800280e:	d0b1      	beq.n	8002774 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002810:	f000 fb54 	bl	8002ebc <HAL_GetTick>
 8002814:	1b40      	subs	r0, r0, r5
 8002816:	2864      	cmp	r0, #100	; 0x64
 8002818:	d9e2      	bls.n	80027e0 <HAL_RCC_OscConfig+0x364>
 800281a:	e69f      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 800281c:	4b98      	ldr	r3, [pc, #608]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002824:	61da      	str	r2, [r3, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002830:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002832:	f000 fb43 	bl	8002ebc <HAL_GetTick>
 8002836:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x608>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	05db      	lsls	r3, r3, #23
 800283e:	d557      	bpl.n	80028f0 <HAL_RCC_OscConfig+0x474>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002840:	4b8f      	ldr	r3, [pc, #572]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 8002842:	6a1a      	ldr	r2, [r3, #32]
 8002844:	f022 0205 	bic.w	r2, r2, #5
 8002848:	621a      	str	r2, [r3, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 800284a:	f000 fb37 	bl	8002ebc <HAL_GetTick>
 800284e:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	2302      	movs	r3, #2
 8002852:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002856:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	2302      	movs	r3, #2
 800285c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002860:	fab3 f383 	clz	r3, r3
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002868:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800286c:	2b02      	cmp	r3, #2
 800286e:	4b84      	ldr	r3, [pc, #528]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f04f 0202 	mov.w	r2, #2
 8002874:	bf0c      	ite	eq
 8002876:	6a1b      	ldreq	r3, [r3, #32]
 8002878:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 800287a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	2101      	movs	r1, #1
 8002884:	f002 021f 	and.w	r2, r2, #31
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	421a      	tst	r2, r3
 800288e:	d135      	bne.n	80028fc <HAL_RCC_OscConfig+0x480>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	4a7b      	ldr	r2, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 8002892:	68e3      	ldr	r3, [r4, #12]
 8002894:	6a11      	ldr	r1, [r2, #32]
 8002896:	f021 0105 	bic.w	r1, r1, #5
 800289a:	4319      	orrs	r1, r3
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800289c:	2b01      	cmp	r3, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289e:	6211      	str	r1, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80028a0:	d13c      	bne.n	800291c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80028a2:	f000 fb0b 	bl	8002ebc <HAL_GetTick>
 80028a6:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	2302      	movs	r3, #2
 80028aa:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	2302      	movs	r3, #2
 80028b4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f04f 0202 	mov.w	r2, #2
 80028cc:	bf0c      	ite	eq
 80028ce:	6a1b      	ldreq	r3, [r3, #32]
 80028d0:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 80028d2:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	fab2 f282 	clz	r2, r2
 80028da:	2101      	movs	r1, #1
 80028dc:	f002 021f 	and.w	r2, r2, #31
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	421a      	tst	r2, r3
 80028e6:	d011      	beq.n	800290c <HAL_RCC_OscConfig+0x490>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e8:	69e3      	ldr	r3, [r4, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d141      	bne.n	8002972 <HAL_RCC_OscConfig+0x4f6>
 80028ee:	e094      	b.n	8002a1a <HAL_RCC_OscConfig+0x59e>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 80028f0:	f000 fae4 	bl	8002ebc <HAL_GetTick>
 80028f4:	1b40      	subs	r0, r0, r5
 80028f6:	2864      	cmp	r0, #100	; 0x64
 80028f8:	d99e      	bls.n	8002838 <HAL_RCC_OscConfig+0x3bc>
 80028fa:	e62f      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80028fc:	f000 fade 	bl	8002ebc <HAL_GetTick>
 8002900:	f241 3388 	movw	r3, #5000	; 0x1388
 8002904:	1b40      	subs	r0, r0, r5
 8002906:	4298      	cmp	r0, r3
 8002908:	d9a2      	bls.n	8002850 <HAL_RCC_OscConfig+0x3d4>
 800290a:	e627      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800290c:	f000 fad6 	bl	8002ebc <HAL_GetTick>
 8002910:	f241 3388 	movw	r3, #5000	; 0x1388
 8002914:	1b40      	subs	r0, r0, r5
 8002916:	4298      	cmp	r0, r3
 8002918:	d9c6      	bls.n	80028a8 <HAL_RCC_OscConfig+0x42c>
 800291a:	e61f      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800291c:	f000 face 	bl	8002ebc <HAL_GetTick>
 8002920:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	2302      	movs	r3, #2
 8002924:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002928:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	2302      	movs	r3, #2
 800292e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002932:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800293e:	2b02      	cmp	r3, #2
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f04f 0202 	mov.w	r2, #2
 8002946:	bf0c      	ite	eq
 8002948:	6a1b      	ldreq	r3, [r3, #32]
 800294a:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 800294c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	2101      	movs	r1, #1
 8002956:	f002 021f 	and.w	r2, r2, #31
 800295a:	fa01 f202 	lsl.w	r2, r1, r2
 800295e:	421a      	tst	r2, r3
 8002960:	d0c2      	beq.n	80028e8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8002962:	f000 faab 	bl	8002ebc <HAL_GetTick>
 8002966:	f241 3388 	movw	r3, #5000	; 0x1388
 800296a:	1b40      	subs	r0, r0, r5
 800296c:	4298      	cmp	r0, r3
 800296e:	d9d8      	bls.n	8002922 <HAL_RCC_OscConfig+0x4a6>
 8002970:	e5f4      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002972:	4a43      	ldr	r2, [pc, #268]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 8002974:	6852      	ldr	r2, [r2, #4]
 8002976:	f002 020c 	and.w	r2, r2, #12
 800297a:	2a08      	cmp	r2, #8
 800297c:	f43f adbc 	beq.w	80024f8 <HAL_RCC_OscConfig+0x7c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002980:	2b02      	cmp	r3, #2
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_OscConfig+0x60c>)
 8002984:	f04f 0200 	mov.w	r2, #0
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	601a      	str	r2, [r3, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	d164      	bne.n	8002a56 <HAL_RCC_OscConfig+0x5da>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 800298c:	f000 fa96 	bl	8002ebc <HAL_GetTick>
 8002990:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002996:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800299a:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	f043 0320 	orr.w	r3, r3, #32
 80029a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 80029aa:	d138      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5a2>
 80029ac:	681a      	ldr	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029b2:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	fab1 f181 	clz	r1, r1
 80029ba:	2301      	movs	r3, #1
 80029bc:	f001 011f 	and.w	r1, r1, #31
 80029c0:	fa03 f101 	lsl.w	r1, r3, r1
 80029c4:	4211      	tst	r1, r2
 80029c6:	d132      	bne.n	8002a2e <HAL_RCC_OscConfig+0x5b2>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c8:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 80029ca:	6a25      	ldr	r5, [r4, #32]
 80029cc:	6850      	ldr	r0, [r2, #4]
 80029ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029d0:	f420 1074 	bic.w	r0, r0, #3997696	; 0x3d0000
 80029d4:	4329      	orrs	r1, r5
 80029d6:	4301      	orrs	r1, r0
 80029d8:	6051      	str	r1, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029da:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x60c>)
 80029dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029de:	f000 fa6d 	bl	8002ebc <HAL_GetTick>
 80029e2:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	f043 0320 	orr.w	r3, r3, #32
 80029f4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 80029fc:	d11d      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5be>
 80029fe:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a04:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	421a      	tst	r2, r3
 8002a18:	d017      	beq.n	8002a4a <HAL_RCC_OscConfig+0x5ce>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	bd38      	pop	{r3, r4, r5, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a22:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2c:	e7bf      	b.n	80029ae <HAL_RCC_OscConfig+0x532>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f000 fa45 	bl	8002ebc <HAL_GetTick>
 8002a32:	1b40      	subs	r0, r0, r5
 8002a34:	2864      	cmp	r0, #100	; 0x64
 8002a36:	d9ac      	bls.n	8002992 <HAL_RCC_OscConfig+0x516>
 8002a38:	e590      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	e7da      	b.n	8002a00 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f000 fa37 	bl	8002ebc <HAL_GetTick>
 8002a4e:	1b00      	subs	r0, r0, r4
 8002a50:	2864      	cmp	r0, #100	; 0x64
 8002a52:	d9c7      	bls.n	80029e4 <HAL_RCC_OscConfig+0x568>
 8002a54:	e582      	b.n	800255c <HAL_RCC_OscConfig+0xe0>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a56:	f000 fa31 	bl	8002ebc <HAL_GetTick>
 8002a5a:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a60:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a68:	f043 0320 	orr.w	r3, r3, #32
 8002a6c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_OscConfig+0x604>)
 8002a74:	d10a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x610>
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	e00f      	b.n	8002a9a <HAL_RCC_OscConfig+0x61e>
 8002a7a:	bf00      	nop
 8002a7c:	42420480 	.word	0x42420480
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40007000 	.word	0x40007000
 8002a88:	42420060 	.word	0x42420060
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a90:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a9e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	f002 021f 	and.w	r2, r2, #31
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	421a      	tst	r2, r3
 8002ab2:	d0b2      	beq.n	8002a1a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f000 fa02 	bl	8002ebc <HAL_GetTick>
 8002ab8:	1b00      	subs	r0, r0, r4
 8002aba:	2864      	cmp	r0, #100	; 0x64
 8002abc:	d9ce      	bls.n	8002a5c <HAL_RCC_OscConfig+0x5e0>
 8002abe:	e54d      	b.n	800255c <HAL_RCC_OscConfig+0xe0>

08002ac0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ac0:	4bb3      	ldr	r3, [pc, #716]	; (8002d90 <HAL_RCC_ClockConfig+0x2d0>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f002 0207 	and.w	r2, r2, #7
 8002ac8:	4291      	cmp	r1, r2
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	4604      	mov	r4, r0
 8002ace:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ad0:	f240 80b4 	bls.w	8002c3c <HAL_RCC_ClockConfig+0x17c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f022 0207 	bic.w	r2, r2, #7
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	6803      	ldr	r3, [r0, #0]
 8002aee:	0798      	lsls	r0, r3, #30
 8002af0:	d506      	bpl.n	8002b00 <HAL_RCC_ClockConfig+0x40>
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af2:	4aa8      	ldr	r2, [pc, #672]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002af4:	68a1      	ldr	r1, [r4, #8]
 8002af6:	6850      	ldr	r0, [r2, #4]
 8002af8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002afc:	4301      	orrs	r1, r0
 8002afe:	6051      	str	r1, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b00:	07d9      	lsls	r1, r3, #31
 8002b02:	d40b      	bmi.n	8002b1c <HAL_RCC_ClockConfig+0x5c>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	075a      	lsls	r2, r3, #29
 8002b08:	f140 8146 	bpl.w	8002d98 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4aa1      	ldr	r2, [pc, #644]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002b0e:	68e1      	ldr	r1, [r4, #12]
 8002b10:	6850      	ldr	r0, [r2, #4]
 8002b12:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002b16:	4301      	orrs	r1, r0
 8002b18:	6051      	str	r1, [r2, #4]
 8002b1a:	e13d      	b.n	8002d98 <HAL_RCC_ClockConfig+0x2d8>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	6863      	ldr	r3, [r4, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x94>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b26:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	fab2 f282 	clz	r2, r2
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	f042 0220 	orr.w	r2, r2, #32
 8002b32:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002b36:	2a01      	cmp	r2, #1
 8002b38:	4a96      	ldr	r2, [pc, #600]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x80>
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	e006      	b.n	8002b4e <HAL_RCC_ClockConfig+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b44:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	fab1 f181 	clz	r1, r1
 8002b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b52:	e02f      	b.n	8002bb4 <HAL_RCC_ClockConfig+0xf4>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d118      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xca>
 8002b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	fab2 f282 	clz	r2, r2
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b64:	f042 0220 	orr.w	r2, r2, #32
 8002b68:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002b6c:	2a01      	cmp	r2, #1
 8002b6e:	4a89      	ldr	r2, [pc, #548]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xb6>
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	e006      	b.n	8002b84 <HAL_RCC_ClockConfig+0xc4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b7a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	fab1 f181 	clz	r1, r1
 8002b82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b88:	e014      	b.n	8002bb4 <HAL_RCC_ClockConfig+0xf4>
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	fab2 f282 	clz	r2, r2
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	f042 0220 	orr.w	r2, r2, #32
 8002b98:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002b9c:	2a01      	cmp	r2, #1
 8002b9e:	4a7d      	ldr	r2, [pc, #500]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xe6>
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	e005      	b.n	8002bb2 <HAL_RCC_ClockConfig+0xf2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	fab1 f181 	clz	r1, r1
 8002bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	fab1 f181 	clz	r1, r1
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f001 011f 	and.w	r1, r1, #31
 8002bc2:	fa00 f101 	lsl.w	r1, r0, r1
 8002bc6:	4211      	tst	r1, r2
 8002bc8:	d08e      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4a72      	ldr	r2, [pc, #456]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002bcc:	6851      	ldr	r1, [r2, #4]
 8002bce:	f021 0103 	bic.w	r1, r1, #3
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	6053      	str	r3, [r2, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002bd6:	f000 f971 	bl	8002ebc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	6863      	ldr	r3, [r4, #4]
 8002bdc:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002bde:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be0:	d10e      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x140>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be2:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d08a      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x44>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bee:	f000 f965 	bl	8002ebc <HAL_GetTick>
 8002bf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bf6:	1b40      	subs	r0, r0, r5
 8002bf8:	4298      	cmp	r0, r3
 8002bfa:	d9f2      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d00c      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c04:	4b63      	ldr	r3, [pc, #396]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f013 0f0c 	tst.w	r3, #12
 8002c0c:	d10e      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x16c>
 8002c0e:	e779      	b.n	8002b04 <HAL_RCC_ClockConfig+0x44>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f000 f954 	bl	8002ebc <HAL_GetTick>
 8002c14:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c18:	1b40      	subs	r0, r0, r5
 8002c1a:	4298      	cmp	r0, r3
 8002c1c:	d8ee      	bhi.n	8002bfc <HAL_RCC_ClockConfig+0x13c>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d1f2      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x150>
 8002c2a:	e76b      	b.n	8002b04 <HAL_RCC_ClockConfig+0x44>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2c:	f000 f946 	bl	8002ebc <HAL_GetTick>
 8002c30:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c34:	1b40      	subs	r0, r0, r5
 8002c36:	4298      	cmp	r0, r3
 8002c38:	d9e4      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x144>
 8002c3a:	e7df      	b.n	8002bfc <HAL_RCC_ClockConfig+0x13c>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	6803      	ldr	r3, [r0, #0]
 8002c3e:	079e      	lsls	r6, r3, #30
 8002c40:	d506      	bpl.n	8002c50 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c42:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002c44:	68a1      	ldr	r1, [r4, #8]
 8002c46:	6850      	ldr	r0, [r2, #4]
 8002c48:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002c4c:	4301      	orrs	r1, r0
 8002c4e:	6051      	str	r1, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c50:	07d8      	lsls	r0, r3, #31
 8002c52:	d40c      	bmi.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c54:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_RCC_ClockConfig+0x2d0>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f022 0207 	bic.w	r2, r2, #7
 8002c5c:	432a      	orrs	r2, r5
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	42ab      	cmp	r3, r5
 8002c68:	f47f af3e 	bne.w	8002ae8 <HAL_RCC_ClockConfig+0x28>
 8002c6c:	e74a      	b.n	8002b04 <HAL_RCC_ClockConfig+0x44>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	6863      	ldr	r3, [r4, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d118      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x1e6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c78:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	fab2 f282 	clz	r2, r2
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002c88:	2a01      	cmp	r2, #1
 8002c8a:	4a42      	ldr	r2, [pc, #264]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x1d2>
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	e006      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002c96:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	fab1 f181 	clz	r1, r1
 8002c9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002ca4:	e02f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x246>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x21c>
 8002caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cae:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	fab2 f282 	clz	r2, r2
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	f042 0220 	orr.w	r2, r2, #32
 8002cba:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002cbe:	2a01      	cmp	r2, #1
 8002cc0:	4a34      	ldr	r2, [pc, #208]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x208>
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	e006      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x216>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ccc:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	fab1 f181 	clz	r1, r1
 8002cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_ClockConfig+0x246>
 8002cdc:	2202      	movs	r2, #2
 8002cde:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	fab2 f282 	clz	r2, r2
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	f042 0220 	orr.w	r2, r2, #32
 8002cea:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002cee:	2a01      	cmp	r2, #1
 8002cf0:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x238>
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	e005      	b.n	8002d04 <HAL_RCC_ClockConfig+0x244>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	fab1 f181 	clz	r1, r1
 8002d02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	2102      	movs	r1, #2
 8002d06:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	fab1 f181 	clz	r1, r1
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f001 011f 	and.w	r1, r1, #31
 8002d14:	fa00 f101 	lsl.w	r1, r0, r1
 8002d18:	4211      	tst	r1, r2
 8002d1a:	f43f aee5 	beq.w	8002ae8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002d20:	6851      	ldr	r1, [r2, #4]
 8002d22:	f021 0103 	bic.w	r1, r1, #3
 8002d26:	430b      	orrs	r3, r1
 8002d28:	6053      	str	r3, [r2, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d2a:	f000 f8c7 	bl	8002ebc <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d32:	4606      	mov	r6, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	d10d      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x292>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d088      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x194>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d42:	f000 f8bb 	bl	8002ebc <HAL_GetTick>
 8002d46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d4a:	1b80      	subs	r0, r0, r6
 8002d4c:	4298      	cmp	r0, r3
 8002d4e:	d9f2      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x276>
 8002d50:	e754      	b.n	8002bfc <HAL_RCC_ClockConfig+0x13c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d00d      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f013 0f0c 	tst.w	r3, #12
 8002d5e:	d10f      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x2c0>
 8002d60:	e778      	b.n	8002c54 <HAL_RCC_ClockConfig+0x194>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f000 f8ab 	bl	8002ebc <HAL_GetTick>
 8002d66:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d6a:	1b80      	subs	r0, r0, r6
 8002d6c:	4298      	cmp	r0, r3
 8002d6e:	f63f af45 	bhi.w	8002bfc <HAL_RCC_ClockConfig+0x13c>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_RCC_ClockConfig+0x2d4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d1f1      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x2a2>
 8002d7e:	e769      	b.n	8002c54 <HAL_RCC_ClockConfig+0x194>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f000 f89c 	bl	8002ebc <HAL_GetTick>
 8002d84:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d88:	1b80      	subs	r0, r0, r6
 8002d8a:	4298      	cmp	r0, r3
 8002d8c:	d9e3      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x296>
 8002d8e:	e735      	b.n	8002bfc <HAL_RCC_ClockConfig+0x13c>
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40021000 	.word	0x40021000
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	0719      	lsls	r1, r3, #28
 8002d9a:	d507      	bpl.n	8002dac <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_RCC_ClockConfig+0x2f8>)
 8002d9e:	6921      	ldr	r1, [r4, #16]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8002da6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002daa:	605a      	str	r2, [r3, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dac:	200f      	movs	r0, #15
 8002dae:	f000 f858 	bl	8002e62 <HAL_InitTick>

  return HAL_OK;
 8002db2:	2000      	movs	r0, #0
}
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x58>)
 8002dbe:	685b      	ldr	r3, [r3, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc0:	f003 020c 	and.w	r2, r3, #12
 8002dc4:	2a08      	cmp	r2, #8
 8002dc6:	d122      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002dcc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	fab2 f282 	clz	r2, r2
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dd4:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	fa21 f202 	lsr.w	r2, r1, r2
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002de0:	5c8a      	ldrb	r2, [r1, r2]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002de2:	490c      	ldr	r1, [pc, #48]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x58>)
 8002de4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	210f      	movs	r1, #15
 8002de8:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	fab1 f181 	clz	r1, r1
 8002df0:	f000 000f 	and.w	r0, r0, #15
 8002df4:	b2c9      	uxtb	r1, r1
 8002df6:	fa20 f101 	lsr.w	r1, r0, r1
 8002dfa:	4808      	ldr	r0, [pc, #32]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x60>)
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dfc:	03db      	lsls	r3, r3, #15
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dfe:	5c41      	ldrb	r1, [r0, r1]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8002e00:	bf4a      	itet	mi
 8002e02:	4807      	ldrmi	r0, [pc, #28]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002e04:	4807      	ldrpl	r0, [pc, #28]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x68>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8002e06:	fbb0 f0f1 	udivmi	r0, r0, r1
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002e0a:	4350      	muls	r0, r2
 8002e0c:	4770      	bx	lr

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e0e:	4804      	ldr	r0, [pc, #16]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x64>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	0801b8bc 	.word	0x0801b8bc
 8002e1c:	0801b8ac 	.word	0x0801b8ac
 8002e20:	007a1200 	.word	0x007a1200
 8002e24:	003d0900 	.word	0x003d0900

08002e28 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002e2a:	f7ff ffc7 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002e30:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	23f0      	movs	r3, #240	; 0xf0
 8002e34:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x30>)
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	40d8      	lsrs	r0, r3
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCC_GetHCLKFreq+0x34>)
 8002e4e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002e50:	bd08      	pop	{r3, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	0801b89c 	.word	0x0801b89c
 8002e5c:	20000014 	.word	0x20000014

08002e60 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002e60:	4770      	bx	lr

08002e62 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8002e62:	b510      	push	{r4, lr}
 8002e64:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002e66:	f7ff ffdf 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e72:	f000 f887 	bl	8002f84 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f000 f843 	bl	8002f08 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002e82:	2000      	movs	r0, #0
 8002e84:	bd10      	pop	{r4, pc}
	...

08002e88 <HAL_Init>:
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e88:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_Init+0x20>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f042 0210 	orr.w	r2, r2, #16
 8002e92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 f825 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9a:	200f      	movs	r0, #15
 8002e9c:	f7ff ffe1 	bl	8002e62 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	bd08      	pop	{r3, pc}
 8002ea8:	40022000 	.word	0x40022000

08002eac <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <HAL_IncTick+0xc>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	3201      	adds	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000bf0 	.word	0x20000bf0

08002ebc <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002ebc:	4b01      	ldr	r3, [pc, #4]	; (8002ec4 <HAL_GetTick+0x8>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000bf0 	.word	0x20000bf0

08002ec8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002ec8:	b513      	push	{r0, r1, r4, lr}
 8002eca:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff fff6 	bl	8002ebc <HAL_GetTick>
 8002ed0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8002ed2:	f7ff fff3 	bl	8002ebc <HAL_GetTick>
 8002ed6:	9b01      	ldr	r3, [sp, #4]
 8002ed8:	1b00      	subs	r0, r0, r4
 8002eda:	4298      	cmp	r0, r3
 8002edc:	d3f9      	bcc.n	8002ed2 <HAL_Delay+0xa>
  {
  }
}
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd10      	pop	{r4, pc}
	...

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ee6:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8002eee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002ef6:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002efa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002efe:	60d3      	str	r3, [r2, #12]
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_NVIC_SetPriority+0x5c>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002f12:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002f14:	f1c3 0407 	rsb	r4, r3, #7
 8002f18:	2c04      	cmp	r4, #4
 8002f1a:	bf28      	it	cs
 8002f1c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002f1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f20:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002f24:	bf8c      	ite	hi
 8002f26:	3b03      	subhi	r3, #3
 8002f28:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002f2a:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f2e:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002f32:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f34:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002f36:	4021      	ands	r1, r4
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f38:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002f3e:	4313      	orrs	r3, r2
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8002f40:	2800      	cmp	r0, #0
 8002f42:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f46:	da05      	bge.n	8002f54 <HAL_NVIC_SetPriority+0x4c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	f000 000f 	and.w	r0, r0, #15
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_NVIC_SetPriority+0x60>)
 8002f50:	541a      	strb	r2, [r3, r0]
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002f54:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002f58:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	e000ed00 	.word	0xe000ed00
 8002f68:	e000ed14 	.word	0xe000ed14

08002f6c <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002f6c:	0942      	lsrs	r2, r0, #5
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f000 001f 	and.w	r0, r0, #31
 8002f74:	fa03 f000 	lsl.w	r0, r3, r0
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <HAL_NVIC_EnableIRQ+0x14>)
 8002f7a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002f84:	3801      	subs	r0, #1
 8002f86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002f8a:	d20a      	bcs.n	8002fa2 <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002f90:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f92:	21f0      	movs	r1, #240	; 0xf0
 8002f94:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002f98:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9a:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002f9c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	4770      	bx	lr
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002fa2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb4:	f8d1 c000 	ldr.w	ip, [r1]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fb8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fba:	2201      	movs	r2, #1
 8002fbc:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fbe:	ea02 040c 	and.w	r4, r2, ip
 
    if (iocurrent == ioposition)
 8002fc2:	4294      	cmp	r4, r2
 8002fc4:	f040 80a0 	bne.w	8003108 <HAL_GPIO_Init+0x158>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002fc8:	684a      	ldr	r2, [r1, #4]
 8002fca:	f022 0710 	bic.w	r7, r2, #16
 8002fce:	2f02      	cmp	r7, #2
 8002fd0:	d113      	bne.n	8002ffa <HAL_GPIO_Init+0x4a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002fd2:	08de      	lsrs	r6, r3, #3
 8002fd4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fd8:	f003 0807 	and.w	r8, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002fdc:	6a35      	ldr	r5, [r6, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fde:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002fe2:	f04f 090f 	mov.w	r9, #15
 8002fe6:	fa09 f908 	lsl.w	r9, r9, r8
 8002fea:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fee:	690d      	ldr	r5, [r1, #16]
 8002ff0:	fa05 f808 	lsl.w	r8, r5, r8
 8002ff4:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3] = temp;
 8002ff8:	6235      	str	r5, [r6, #32]
 8002ffa:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ffc:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffe:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003002:	40ae      	lsls	r6, r5
 8003004:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003006:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800300a:	ea06 0909 	and.w	r9, r6, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800300e:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003012:	3f01      	subs	r7, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003014:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003018:	2f01      	cmp	r7, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800301a:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800301e:	d810      	bhi.n	8003042 <HAL_GPIO_Init+0x92>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003020:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003022:	ea06 0807 	and.w	r8, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8003026:	68cf      	ldr	r7, [r1, #12]
 8003028:	40af      	lsls	r7, r5
 800302a:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 800302e:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003030:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003032:	ea27 0804 	bic.w	r8, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003036:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800303a:	409f      	lsls	r7, r3
 800303c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OTYPER = temp;
 8003040:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003042:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003044:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003046:	688f      	ldr	r7, [r1, #8]
 8003048:	40af      	lsls	r7, r5
 800304a:	ea46 0507 	orr.w	r5, r6, r7
      GPIOx->PUPDR = temp;
 800304e:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003050:	00d5      	lsls	r5, r2, #3
 8003052:	d559      	bpl.n	8003108 <HAL_GPIO_Init+0x158>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8003054:	4d2f      	ldr	r5, [pc, #188]	; (8003114 <HAL_GPIO_Init+0x164>)
 8003056:	69ae      	ldr	r6, [r5, #24]
 8003058:	f046 0601 	orr.w	r6, r6, #1
 800305c:	61ae      	str	r6, [r5, #24]
 800305e:	f023 0603 	bic.w	r6, r3, #3
 8003062:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003066:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800306a:	f003 0703 	and.w	r7, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 800306e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003070:	00bf      	lsls	r7, r7, #2
 8003072:	f04f 080f 	mov.w	r8, #15
 8003076:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 800307a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800307e:	ea25 0808 	bic.w	r8, r5, r8
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8003082:	d015      	beq.n	80030b0 <HAL_GPIO_Init+0x100>
 8003084:	4d24      	ldr	r5, [pc, #144]	; (8003118 <HAL_GPIO_Init+0x168>)
 8003086:	42a8      	cmp	r0, r5
 8003088:	d014      	beq.n	80030b4 <HAL_GPIO_Init+0x104>
 800308a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800308e:	42a8      	cmp	r0, r5
 8003090:	d012      	beq.n	80030b8 <HAL_GPIO_Init+0x108>
 8003092:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003096:	42a8      	cmp	r0, r5
 8003098:	d010      	beq.n	80030bc <HAL_GPIO_Init+0x10c>
 800309a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800309e:	42a8      	cmp	r0, r5
 80030a0:	d00e      	beq.n	80030c0 <HAL_GPIO_Init+0x110>
 80030a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030a6:	42a8      	cmp	r0, r5
 80030a8:	bf14      	ite	ne
 80030aa:	2506      	movne	r5, #6
 80030ac:	2505      	moveq	r5, #5
 80030ae:	e008      	b.n	80030c2 <HAL_GPIO_Init+0x112>
 80030b0:	2500      	movs	r5, #0
 80030b2:	e006      	b.n	80030c2 <HAL_GPIO_Init+0x112>
 80030b4:	2501      	movs	r5, #1
 80030b6:	e004      	b.n	80030c2 <HAL_GPIO_Init+0x112>
 80030b8:	2502      	movs	r5, #2
 80030ba:	e002      	b.n	80030c2 <HAL_GPIO_Init+0x112>
 80030bc:	2503      	movs	r5, #3
 80030be:	e000      	b.n	80030c2 <HAL_GPIO_Init+0x112>
 80030c0:	2504      	movs	r5, #4
 80030c2:	40bd      	lsls	r5, r7
 80030c4:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 80030c8:	60b5      	str	r5, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ca:	4e14      	ldr	r6, [pc, #80]	; (800311c <HAL_GPIO_Init+0x16c>)
 80030cc:	6837      	ldr	r7, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 80030ce:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 80030d4:	bf14      	ite	ne
 80030d6:	4327      	orrne	r7, r4
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80030d8:	402f      	andeq	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80030da:	6037      	str	r7, [r6, #0]

        temp = EXTI->EMR;
 80030dc:	6877      	ldr	r7, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030de:	0396      	lsls	r6, r2, #14
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80030e0:	4e0e      	ldr	r6, [pc, #56]	; (800311c <HAL_GPIO_Init+0x16c>)

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
 80030e2:	bf4c      	ite	mi
 80030e4:	4327      	orrmi	r7, r4
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80030e6:	402f      	andpl	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80030e8:	6077      	str	r7, [r6, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ea:	68b7      	ldr	r7, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ec:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 80030f0:	bf14      	ite	ne
 80030f2:	4327      	orrne	r7, r4
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80030f4:	402f      	andeq	r7, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80030f6:	60b7      	str	r7, [r6, #8]

        temp = EXTI->FTSR;
 80030f8:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030fa:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <HAL_GPIO_Init+0x16c>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80030fe:	bf54      	ite	pl
 8003100:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8003104:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 8003106:	60d4      	str	r4, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003108:	3301      	adds	r3, #1
 800310a:	2b10      	cmp	r3, #16
 800310c:	f47f af55 	bne.w	8002fba <HAL_GPIO_Init+0xa>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8003110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	48000400 	.word	0x48000400
 800311c:	40010400 	.word	0x40010400

08003120 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003120:	6903      	ldr	r3, [r0, #16]
 8003122:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8003124:	bf0c      	ite	eq
 8003126:	2000      	moveq	r0, #0
 8003128:	2001      	movne	r0, #1
 800312a:	4770      	bx	lr

0800312c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800312c:	b10a      	cbz	r2, 8003132 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800312e:	8301      	strh	r1, [r0, #24]
 8003130:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8003132:	8341      	strh	r1, [r0, #26]
 8003134:	4770      	bx	lr

08003136 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003136:	6943      	ldr	r3, [r0, #20]
 8003138:	4059      	eors	r1, r3
 800313a:	6141      	str	r1, [r0, #20]
 800313c:	4770      	bx	lr

0800313e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800313e:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003140:	4604      	mov	r4, r0
 8003142:	2800      	cmp	r0, #0
 8003144:	d03f      	beq.n	80031c6 <HAL_PCD_Init+0x88>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800314c:	f002 fa68 	bl	8005620 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8003150:	6860      	ldr	r0, [r4, #4]
 8003152:	4623      	mov	r3, r4
 8003154:	2200      	movs	r2, #0
 8003156:	4282      	cmp	r2, r0
 8003158:	f103 031c 	add.w	r3, r3, #28
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	d008      	beq.n	8003174 <HAL_PCD_Init+0x36>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003162:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
 8003164:	731a      	strb	r2, [r3, #12]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003166:	735d      	strb	r5, [r3, #13]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8003168:	73d9      	strb	r1, [r3, #15]
   hpcd->IN_ep[i].maxpacket =  0;
 800316a:	6199      	str	r1, [r3, #24]
   hpcd->IN_ep[i].xfer_buff = 0;
 800316c:	61d9      	str	r1, [r3, #28]
   hpcd->IN_ep[i].xfer_len = 0;
 800316e:	6219      	str	r1, [r3, #32]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8003170:	442a      	add	r2, r5
 8003172:	e7f0      	b.n	8003156 <HAL_PCD_Init+0x18>
 8003174:	4622      	mov	r2, r4
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8003176:	4281      	cmp	r1, r0
 8003178:	f102 021c 	add.w	r2, r2, #28
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_PCD_Init+0x60>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 8003182:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 8003186:	f882 3099 	strb.w	r3, [r2, #153]	; 0x99
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800318a:	f882 309b 	strb.w	r3, [r2, #155]	; 0x9b
   hpcd->OUT_ep[i].maxpacket = 0;
 800318e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003192:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
   hpcd->OUT_ep[i].xfer_len = 0;
 8003196:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800319a:	3101      	adds	r1, #1
 800319c:	e7eb      	b.n	8003176 <HAL_PCD_Init+0x38>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80031a6:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 80031aa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 80031ae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80031b2:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80031b6:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 80031ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;

 return HAL_OK;
 80031be:	4618      	mov	r0, r3
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;
 80031c0:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141

 return HAL_OK;
 80031c4:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 80031c6:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 80031c8:	bd38      	pop	{r3, r4, r5, pc}

080031ca <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 80031ca:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80031cc:	2101      	movs	r1, #1
 80031ce:	f000 feda 	bl	8003f86 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 80031d2:	2000      	movs	r0, #0
 80031d4:	bd08      	pop	{r3, pc}

080031d6 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 80031d6:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d00f      	beq.n	80031fe <HAL_PCD_SetAddress+0x28>
 80031de:	2301      	movs	r3, #1
 80031e0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 80031e4:	b921      	cbnz	r1, 80031f0 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80031e6:	6803      	ldr	r3, [r0, #0]
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80031ee:	e001      	b.n	80031f4 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80031f0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 80031f4:	2300      	movs	r3, #0
 80031f6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 80031fa:	4618      	mov	r0, r3
 80031fc:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 80031fe:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8003200:	4770      	bx	lr

08003202 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003202:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003204:	b2cc      	uxtb	r4, r1
 8003206:	f014 0f80 	tst.w	r4, #128	; 0x80
 800320a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800320e:	f04f 061c 	mov.w	r6, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003212:	bf15      	itete	ne
 8003214:	fb06 0105 	mlane	r1, r6, r5, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003218:	fb06 0101 	mlaeq	r1, r6, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800321c:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800321e:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003220:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8003222:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003224:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8003226:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8003228:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 800322c:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 800322e:	2b01      	cmp	r3, #1
 8003230:	f000 8188 	beq.w	8003544 <HAL_PCD_EP_Open+0x342>
 8003234:	2301      	movs	r3, #1
 8003236:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 800323a:	78cc      	ldrb	r4, [r1, #3]
 800323c:	780a      	ldrb	r2, [r1, #0]
 800323e:	6803      	ldr	r3, [r0, #0]
 8003240:	2c03      	cmp	r4, #3
 8003242:	d832      	bhi.n	80032aa <HAL_PCD_EP_Open+0xa8>
 8003244:	e8df f004 	tbb	[pc, r4]
 8003248:	180e2402 	.word	0x180e2402
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800324c:	b214      	sxth	r4, r2
 800324e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003252:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003256:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800325a:	0412      	lsls	r2, r2, #16
 800325c:	0c12      	lsrs	r2, r2, #16
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	e020      	b.n	80032a6 <HAL_PCD_EP_Open+0xa4>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8003264:	b214      	sxth	r4, r2
 8003266:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800326a:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800326e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003272:	0412      	lsls	r2, r2, #16
 8003274:	0c12      	lsrs	r2, r2, #16
 8003276:	e016      	b.n	80032a6 <HAL_PCD_EP_Open+0xa4>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8003278:	b214      	sxth	r4, r2
 800327a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800327e:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003282:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003286:	0412      	lsls	r2, r2, #16
 8003288:	0c12      	lsrs	r2, r2, #16
 800328a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800328e:	e00a      	b.n	80032a6 <HAL_PCD_EP_Open+0xa4>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8003290:	b214      	sxth	r4, r2
 8003292:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003296:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800329a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800329e:	0412      	lsls	r2, r2, #16
 80032a0:	0c12      	lsrs	r2, r2, #16
 80032a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 80032aa:	780d      	ldrb	r5, [r1, #0]
 80032ac:	b22c      	sxth	r4, r5
 80032ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032b6:	0512      	lsls	r2, r2, #20
 80032b8:	0d12      	lsrs	r2, r2, #20
 80032ba:	432a      	orrs	r2, r5
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80032c8:	7a8c      	ldrb	r4, [r1, #10]
 80032ca:	780a      	ldrb	r2, [r1, #0]
 80032cc:	2c00      	cmp	r4, #0
 80032ce:	d175      	bne.n	80033bc <HAL_PCD_EP_Open+0x1ba>
  {
    if (ep->is_in)
 80032d0:	784c      	ldrb	r4, [r1, #1]
 80032d2:	888e      	ldrh	r6, [r1, #4]
 80032d4:	2508      	movs	r5, #8
 80032d6:	b33c      	cbz	r4, 8003328 <HAL_PCD_EP_Open+0x126>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80032d8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80032dc:	b2a4      	uxth	r4, r4
 80032de:	fb15 4202 	smlabb	r2, r5, r2, r4
 80032e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80032e6:	0876      	lsrs	r6, r6, #1
 80032e8:	0076      	lsls	r6, r6, #1
 80032ea:	f8c2 6400 	str.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80032ee:	780c      	ldrb	r4, [r1, #0]
 80032f0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032f4:	0655      	lsls	r5, r2, #25
 80032f6:	d50b      	bpl.n	8003310 <HAL_PCD_EP_Open+0x10e>
 80032f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003300:	0512      	lsls	r2, r2, #20
 8003302:	0d12      	lsrs	r2, r2, #20
 8003304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003308:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800330c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8003310:	7809      	ldrb	r1, [r1, #0]
 8003312:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003316:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	0412      	lsls	r2, r2, #16
 8003320:	0c12      	lsrs	r2, r2, #16
 8003322:	f082 0220 	eor.w	r2, r2, #32
 8003326:	e102      	b.n	800352e <HAL_PCD_EP_Open+0x32c>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003328:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800332c:	b2bf      	uxth	r7, r7
 800332e:	fb15 7202 	smlabb	r2, r5, r2, r7
 8003332:	3204      	adds	r2, #4
 8003334:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8003338:	0876      	lsrs	r6, r6, #1
 800333a:	0076      	lsls	r6, r6, #1
 800333c:	f844 6012 	str.w	r6, [r4, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8003340:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003344:	780a      	ldrb	r2, [r1, #0]
 8003346:	b2b6      	uxth	r6, r6
 8003348:	fb15 6502 	smlabb	r5, r5, r2, r6
 800334c:	68ca      	ldr	r2, [r1, #12]
 800334e:	2a3e      	cmp	r2, #62	; 0x3e
 8003350:	f105 0606 	add.w	r6, r5, #6
 8003354:	d90b      	bls.n	800336e <HAL_PCD_EP_Open+0x16c>
 8003356:	f3c2 154f 	ubfx	r5, r2, #5, #16
 800335a:	06d2      	lsls	r2, r2, #27
 800335c:	bf04      	itt	eq
 800335e:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8003362:	b2ad      	uxtheq	r5, r5
 8003364:	ea6f 65c5 	mvn.w	r5, r5, lsl #27
 8003368:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800336c:	e006      	b.n	800337c <HAL_PCD_EP_Open+0x17a>
 800336e:	f3c2 054f 	ubfx	r5, r2, #1, #16
 8003372:	07d7      	lsls	r7, r2, #31
 8003374:	bf44      	itt	mi
 8003376:	3501      	addmi	r5, #1
 8003378:	b2ad      	uxthmi	r5, r5
 800337a:	02ad      	lsls	r5, r5, #10
 800337c:	b2ad      	uxth	r5, r5
 800337e:	f844 5016 	str.w	r5, [r4, r6, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003382:	780c      	ldrb	r4, [r1, #0]
 8003384:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003388:	0452      	lsls	r2, r2, #17
 800338a:	d50b      	bpl.n	80033a4 <HAL_PCD_EP_Open+0x1a2>
 800338c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003390:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003394:	0512      	lsls	r2, r2, #20
 8003396:	0d12      	lsrs	r2, r2, #20
 8003398:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800339c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033a0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80033a4:	7809      	ldrb	r1, [r1, #0]
 80033a6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80033aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033b2:	0412      	lsls	r2, r2, #16
 80033b4:	0c12      	lsrs	r2, r2, #16
 80033b6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80033ba:	e0b8      	b.n	800352e <HAL_PCD_EP_Open+0x32c>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80033bc:	b214      	sxth	r4, r2
 80033be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80033c2:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80033c6:	0512      	lsls	r2, r2, #20
 80033c8:	0d12      	lsrs	r2, r2, #20
 80033ca:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80033ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033d2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80033d6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80033da:	780e      	ldrb	r6, [r1, #0]
 80033dc:	2408      	movs	r4, #8
 80033de:	b2ad      	uxth	r5, r5
 80033e0:	fb14 5506 	smlabb	r5, r4, r6, r5
 80033e4:	88ce      	ldrh	r6, [r1, #6]
 80033e6:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80033ea:	0876      	lsrs	r6, r6, #1
 80033ec:	0076      	lsls	r6, r6, #1
 80033ee:	f842 6015 	str.w	r6, [r2, r5, lsl #1]
 80033f2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80033f6:	780e      	ldrb	r6, [r1, #0]
 80033f8:	b2ad      	uxth	r5, r5
 80033fa:	fb14 5406 	smlabb	r4, r4, r6, r5
 80033fe:	890d      	ldrh	r5, [r1, #8]
 8003400:	3404      	adds	r4, #4
 8003402:	086d      	lsrs	r5, r5, #1
 8003404:	006d      	lsls	r5, r5, #1
 8003406:	f842 5014 	str.w	r5, [r2, r4, lsl #1]
 800340a:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 800340c:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800340e:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8003410:	2a00      	cmp	r2, #0
 8003412:	d146      	bne.n	80034a2 <HAL_PCD_EP_Open+0x2a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003414:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003418:	0457      	lsls	r7, r2, #17
 800341a:	d50b      	bpl.n	8003434 <HAL_PCD_EP_Open+0x232>
 800341c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003420:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003424:	0512      	lsls	r2, r2, #20
 8003426:	0d12      	lsrs	r2, r2, #20
 8003428:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800342c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003430:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003434:	780c      	ldrb	r4, [r1, #0]
 8003436:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800343a:	0656      	lsls	r6, r2, #25
 800343c:	d50b      	bpl.n	8003456 <HAL_PCD_EP_Open+0x254>
 800343e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003442:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003446:	0512      	lsls	r2, r2, #20
 8003448:	0d12      	lsrs	r2, r2, #20
 800344a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003452:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003456:	780c      	ldrb	r4, [r1, #0]
 8003458:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800345c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003460:	0512      	lsls	r2, r2, #20
 8003462:	0d12      	lsrs	r2, r2, #20
 8003464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003468:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800346c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003470:	780c      	ldrb	r4, [r1, #0]
 8003472:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003476:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800347a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800347e:	0412      	lsls	r2, r2, #16
 8003480:	0c12      	lsrs	r2, r2, #16
 8003482:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800348e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003492:	7809      	ldrb	r1, [r1, #0]
 8003494:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003498:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800349c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a0:	e043      	b.n	800352a <HAL_PCD_EP_Open+0x328>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80034a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034a6:	0455      	lsls	r5, r2, #17
 80034a8:	d50b      	bpl.n	80034c2 <HAL_PCD_EP_Open+0x2c0>
 80034aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034b2:	0512      	lsls	r2, r2, #20
 80034b4:	0d12      	lsrs	r2, r2, #20
 80034b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80034c2:	780c      	ldrb	r4, [r1, #0]
 80034c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034c8:	0652      	lsls	r2, r2, #25
 80034ca:	d50b      	bpl.n	80034e4 <HAL_PCD_EP_Open+0x2e2>
 80034cc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034d4:	0512      	lsls	r2, r2, #20
 80034d6:	0d12      	lsrs	r2, r2, #20
 80034d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80034e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80034e4:	780c      	ldrb	r4, [r1, #0]
 80034e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034ee:	0512      	lsls	r2, r2, #20
 80034f0:	0d12      	lsrs	r2, r2, #20
 80034f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034fa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80034fe:	780c      	ldrb	r4, [r1, #0]
 8003500:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003504:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350c:	0412      	lsls	r2, r2, #16
 800350e:	0c12      	lsrs	r2, r2, #16
 8003510:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003518:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800351c:	7809      	ldrb	r1, [r1, #0]
 800351e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003526:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800352a:	0412      	lsls	r2, r2, #16
 800352c:	0c12      	lsrs	r2, r2, #16
 800352e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003536:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800353a:	2300      	movs	r3, #0
 800353c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8003540:	4618      	mov	r0, r3
 8003542:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8003544:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003548 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003548:	b2cb      	uxtb	r3, r1
 800354a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800354e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003552:	b530      	push	{r4, r5, lr}
 8003554:	f04f 041c 	mov.w	r4, #28
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003558:	bf15      	itete	ne
 800355a:	fb04 0102 	mlane	r1, r4, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800355e:	fb04 0101 	mlaeq	r1, r4, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003562:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003564:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003566:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8003568:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800356a:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800356c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003570:	2b01      	cmp	r3, #1
 8003572:	f000 80c2 	beq.w	80036fa <HAL_PCD_EP_Close+0x1b2>
 8003576:	2301      	movs	r3, #1
 8003578:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

  if (ep->doublebuffer == 0) 
 800357c:	7a8d      	ldrb	r5, [r1, #10]
 800357e:	784c      	ldrb	r4, [r1, #1]
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	780a      	ldrb	r2, [r1, #0]
 8003584:	bb45      	cbnz	r5, 80035d8 <HAL_PCD_EP_Close+0x90>
  {
    if (ep->is_in)
 8003586:	b1c4      	cbz	r4, 80035ba <HAL_PCD_EP_Close+0x72>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003588:	b214      	sxth	r4, r2
 800358a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800358e:	0655      	lsls	r5, r2, #25
 8003590:	d50b      	bpl.n	80035aa <HAL_PCD_EP_Close+0x62>
 8003592:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003596:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800359a:	0512      	lsls	r2, r2, #20
 800359c:	0d12      	lsrs	r2, r2, #20
 800359e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80035a6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 80035aa:	7809      	ldrb	r1, [r1, #0]
 80035ac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80035b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b8:	e092      	b.n	80036e0 <HAL_PCD_EP_Close+0x198>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80035ba:	b214      	sxth	r4, r2
 80035bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035c0:	0452      	lsls	r2, r2, #17
 80035c2:	f140 8086 	bpl.w	80036d2 <HAL_PCD_EP_Close+0x18a>
 80035c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80035ce:	0512      	lsls	r2, r2, #20
 80035d0:	0d12      	lsrs	r2, r2, #20
 80035d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035d6:	e078      	b.n	80036ca <HAL_PCD_EP_Close+0x182>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80035d8:	2c00      	cmp	r4, #0
 80035da:	d13c      	bne.n	8003656 <HAL_PCD_EP_Close+0x10e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80035dc:	b214      	sxth	r4, r2
 80035de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035e2:	0455      	lsls	r5, r2, #17
 80035e4:	d50b      	bpl.n	80035fe <HAL_PCD_EP_Close+0xb6>
 80035e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80035ee:	0512      	lsls	r2, r2, #20
 80035f0:	0d12      	lsrs	r2, r2, #20
 80035f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035fa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80035fe:	780c      	ldrb	r4, [r1, #0]
 8003600:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003604:	0652      	lsls	r2, r2, #25
 8003606:	d50b      	bpl.n	8003620 <HAL_PCD_EP_Close+0xd8>
 8003608:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800360c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003610:	0512      	lsls	r2, r2, #20
 8003612:	0d12      	lsrs	r2, r2, #20
 8003614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003618:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800361c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003620:	780c      	ldrb	r4, [r1, #0]
 8003622:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003626:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800362a:	0512      	lsls	r2, r2, #20
 800362c:	0d12      	lsrs	r2, r2, #20
 800362e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003632:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003636:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800363a:	780c      	ldrb	r4, [r1, #0]
 800363c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003644:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003648:	0412      	lsls	r2, r2, #16
 800364a:	0c12      	lsrs	r2, r2, #16
 800364c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003654:	e7a7      	b.n	80035a6 <HAL_PCD_EP_Close+0x5e>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003656:	b214      	sxth	r4, r2
 8003658:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800365c:	0455      	lsls	r5, r2, #17
 800365e:	d50b      	bpl.n	8003678 <HAL_PCD_EP_Close+0x130>
 8003660:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003664:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003668:	0512      	lsls	r2, r2, #20
 800366a:	0d12      	lsrs	r2, r2, #20
 800366c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003674:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003678:	780c      	ldrb	r4, [r1, #0]
 800367a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800367e:	0652      	lsls	r2, r2, #25
 8003680:	d50b      	bpl.n	800369a <HAL_PCD_EP_Close+0x152>
 8003682:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003686:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800368a:	0512      	lsls	r2, r2, #20
 800368c:	0d12      	lsrs	r2, r2, #20
 800368e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003692:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003696:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800369a:	780c      	ldrb	r4, [r1, #0]
 800369c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036a4:	0512      	lsls	r2, r2, #20
 80036a6:	0d12      	lsrs	r2, r2, #20
 80036a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80036ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036b0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80036b4:	780c      	ldrb	r4, [r1, #0]
 80036b6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80036be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c2:	0412      	lsls	r2, r2, #16
 80036c4:	0c12      	lsrs	r2, r2, #16
 80036c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ce:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80036d2:	7809      	ldrb	r1, [r1, #0]
 80036d4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80036d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036e0:	0412      	lsls	r2, r2, #16
 80036e2:	0c12      	lsrs	r2, r2, #16
 80036e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ec:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80036f0:	2300      	movs	r3, #0
 80036f2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 80036f6:	4618      	mov	r0, r3
 80036f8:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 80036fa:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 80036fc:	bd30      	pop	{r4, r5, pc}

080036fe <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036fe:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003700:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003704:	251c      	movs	r5, #28
 8003706:	fb05 0501 	mla	r5, r5, r1, r0
 800370a:	35b0      	adds	r5, #176	; 0xb0
 800370c:	1d2c      	adds	r4, r5, #4
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800370e:	6122      	str	r2, [r4, #16]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8003710:	2200      	movs	r2, #0
  ep->is_in = 0;
 8003712:	7062      	strb	r2, [r4, #1]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8003714:	6163      	str	r3, [r4, #20]
  ep->xfer_count = 0;
 8003716:	61a2      	str	r2, [r4, #24]
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8003718:	7129      	strb	r1, [r5, #4]
   
  __HAL_LOCK(hpcd); 
 800371a:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
 800371e:	2901      	cmp	r1, #1
 8003720:	d053      	beq.n	80037ca <HAL_PCD_EP_Receive+0xcc>
 8003722:	2101      	movs	r1, #1
 8003724:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003728:	68e1      	ldr	r1, [r4, #12]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800372a:	7aa6      	ldrb	r6, [r4, #10]
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800372c:	428b      	cmp	r3, r1
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800372e:	bf85      	ittet	hi
 8003730:	ebc1 0303 	rsbhi	r3, r1, r3
 8003734:	6163      	strhi	r3, [r4, #20]
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8003736:	6162      	strls	r2, [r4, #20]
 8003738:	460b      	movhi	r3, r1
 800373a:	6802      	ldr	r2, [r0, #0]
 800373c:	7929      	ldrb	r1, [r5, #4]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800373e:	b10e      	cbz	r6, 8003744 <HAL_PCD_EP_Receive+0x46>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003740:	7864      	ldrb	r4, [r4, #1]
 8003742:	bb0c      	cbnz	r4, 8003788 <HAL_PCD_EP_Receive+0x8a>
 8003744:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8003748:	b2a4      	uxth	r4, r4
 800374a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800374e:	2b3e      	cmp	r3, #62	; 0x3e
 8003750:	f502 6680 	add.w	r6, r2, #1024	; 0x400
 8003754:	f101 0106 	add.w	r1, r1, #6
 8003758:	d90b      	bls.n	8003772 <HAL_PCD_EP_Receive+0x74>
 800375a:	f3c3 144f 	ubfx	r4, r3, #5, #16
 800375e:	06db      	lsls	r3, r3, #27
 8003760:	bf04      	itt	eq
 8003762:	f104 34ff 	addeq.w	r4, r4, #4294967295
 8003766:	b2a4      	uxtheq	r4, r4
 8003768:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800376c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003770:	e006      	b.n	8003780 <HAL_PCD_EP_Receive+0x82>
 8003772:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8003776:	07db      	lsls	r3, r3, #31
 8003778:	bf44      	itt	mi
 800377a:	3401      	addmi	r4, #1
 800377c:	b2a4      	uxthmi	r4, r4
 800377e:	02a4      	lsls	r4, r4, #10
 8003780:	b2a4      	uxth	r4, r4
 8003782:	f846 4011 	str.w	r4, [r6, r1, lsl #1]
 8003786:	e00a      	b.n	800379e <HAL_PCD_EP_Receive+0xa0>
 8003788:	2c01      	cmp	r4, #1
 800378a:	d108      	bne.n	800379e <HAL_PCD_EP_Receive+0xa0>
 800378c:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8003790:	b2a4      	uxth	r4, r4
 8003792:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003796:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800379a:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800379e:	7929      	ldrb	r1, [r5, #4]
 80037a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80037a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80037b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037bc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 80037c0:	2300      	movs	r3, #0
 80037c2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 80037ca:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80037cc:	bd70      	pop	{r4, r5, r6, pc}

080037ce <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80037ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80037d2:	231c      	movs	r3, #28
 80037d4:	fb03 0001 	mla	r0, r3, r1, r0
}
 80037d8:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 80037dc:	4770      	bx	lr

080037de <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80037e0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80037e4:	271c      	movs	r7, #28
 80037e6:	434f      	muls	r7, r1
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	19c5      	adds	r5, r0, r7
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037ec:	4604      	mov	r4, r0
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 80037ee:	616b      	str	r3, [r5, #20]
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037f0:	461e      	mov	r6, r3
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80037f2:	2000      	movs	r0, #0
  ep->is_in = 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	706b      	strb	r3, [r5, #1]
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80037f8:	612a      	str	r2, [r5, #16]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80037fa:	61a8      	str	r0, [r5, #24]
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
 80037fc:	55e1      	strb	r1, [r4, r7]
  
  __HAL_LOCK(hpcd); 
 80037fe:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8003802:	4299      	cmp	r1, r3
 8003804:	f000 8095 	beq.w	8003932 <HAL_PCD_EP_Transmit+0x154>
 8003808:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800380c:	68eb      	ldr	r3, [r5, #12]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800380e:	7aa9      	ldrb	r1, [r5, #10]
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003810:	429e      	cmp	r6, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003812:	bf83      	ittte	hi
 8003814:	ebc3 0606 	rsbhi	r6, r3, r6
 8003818:	616e      	strhi	r6, [r5, #20]
 800381a:	461e      	movhi	r6, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 800381c:	6168      	strls	r0, [r5, #20]
 800381e:	b2b3      	uxth	r3, r6
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003820:	b981      	cbnz	r1, 8003844 <HAL_PCD_EP_Transmit+0x66>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003822:	4611      	mov	r1, r2
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	88aa      	ldrh	r2, [r5, #4]
 8003828:	f000 fb85 	bl	8003f36 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	5de1      	ldrb	r1, [r4, r7]
 8003830:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003834:	b292      	uxth	r2, r2
 8003836:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800383a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800383e:	f8c3 6404 	str.w	r6, [r3, #1028]	; 0x404
 8003842:	e060      	b.n	8003906 <HAL_PCD_EP_Transmit+0x128>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003844:	f895 e001 	ldrb.w	lr, [r5, #1]
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	5de1      	ldrb	r1, [r4, r7]
 800384c:	f1be 0f00 	cmp.w	lr, #0
 8003850:	d122      	bne.n	8003898 <HAL_PCD_EP_Transmit+0xba>
 8003852:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8003856:	fa1f fc8c 	uxth.w	ip, ip
 800385a:	eb0c 01c1 	add.w	r1, ip, r1, lsl #3
 800385e:	2e3e      	cmp	r6, #62	; 0x3e
 8003860:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8003864:	f101 0c06 	add.w	ip, r1, #6
 8003868:	d90b      	bls.n	8003882 <HAL_PCD_EP_Transmit+0xa4>
 800386a:	f3c6 114f 	ubfx	r1, r6, #5, #16
 800386e:	06f6      	lsls	r6, r6, #27
 8003870:	bf04      	itt	eq
 8003872:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003876:	b289      	uxtheq	r1, r1
 8003878:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800387c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003880:	e006      	b.n	8003890 <HAL_PCD_EP_Transmit+0xb2>
 8003882:	f3c6 014f 	ubfx	r1, r6, #1, #16
 8003886:	07f6      	lsls	r6, r6, #31
 8003888:	bf44      	itt	mi
 800388a:	3101      	addmi	r1, #1
 800388c:	b289      	uxthmi	r1, r1
 800388e:	0289      	lsls	r1, r1, #10
 8003890:	b289      	uxth	r1, r1
 8003892:	f84e 101c 	str.w	r1, [lr, ip, lsl #1]
 8003896:	e00c      	b.n	80038b2 <HAL_PCD_EP_Transmit+0xd4>
 8003898:	f1be 0f01 	cmp.w	lr, #1
 800389c:	d109      	bne.n	80038b2 <HAL_PCD_EP_Transmit+0xd4>
 800389e:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 80038a2:	fa1f fe8e 	uxth.w	lr, lr
 80038a6:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 80038aa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80038ae:	f8c1 640c 	str.w	r6, [r1, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80038b2:	5de1      	ldrb	r1, [r4, r7]
 80038b4:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 80038b8:	0649      	lsls	r1, r1, #25
    {
      pmabuffer = ep->pmaaddr1;
 80038ba:	bf4c      	ite	mi
 80038bc:	892e      	ldrhmi	r6, [r5, #8]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80038be:	88ee      	ldrhpl	r6, [r5, #6]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80038c0:	4611      	mov	r1, r2
 80038c2:	4632      	mov	r2, r6
 80038c4:	f000 fb37 	bl	8003f36 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 80038c8:	786b      	ldrb	r3, [r5, #1]
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	5de1      	ldrb	r1, [r4, r7]
 80038ce:	b95b      	cbnz	r3, 80038e8 <HAL_PCD_EP_Transmit+0x10a>
 80038d0:	b209      	sxth	r1, r1
 80038d2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038da:	051b      	lsls	r3, r3, #20
 80038dc:	0d1b      	lsrs	r3, r3, #20
 80038de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038e6:	e00c      	b.n	8003902 <HAL_PCD_EP_Transmit+0x124>
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d10c      	bne.n	8003906 <HAL_PCD_EP_Transmit+0x128>
 80038ec:	b209      	sxth	r1, r1
 80038ee:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f6:	051b      	lsls	r3, r3, #20
 80038f8:	0d1b      	lsrs	r3, r3, #20
 80038fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003902:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003906:	5de1      	ldrb	r1, [r4, r7]
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8003926:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003928:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 800392c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 8003932:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 8003934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003936 <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003936:	6803      	ldr	r3, [r0, #0]
 8003938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800393c:	b21b      	sxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003944:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003946:	db11      	blt.n	800396c <HAL_PCD_IRQHandler+0x36>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800394e:	0552      	lsls	r2, r2, #21
 8003950:	f140 81c3 	bpl.w	8003cda <HAL_PCD_IRQHandler+0x3a4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003954:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8003958:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800395a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800395e:	f001 fec9 	bl	80056f4 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8003962:	4620      	mov	r0, r4
 8003964:	2100      	movs	r1, #0
 8003966:	f7ff fc36 	bl	80031d6 <HAL_PCD_SetAddress>
 800396a:	e1b6      	b.n	8003cda <HAL_PCD_IRQHandler+0x3a4>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003978:	b29b      	uxth	r3, r3
 800397a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	d5e2      	bpl.n	8003948 <HAL_PCD_IRQHandler+0x12>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003982:	f8bd 8004 	ldrh.w	r8, [sp, #4]
    
    if (EPindex == 0)
 8003986:	f018 080f 	ands.w	r8, r8, #15
 800398a:	f040 80b7 	bne.w	8003afc <HAL_PCD_IRQHandler+0x1c6>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800398e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003992:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8003994:	f001 0110 	and.w	r1, r1, #16
 8003998:	b289      	uxth	r1, r1
 800399a:	bb59      	cbnz	r1, 80039f4 <HAL_PCD_IRQHandler+0xbe>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800399c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80039ae:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 80039bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039be:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 80039c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c6:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80039c8:	4413      	add	r3, r2
 80039ca:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 80039cc:	4620      	mov	r0, r4
 80039ce:	f001 fe85 	bl	80056dc <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 80039d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0cb      	beq.n	8003972 <HAL_PCD_IRQHandler+0x3c>
 80039da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1c8      	bne.n	8003972 <HAL_PCD_IRQHandler+0x3c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80039e0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80039ea:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0;
 80039ee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80039f2:	e7be      	b.n	8003972 <HAL_PCD_IRQHandler+0x3c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 80039fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80039fe:	051b      	lsls	r3, r3, #20
 8003a00:	d51f      	bpl.n	8003a42 <HAL_PCD_IRQHandler+0x10c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a02:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a06:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003a14:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a18:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a20:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003a24:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8003a28:	f000 fa9c 	bl	8003f64 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	8813      	ldrh	r3, [r2, #0]
 8003a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a34:	051b      	lsls	r3, r3, #20
 8003a36:	0d1b      	lsrs	r3, r3, #20
 8003a38:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f001 fe3e 	bl	80056bc <HAL_PCD_SetupStageCallback>
 8003a40:	e797      	b.n	8003972 <HAL_PCD_IRQHandler+0x3c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8003a42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da92      	bge.n	8003972 <HAL_PCD_IRQHandler+0x3c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a4c:	8803      	ldrh	r3, [r0, #0]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	051b      	lsls	r3, r3, #20
 8003a54:	0d1b      	lsrs	r3, r3, #20
 8003a56:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a58:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a5c:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003a6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a72:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 8003a76:	b163      	cbz	r3, 8003a92 <HAL_PCD_IRQHandler+0x15c>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003a78:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8003a7c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8003a80:	f000 fa70 	bl	8003f64 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8003a84:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8003a88:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8003a92:	4620      	mov	r0, r4
 8003a94:	2100      	movs	r1, #0
 8003a96:	f001 fe18 	bl	80056ca <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8003aa0:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8003aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8003aa6:	b2ad      	uxth	r5, r5
 8003aa8:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8003aac:	f105 0506 	add.w	r5, r5, #6
 8003ab0:	d90b      	bls.n	8003aca <HAL_PCD_IRQHandler+0x194>
 8003ab2:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8003ab6:	06df      	lsls	r7, r3, #27
 8003ab8:	bf04      	itt	eq
 8003aba:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003abe:	b289      	uxtheq	r1, r1
 8003ac0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003ac4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003ac8:	e006      	b.n	8003ad8 <HAL_PCD_IRQHandler+0x1a2>
 8003aca:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8003ace:	07de      	lsls	r6, r3, #31
 8003ad0:	bf44      	itt	mi
 8003ad2:	3101      	addmi	r1, #1
 8003ad4:	b289      	uxthmi	r1, r1
 8003ad6:	0289      	lsls	r1, r1, #10
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ad8:	8813      	ldrh	r3, [r2, #0]
 8003ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003aee:	b289      	uxth	r1, r1
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003af4:	f840 1015 	str.w	r1, [r0, r5, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003af8:	8013      	strh	r3, [r2, #0]
 8003afa:	e73a      	b.n	8003972 <HAL_PCD_IRQHandler+0x3c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8003afc:	fa0f f788 	sxth.w	r7, r8
 8003b00:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8003b0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003b0e:	b21b      	sxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da6d      	bge.n	8003bf0 <HAL_PCD_IRQHandler+0x2ba>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003b14:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
 8003b18:	f04f 091c 	mov.w	r9, #28
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
        ep = &hpcd->OUT_ep[EPindex];
 8003b20:	fb09 4908 	mla	r9, r9, r8, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003b24:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
 8003b26:	f109 09b0 	add.w	r9, r9, #176	; 0xb0
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003b2a:	0d1b      	lsrs	r3, r3, #20
 8003b2c:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
 8003b30:	f109 0504 	add.w	r5, r9, #4
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8003b34:	7aaa      	ldrb	r2, [r5, #10]
 8003b36:	f899 3004 	ldrb.w	r3, [r9, #4]
 8003b3a:	b99a      	cbnz	r2, 8003b64 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b3c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b40:	b292      	uxth	r2, r2
 8003b42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003b4a:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8003b4e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003b52:	b2b6      	uxth	r6, r6
          if (count != 0)
 8003b54:	2e00      	cmp	r6, #0
 8003b56:	d037      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x292>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b58:	6929      	ldr	r1, [r5, #16]
 8003b5a:	88aa      	ldrh	r2, [r5, #4]
 8003b5c:	4633      	mov	r3, r6
 8003b5e:	f000 fa01 	bl	8003f64 <PCD_ReadPMA>
 8003b62:	e031      	b.n	8003bc8 <HAL_PCD_IRQHandler+0x292>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003b64:	b21a      	sxth	r2, r3
 8003b66:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b6a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003b6e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b72:	b289      	uxth	r1, r1
 8003b74:	f04f 0208 	mov.w	r2, #8
 8003b78:	fb12 1303 	smlabb	r3, r2, r3, r1
 8003b7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003b80:	d008      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x25e>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b82:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8003b86:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003b8a:	b2b6      	uxth	r6, r6
            if (count != 0)
 8003b8c:	b16e      	cbz	r6, 8003baa <HAL_PCD_IRQHandler+0x274>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b8e:	6929      	ldr	r1, [r5, #16]
 8003b90:	88ea      	ldrh	r2, [r5, #6]
 8003b92:	e007      	b.n	8003ba4 <HAL_PCD_IRQHandler+0x26e>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b94:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8003b98:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003b9c:	b2b6      	uxth	r6, r6
            if (count != 0)
 8003b9e:	b126      	cbz	r6, 8003baa <HAL_PCD_IRQHandler+0x274>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ba0:	6929      	ldr	r1, [r5, #16]
 8003ba2:	892a      	ldrh	r2, [r5, #8]
 8003ba4:	4633      	mov	r3, r6
 8003ba6:	f000 f9dd 	bl	8003f64 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003baa:	f899 1004 	ldrb.w	r1, [r9, #4]
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb8:	051b      	lsls	r3, r3, #20
 8003bba:	0d1b      	lsrs	r3, r3, #20
 8003bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bc4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003bc8:	69ab      	ldr	r3, [r5, #24]
        ep->xfer_buff+=count;
 8003bca:	692a      	ldr	r2, [r5, #16]
 8003bcc:	f899 1004 	ldrb.w	r1, [r9, #4]
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003bd0:	4433      	add	r3, r6
 8003bd2:	61ab      	str	r3, [r5, #24]
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003bd4:	696b      	ldr	r3, [r5, #20]
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8003bd6:	4432      	add	r2, r6
 8003bd8:	612a      	str	r2, [r5, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003bda:	b113      	cbz	r3, 8003be2 <HAL_PCD_IRQHandler+0x2ac>
 8003bdc:	68e8      	ldr	r0, [r5, #12]
 8003bde:	4286      	cmp	r6, r0
 8003be0:	d203      	bcs.n	8003bea <HAL_PCD_IRQHandler+0x2b4>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003be2:	4620      	mov	r0, r4
 8003be4:	f001 fd71 	bl	80056ca <HAL_PCD_DataOutStageCallback>
 8003be8:	e002      	b.n	8003bf0 <HAL_PCD_IRQHandler+0x2ba>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff fd87 	bl	80036fe <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8003bf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003bf4:	061a      	lsls	r2, r3, #24
 8003bf6:	f57f aebc 	bpl.w	8003972 <HAL_PCD_IRQHandler+0x3c>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003c00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8003c04:	261c      	movs	r6, #28
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8003c0a:	fb06 f608 	mul.w	r6, r6, r8
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003c0e:	041b      	lsls	r3, r3, #16
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8003c10:	3628      	adds	r6, #40	; 0x28
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003c12:	0c1b      	lsrs	r3, r3, #16
 8003c14:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8003c18:	19a5      	adds	r5, r4, r6
 8003c1a:	5da3      	ldrb	r3, [r4, r6]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8003c1c:	7aaa      	ldrb	r2, [r5, #10]
 8003c1e:	b992      	cbnz	r2, 8003c46 <HAL_PCD_IRQHandler+0x310>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c20:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c24:	b292      	uxth	r2, r2
 8003c26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c2a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003c2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c36:	61ab      	str	r3, [r5, #24]
          if (ep->xfer_count != 0)
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d034      	beq.n	8003ca6 <HAL_PCD_IRQHandler+0x370>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003c3c:	6929      	ldr	r1, [r5, #16]
 8003c3e:	88aa      	ldrh	r2, [r5, #4]
 8003c40:	f000 f979 	bl	8003f36 <PCD_WritePMA>
 8003c44:	e02f      	b.n	8003ca6 <HAL_PCD_IRQHandler+0x370>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003c46:	b21a      	sxth	r2, r3
 8003c48:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c4c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003c50:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c54:	b289      	uxth	r1, r1
 8003c56:	f04f 0208 	mov.w	r2, #8
 8003c5a:	fb12 1303 	smlabb	r3, r2, r3, r1
 8003c5e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003c62:	d008      	beq.n	8003c76 <HAL_PCD_IRQHandler+0x340>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c6c:	61ab      	str	r3, [r5, #24]
            if (ep->xfer_count != 0)
 8003c6e:	b163      	cbz	r3, 8003c8a <HAL_PCD_IRQHandler+0x354>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003c70:	6929      	ldr	r1, [r5, #16]
 8003c72:	88ea      	ldrh	r2, [r5, #6]
 8003c74:	e007      	b.n	8003c86 <HAL_PCD_IRQHandler+0x350>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7e:	61ab      	str	r3, [r5, #24]
            if (ep->xfer_count != 0)
 8003c80:	b11b      	cbz	r3, 8003c8a <HAL_PCD_IRQHandler+0x354>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003c82:	6929      	ldr	r1, [r5, #16]
 8003c84:	892a      	ldrh	r2, [r5, #8]
 8003c86:	f000 f956 	bl	8003f36 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8003c8a:	5da1      	ldrb	r1, [r4, r6]
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c96:	051b      	lsls	r3, r3, #20
 8003c98:	0d1b      	lsrs	r3, r3, #20
 8003c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	5da1      	ldrb	r1, [r4, r6]
 8003caa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003cb4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb8:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8003cbe:	692b      	ldr	r3, [r5, #16]
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cc0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003cc4:	61aa      	str	r2, [r5, #24]
        ep->xfer_buff+=ep->xfer_count;
 8003cc6:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003cc8:	696b      	ldr	r3, [r5, #20]
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8003cca:	612a      	str	r2, [r5, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003ccc:	b913      	cbnz	r3, 8003cd4 <HAL_PCD_IRQHandler+0x39e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cce:	f001 fd05 	bl	80056dc <HAL_PCD_DataInStageCallback>
 8003cd2:	e64e      	b.n	8003972 <HAL_PCD_IRQHandler+0x3c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003cd4:	f7ff fd83 	bl	80037de <HAL_PCD_EP_Transmit>
 8003cd8:	e64b      	b.n	8003972 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003ce0:	0457      	lsls	r7, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8003ce2:	bf44      	itt	mi
 8003ce4:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8003ce8:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8003cec:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003cf0:	0496      	lsls	r6, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003cf2:	bf44      	itt	mi
 8003cf4:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8003cf8:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8003cfc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d00:	04d5      	lsls	r5, r2, #19
 8003d02:	d513      	bpl.n	8003d2c <HAL_PCD_IRQHandler+0x3f6>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8003d04:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003d08:	f022 0204 	bic.w	r2, r2, #4
 8003d0c:	0412      	lsls	r2, r2, #16
 8003d0e:	0c12      	lsrs	r2, r2, #16
 8003d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8003d14:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8003d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f001 fcf7 	bl	8005710 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8003d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d32:	0510      	lsls	r0, r2, #20
 8003d34:	d518      	bpl.n	8003d68 <HAL_PCD_IRQHandler+0x432>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8003d36:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8003d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003d3e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003d42:	b292      	uxth	r2, r2
 8003d44:	f042 0208 	orr.w	r2, r2, #8
 8003d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003d4c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003d50:	b292      	uxth	r2, r2
 8003d52:	f042 0204 	orr.w	r2, r2, #4
 8003d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8003d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d5e:	04d9      	lsls	r1, r3, #19
 8003d60:	d402      	bmi.n	8003d68 <HAL_PCD_IRQHandler+0x432>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8003d62:	4620      	mov	r0, r4
 8003d64:	f001 fcd3 	bl	800570e <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d6e:	0592      	lsls	r2, r2, #22
 8003d70:	d506      	bpl.n	8003d80 <HAL_PCD_IRQHandler+0x44a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8003d72:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8003d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f001 fcb6 	bl	80056ec <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d86:	05d7      	lsls	r7, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8003d88:	bf44      	itt	mi
 8003d8a:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8003d8e:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8003d92:	b003      	add	sp, #12
 8003d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003d98 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003d98:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003d9c:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d9e:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003da0:	d049      	beq.n	8003e36 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8003da2:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003da4:	2301      	movs	r3, #1
   
  if ((0x80 & ep_addr) == 0x80)
 8003da6:	f014 0f80 	tst.w	r4, #128	; 0x80
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003daa:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003dae:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8003db2:	f04f 031c 	mov.w	r3, #28
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003db6:	bf15      	itete	ne
 8003db8:	fb03 0302 	mlane	r3, r3, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dbc:	fb03 0301 	mlaeq	r3, r3, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003dc0:	3328      	addne	r3, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dc2:	33b4      	addeq	r3, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	7099      	strb	r1, [r3, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003dc8:	09e4      	lsrs	r4, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8003dca:	b2d1      	uxtb	r1, r2
 8003dcc:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003dce:	705c      	strb	r4, [r3, #1]
 8003dd0:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8003dd2:	b981      	cbnz	r1, 8003df6 <HAL_PCD_EP_SetStall+0x5e>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003dd4:	8813      	ldrh	r3, [r2, #0]
 8003dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003de6:	f083 0310 	eor.w	r3, r3, #16
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df2:	8013      	strh	r3, [r2, #0]
 8003df4:	e01a      	b.n	8003e2c <HAL_PCD_EP_SetStall+0x94>
 8003df6:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8003df8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 8003dfc:	b144      	cbz	r4, 8003e10 <HAL_PCD_EP_SetStall+0x78>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f083 0310 	eor.w	r3, r3, #16
 8003e0e:	e007      	b.n	8003e20 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8003e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e28:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8003e32:	4618      	mov	r0, r3
 8003e34:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003e36:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003e38:	bd10      	pop	{r4, pc}

08003e3a <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8003e3a:	b2cb      	uxtb	r3, r1
 8003e3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e40:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e44:	b510      	push	{r4, lr}
 8003e46:	f04f 041c 	mov.w	r4, #28
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003e4a:	bf15      	itete	ne
 8003e4c:	fb04 0102 	mlane	r1, r4, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e50:	fb04 0101 	mlaeq	r1, r4, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003e54:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e56:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003e58:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8003e5a:	2400      	movs	r4, #0
 8003e5c:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8003e5e:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003e60:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8003e62:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d049      	beq.n	8003efe <HAL_PCD_EP_ClrStall+0xc4>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003e70:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8003e72:	784a      	ldrb	r2, [r1, #1]
 8003e74:	6803      	ldr	r3, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003e76:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8003e78:	b1da      	cbz	r2, 8003eb2 <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003e7a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003e7e:	0652      	lsls	r2, r2, #25
 8003e80:	d50b      	bpl.n	8003e9a <HAL_PCD_EP_ClrStall+0x60>
 8003e82:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003e86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e8a:	0512      	lsls	r2, r2, #20
 8003e8c:	0d12      	lsrs	r2, r2, #20
 8003e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e92:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003e96:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e9a:	7809      	ldrb	r1, [r1, #0]
 8003e9c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003ea0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	0412      	lsls	r2, r2, #16
 8003eaa:	0c12      	lsrs	r2, r2, #16
 8003eac:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8003eb0:	e01a      	b.n	8003ee8 <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003eb2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003eb6:	0452      	lsls	r2, r2, #17
 8003eb8:	d50b      	bpl.n	8003ed2 <HAL_PCD_EP_ClrStall+0x98>
 8003eba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ebe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ec2:	0512      	lsls	r2, r2, #20
 8003ec4:	0d12      	lsrs	r2, r2, #20
 8003ec6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ece:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003ed2:	7809      	ldrb	r1, [r1, #0]
 8003ed4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003ed8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003edc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ee0:	0412      	lsls	r2, r2, #16
 8003ee2:	0c12      	lsrs	r2, r2, #16
 8003ee4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ef0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8003efa:	4618      	mov	r0, r3
 8003efc:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8003efe:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8003f00:	bd10      	pop	{r4, pc}

08003f02 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8003f02:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8003f06:	b510      	push	{r4, lr}
 8003f08:	f04f 041c 	mov.w	r4, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8003f0c:	d005      	beq.n	8003f1a <HAL_PCDEx_PMAConfig+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003f0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003f12:	fb04 0001 	mla	r0, r4, r1, r0
 8003f16:	3028      	adds	r0, #40	; 0x28
 8003f18:	e002      	b.n	8003f20 <HAL_PCDEx_PMAConfig+0x1e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f1a:	fb04 0001 	mla	r0, r4, r1, r0
 8003f1e:	30b4      	adds	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f20:	b912      	cbnz	r2, 8003f28 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8003f22:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003f24:	8083      	strh	r3, [r0, #4]
 8003f26:	e004      	b.n	8003f32 <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003f28:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8003f2a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003f2c:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003f2e:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003f30:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8003f32:	2000      	movs	r0, #0
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003f36:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003f38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f3c:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003f3e:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003f40:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003f44:	2400      	movs	r4, #0
 8003f46:	429c      	cmp	r4, r3
 8003f48:	f101 0102 	add.w	r1, r1, #2
 8003f4c:	d009      	beq.n	8003f62 <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003f4e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003f52:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003f56:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8003f5a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8003f5e:	3401      	adds	r4, #1
 8003f60:	e7f1      	b.n	8003f46 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003f62:	bd30      	pop	{r4, r5, pc}

08003f64 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003f64:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003f66:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f6a:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003f6c:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003f6e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003f72:	2400      	movs	r4, #0
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d005      	beq.n	8003f84 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003f78:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8003f7c:	f821 5014 	strh.w	r5, [r1, r4, lsl #1]
 8003f80:	3401      	adds	r4, #1
 8003f82:	e7f7      	b.n	8003f74 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8003f84:	bd30      	pop	{r4, r5, pc}

08003f86 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003f86:	4770      	bx	lr

08003f88 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f88:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003f8a:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003f8c:	4806      	ldr	r0, [pc, #24]	; (8003fa8 <I2C_TransferConfig+0x20>)
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003f8e:	6865      	ldr	r5, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003f90:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003f92:	9d03      	ldr	r5, [sp, #12]
 8003f94:	4328      	orrs	r0, r5
 8003f96:	4303      	orrs	r3, r0
 8003f98:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003f9c:	ea43 0001 	orr.w	r0, r3, r1
 8003fa0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8003fa4:	6062      	str	r2, [r4, #4]
 8003fa6:	bd30      	pop	{r4, r5, pc}
 8003fa8:	fc009800 	.word	0xfc009800

08003fac <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4604      	mov	r4, r0
 8003fb0:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003fb2:	f7fe ff83 	bl	8002ebc <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003fba:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fbc:	f012 0010 	ands.w	r0, r2, #16
 8003fc0:	d039      	beq.n	8004036 <I2C_IsAcknowledgeFailed+0x8a>
  {
    /* Generate stop if necessary only in case of I2C peripheral in MASTER mode */
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8003fc2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003fc6:	2a12      	cmp	r2, #18
 8003fc8:	d007      	beq.n	8003fda <I2C_IsAcknowledgeFailed+0x2e>
 8003fca:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003fce:	2a52      	cmp	r2, #82	; 0x52
 8003fd0:	d003      	beq.n	8003fda <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8003fd2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003fd6:	2a62      	cmp	r2, #98	; 0x62
 8003fd8:	d112      	bne.n	8004000 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* No need to generate the STOP condition if AUTOEND mode is enabled */
      /* Generate the STOP condition only in case of SOFTEND mode is enabled */
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	0190      	lsls	r0, r2, #6
 8003fde:	d40f      	bmi.n	8004000 <I2C_IsAcknowledgeFailed+0x54>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	e00a      	b.n	8004000 <I2C_IsAcknowledgeFailed+0x54>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	0692      	lsls	r2, r2, #26
 8003fee:	d411      	bmi.n	8004014 <I2C_IsAcknowledgeFailed+0x68>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ff0:	1c69      	adds	r1, r5, #1
 8003ff2:	d0fa      	beq.n	8003fea <I2C_IsAcknowledgeFailed+0x3e>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ff4:	b135      	cbz	r5, 8004004 <I2C_IsAcknowledgeFailed+0x58>
 8003ff6:	f7fe ff61 	bl	8002ebc <HAL_GetTick>
 8003ffa:	1b80      	subs	r0, r0, r6
 8003ffc:	42a8      	cmp	r0, r5
 8003ffe:	d801      	bhi.n	8004004 <I2C_IsAcknowledgeFailed+0x58>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	e7f2      	b.n	8003fea <I2C_IsAcknowledgeFailed+0x3e>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8004004:	2301      	movs	r3, #1
 8004006:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8004010:	2003      	movs	r0, #3
 8004012:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004018:	2220      	movs	r2, #32
 800401a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	4a06      	ldr	r2, [pc, #24]	; (8004038 <I2C_IsAcknowledgeFailed+0x8c>)
 8004020:	400a      	ands	r2, r1
 8004022:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004024:	2304      	movs	r3, #4
 8004026:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800402a:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 800402e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	fe00e800 	.word	0xfe00e800

0800403c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 800403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004040:	4604      	mov	r4, r0
 8004042:	460e      	mov	r6, r1
 8004044:	4690      	mov	r8, r2
 8004046:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8004048:	f7fe ff38 	bl	8002ebc <HAL_GetTick>
 800404c:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 800404e:	f1b8 0f00 	cmp.w	r8, #0
 8004052:	d125      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	6993      	ldr	r3, [r2, #24]
 8004058:	4033      	ands	r3, r6
 800405a:	42b3      	cmp	r3, r6
 800405c:	d00e      	beq.n	800407c <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800405e:	1c69      	adds	r1, r5, #1
 8004060:	d0f9      	beq.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004062:	b17d      	cbz	r5, 8004084 <I2C_WaitOnFlagUntilTimeout+0x48>
 8004064:	f7fe ff2a 	bl	8002ebc <HAL_GetTick>
 8004068:	1bc0      	subs	r0, r0, r7
 800406a:	42a8      	cmp	r0, r5
 800406c:	d9f2      	bls.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x18>
 800406e:	e009      	b.n	8004084 <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004070:	1c6b      	adds	r3, r5, #1
 8004072:	d106      	bne.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8004074:	6993      	ldr	r3, [r2, #24]
 8004076:	4033      	ands	r3, r6
 8004078:	42b3      	cmp	r3, r6
 800407a:	d0f9      	beq.n	8004070 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2000      	movs	r0, #0
 800407e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004082:	b945      	cbnz	r5, 8004096 <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8004084:	2301      	movs	r3, #1
 8004086:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8004090:	2003      	movs	r0, #3
 8004092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004096:	f7fe ff11 	bl	8002ebc <HAL_GetTick>
 800409a:	1bc0      	subs	r0, r0, r7
 800409c:	42a8      	cmp	r0, r5
 800409e:	d8f1      	bhi.n	8004084 <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	e7e7      	b.n	8004074 <I2C_WaitOnFlagUntilTimeout+0x38>

080040a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80040aa:	f7fe ff07 	bl	8002ebc <HAL_GetTick>
 80040ae:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	0798      	lsls	r0, r3, #30
 80040b6:	d41b      	bmi.n	80040f0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 80040b8:	4620      	mov	r0, r4
 80040ba:	4629      	mov	r1, r5
 80040bc:	f7ff ff76 	bl	8003fac <I2C_IsAcknowledgeFailed>
 80040c0:	b9c0      	cbnz	r0, 80040f4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80040c2:	1c6b      	adds	r3, r5, #1
 80040c4:	d0f4      	beq.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80040c6:	b96d      	cbnz	r5, 80040e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80040cc:	f043 0320 	orr.w	r3, r3, #32
 80040d0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80040e0:	2003      	movs	r0, #3
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80040e4:	f7fe feea 	bl	8002ebc <HAL_GetTick>
 80040e8:	1b80      	subs	r0, r0, r6
 80040ea:	42a8      	cmp	r0, r5
 80040ec:	d9e0      	bls.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 80040ee:	e7eb      	b.n	80040c8 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 80040f0:	2000      	movs	r0, #0
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 80040f4:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 80040f6:	bd70      	pop	{r4, r5, r6, pc}

080040f8 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 80040f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040fa:	9d08      	ldr	r5, [sp, #32]
 80040fc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8004102:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004104:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8004106:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800410c:	b2fa      	uxtb	r2, r7
 800410e:	f7ff ff3b 	bl	8003f88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f7ff ffc5 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800411a:	b130      	cbz	r0, 800412a <I2C_RequestMemoryWrite+0x32>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004120:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8004122:	bf0c      	ite	eq
 8004124:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8004126:	2003      	movne	r0, #3
 8004128:	e017      	b.n	800415a <I2C_RequestMemoryWrite+0x62>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	2f01      	cmp	r7, #1
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	d008      	beq.n	8004142 <I2C_RequestMemoryWrite+0x4a>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8004130:	0a32      	lsrs	r2, r6, #8
 8004132:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004134:	4620      	mov	r0, r4
 8004136:	4629      	mov	r1, r5
 8004138:	f7ff ffb4 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800413c:	2800      	cmp	r0, #0
 800413e:	d1ed      	bne.n	800411c <I2C_RequestMemoryWrite+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	b2f6      	uxtb	r6, r6
 8004144:	629e      	str	r6, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004146:	4620      	mov	r0, r4
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	2200      	movs	r2, #0
 800414c:	462b      	mov	r3, r5
 800414e:	f7ff ff75 	bl	800403c <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8004152:	2800      	cmp	r0, #0
 8004154:	bf14      	ite	ne
 8004156:	2003      	movne	r0, #3
 8004158:	2000      	moveq	r0, #0
  }

return HAL_OK;
}
 800415a:	b003      	add	sp, #12
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800415e <I2C_RequestMemoryRead>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 800415e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004160:	9d08      	ldr	r5, [sp, #32]
 8004162:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8004168:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800416a:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 800416c:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800416e:	2300      	movs	r3, #0
 8004170:	b2fa      	uxtb	r2, r7
 8004172:	f7ff ff09 	bl	8003f88 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7ff ff93 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800417e:	b130      	cbz	r0, 800418e <I2C_RequestMemoryRead+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004180:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004184:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8004186:	bf0c      	ite	eq
 8004188:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 800418a:	2003      	movne	r0, #3
 800418c:	e017      	b.n	80041be <I2C_RequestMemoryRead+0x60>
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800418e:	2f01      	cmp	r7, #1
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	d008      	beq.n	80041a6 <I2C_RequestMemoryRead+0x48>
  }      
  /* If Mememory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8004194:	0a32      	lsrs	r2, r6, #8
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004198:	4620      	mov	r0, r4
 800419a:	4629      	mov	r1, r5
 800419c:	f7ff ff82 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d1ed      	bne.n	8004180 <I2C_RequestMemoryRead+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	b2f6      	uxtb	r6, r6
 80041a8:	629e      	str	r6, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 80041aa:	4620      	mov	r0, r4
 80041ac:	2140      	movs	r1, #64	; 0x40
 80041ae:	2200      	movs	r2, #0
 80041b0:	462b      	mov	r3, r5
 80041b2:	f7ff ff43 	bl	800403c <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 80041b6:	2800      	cmp	r0, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2003      	movne	r0, #3
 80041bc:	2000      	moveq	r0, #0
  }
  
  return HAL_OK;
}
 80041be:	b003      	add	sp, #12
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 80041c2:	b570      	push	{r4, r5, r6, lr}
 80041c4:	4604      	mov	r4, r0
 80041c6:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 80041c8:	f7fe fe78 	bl	8002ebc <HAL_GetTick>
 80041cc:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	069a      	lsls	r2, r3, #26
 80041d4:	d419      	bmi.n	800420a <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 80041d6:	4620      	mov	r0, r4
 80041d8:	4629      	mov	r1, r5
 80041da:	f7ff fee7 	bl	8003fac <I2C_IsAcknowledgeFailed>
 80041de:	b9b0      	cbnz	r0, 800420e <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80041e0:	b96d      	cbnz	r5, 80041fe <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80041e6:	f043 0320 	orr.w	r3, r3, #32
 80041ea:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f4:	2300      	movs	r3, #0
 80041f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80041fa:	2003      	movs	r0, #3
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80041fe:	f7fe fe5d 	bl	8002ebc <HAL_GetTick>
 8004202:	1b80      	subs	r0, r0, r6
 8004204:	42a8      	cmp	r0, r5
 8004206:	d9e2      	bls.n	80041ce <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8004208:	e7eb      	b.n	80041e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800420a:	2000      	movs	r0, #0
 800420c:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 800420e:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8004210:	bd70      	pop	{r4, r5, r6, pc}

08004212 <HAL_I2C_MspInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004212:	4770      	bx	lr

08004214 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8004214:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004216:	4604      	mov	r4, r0
 8004218:	2800      	cmp	r0, #0
 800421a:	d041      	beq.n	80042a0 <HAL_I2C_Init+0x8c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800421c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004220:	b90b      	cbnz	r3, 8004226 <HAL_I2C_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004222:	f7ff fff6 	bl	8004212 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004226:	2302      	movs	r3, #2
 8004228:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	68e1      	ldr	r1, [r4, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004238:	6862      	ldr	r2, [r4, #4]
 800423a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800423e:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004246:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8004248:	68a2      	ldr	r2, [r4, #8]
 800424a:	b142      	cbz	r2, 800425e <HAL_I2C_Init+0x4a>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800424c:	2901      	cmp	r1, #1
 800424e:	d103      	bne.n	8004258 <HAL_I2C_Init+0x44>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	e007      	b.n	8004268 <HAL_I2C_Init+0x54>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004258:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800425c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800425e:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004260:	bf04      	itt	eq
 8004262:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8004266:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004268:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800426a:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800426c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004274:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004276:	6922      	ldr	r2, [r4, #16]
 8004278:	4311      	orrs	r1, r2
 800427a:	69a2      	ldr	r2, [r4, #24]
 800427c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8004280:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004282:	6a21      	ldr	r1, [r4, #32]
 8004284:	69e2      	ldr	r2, [r4, #28]
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004292:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004294:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004296:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800429a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 800429e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 80042a0:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 80042a2:	bd10      	pop	{r4, pc}

080042a4 <HAL_I2C_MspDeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80042a4:	4770      	bx	lr

080042a6 <HAL_I2C_DeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042a6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80042a8:	4604      	mov	r4, r0
 80042aa:	b188      	cbz	r0, 80042d0 <HAL_I2C_DeInit+0x2a>
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ac:	2302      	movs	r3, #2
 80042ae:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042b2:	6803      	ldr	r3, [r0, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042bc:	f7ff fff2 	bl	80042a4 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c0:	2000      	movs	r0, #0
 80042c2:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042c6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 80042ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 80042ce:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 80042d0:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 80042d2:	bd10      	pop	{r4, pc}

080042d4 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80042d8:	f890 a035 	ldrb.w	sl, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042dc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80042e0:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 80042e4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80042e8:	fa5f fa8a 	uxtb.w	sl, sl
 80042ec:	f1ba 0f01 	cmp.w	sl, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	4604      	mov	r4, r0
 80042f2:	460f      	mov	r7, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80042f4:	d164      	bne.n	80043c0 <HAL_I2C_Mem_Write+0xec>
  { 
    if((pData == NULL) || (Size == 0)) 
 80042f6:	f1b8 0f00 	cmp.w	r8, #0
 80042fa:	d101      	bne.n	8004300 <HAL_I2C_Mem_Write+0x2c>
    {
      return  HAL_ERROR;                                    
 80042fc:	2001      	movs	r0, #1
 80042fe:	e062      	b.n	80043c6 <HAL_I2C_Mem_Write+0xf2>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 8004300:	2d00      	cmp	r5, #0
 8004302:	d0fb      	beq.n	80042fc <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004304:	6806      	ldr	r6, [r0, #0]
 8004306:	69b6      	ldr	r6, [r6, #24]
 8004308:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800430c:	d158      	bne.n	80043c0 <HAL_I2C_Mem_Write+0xec>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430e:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8004312:	f1bc 0f01 	cmp.w	ip, #1
 8004316:	d053      	beq.n	80043c0 <HAL_I2C_Mem_Write+0xec>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8004318:	f04f 0e52 	mov.w	lr, #82	; 0x52
 800431c:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004320:	f880 a034 	strb.w	sl, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004324:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004328:	f8cd 9000 	str.w	r9, [sp]
 800432c:	f7ff fee4 	bl	80040f8 <I2C_RequestMemoryWrite>
 8004330:	b120      	cbz	r0, 800433c <HAL_I2C_Mem_Write+0x68>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004332:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004336:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 800433a:	e031      	b.n	80043a0 <HAL_I2C_Mem_Write+0xcc>

    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800433c:	9000      	str	r0, [sp, #0]
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 800433e:	2dff      	cmp	r5, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004340:	4620      	mov	r0, r4
 8004342:	4639      	mov	r1, r7
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 8004344:	d81c      	bhi.n	8004380 <HAL_I2C_Mem_Write+0xac>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004346:	b2ea      	uxtb	r2, r5
 8004348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434c:	f7ff fe1c 	bl	8003f88 <I2C_TransferConfig>
      Sizetmp = Size;
 8004350:	462e      	mov	r6, r5
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004352:	4620      	mov	r0, r4
 8004354:	4649      	mov	r1, r9
 8004356:	f7ff fea5 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800435a:	b9f8      	cbnz	r0, 800439c <HAL_I2C_Mem_Write+0xc8>
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	f818 2b01 	ldrb.w	r2, [r8], #1
      Sizetmp--;
      Size--;
 8004362:	3d01      	subs	r5, #1

      if((Sizetmp == 0)&&(Size!=0))
 8004364:	3e01      	subs	r6, #1
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
 8004368:	b2ad      	uxth	r5, r5

      if((Sizetmp == 0)&&(Size!=0))
 800436a:	d110      	bne.n	800438e <HAL_I2C_Mem_Write+0xba>
 800436c:	b18d      	cbz	r5, 8004392 <HAL_I2C_Mem_Write+0xbe>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800436e:	4620      	mov	r0, r4
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	4632      	mov	r2, r6
 8004374:	464b      	mov	r3, r9
 8004376:	f7ff fe61 	bl	800403c <I2C_WaitOnFlagUntilTimeout>
 800437a:	bb18      	cbnz	r0, 80043c4 <HAL_I2C_Mem_Write+0xf0>
        }

        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800437c:	9600      	str	r6, [sp, #0]
 800437e:	e7de      	b.n	800433e <HAL_I2C_Mem_Write+0x6a>
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004386:	f7ff fdff 	bl	8003f88 <I2C_TransferConfig>
          Sizetmp = 255;
 800438a:	26ff      	movs	r6, #255	; 0xff
 800438c:	e7e1      	b.n	8004352 <HAL_I2C_Mem_Write+0x7e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 800438e:	2d00      	cmp	r5, #0
 8004390:	d1df      	bne.n	8004352 <HAL_I2C_Mem_Write+0x7e>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8004392:	4620      	mov	r0, r4
 8004394:	2119      	movs	r1, #25
 8004396:	f7ff ff14 	bl	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800439a:	b120      	cbz	r0, 80043a6 <HAL_I2C_Mem_Write+0xd2>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d10f      	bne.n	80043c4 <HAL_I2C_Mem_Write+0xf0>
 80043a4:	e7aa      	b.n	80042fc <HAL_I2C_Mem_Write+0x28>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	2220      	movs	r2, #32
 80043aa:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <HAL_I2C_Mem_Write+0xf8>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 80043b4:	2301      	movs	r3, #1
 80043b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ba:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 80043be:	e002      	b.n	80043c6 <HAL_I2C_Mem_Write+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2002      	movs	r0, #2
 80043c2:	e000      	b.n	80043c6 <HAL_I2C_Mem_Write+0xf2>
      if((Sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 80043c4:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80043c6:	b002      	add	sp, #8
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	fe00e800 	.word	0xfe00e800

080043d0 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80043d4:	f890 a035 	ldrb.w	sl, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80043dc:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 80043e0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	fa5f fa8a 	uxtb.w	sl, sl
 80043e8:	f1ba 0f01 	cmp.w	sl, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ec:	4604      	mov	r4, r0
 80043ee:	460f      	mov	r7, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80043f0:	d16c      	bne.n	80044cc <HAL_I2C_Mem_Read+0xfc>
  {    
    if((pData == NULL) || (Size == 0)) 
 80043f2:	f1b8 0f00 	cmp.w	r8, #0
 80043f6:	d101      	bne.n	80043fc <HAL_I2C_Mem_Read+0x2c>
    {
      return  HAL_ERROR;                                    
 80043f8:	2001      	movs	r0, #1
 80043fa:	e068      	b.n	80044ce <HAL_I2C_Mem_Read+0xfe>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 80043fc:	2d00      	cmp	r5, #0
 80043fe:	d0fb      	beq.n	80043f8 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004400:	6806      	ldr	r6, [r0, #0]
 8004402:	69b6      	ldr	r6, [r6, #24]
 8004404:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8004408:	d160      	bne.n	80044cc <HAL_I2C_Mem_Read+0xfc>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440a:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800440e:	f1bc 0f01 	cmp.w	ip, #1
 8004412:	d05b      	beq.n	80044cc <HAL_I2C_Mem_Read+0xfc>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8004414:	f04f 0e62 	mov.w	lr, #98	; 0x62
 8004418:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441c:	f880 a034 	strb.w	sl, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004424:	f8cd 9000 	str.w	r9, [sp]
 8004428:	f7ff fe99 	bl	800415e <I2C_RequestMemoryRead>
 800442c:	b120      	cbz	r0, 8004438 <HAL_I2C_Mem_Read+0x68>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004432:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8004436:	e038      	b.n	80044aa <HAL_I2C_Mem_Read+0xda>
 8004438:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 800443c:	2dff      	cmp	r5, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	4620      	mov	r0, r4
 8004442:	4639      	mov	r1, r7
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8004444:	d821      	bhi.n	800448a <HAL_I2C_Mem_Read+0xba>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004446:	b2ea      	uxtb	r2, r5
 8004448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444c:	f7ff fd9c 	bl	8003f88 <I2C_TransferConfig>
      Sizetmp = Size;
 8004450:	462e      	mov	r6, r5
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8004452:	4620      	mov	r0, r4
 8004454:	2104      	movs	r1, #4
 8004456:	2200      	movs	r2, #0
 8004458:	464b      	mov	r3, r9
 800445a:	f7ff fdef 	bl	800403c <I2C_WaitOnFlagUntilTimeout>
 800445e:	bb30      	cbnz	r0, 80044ae <HAL_I2C_Mem_Read+0xde>
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 8004464:	3d01      	subs	r5, #1

      if((Sizetmp == 0)&&(Size!=0))
 8004466:	3e01      	subs	r6, #1
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8004468:	f808 3b01 	strb.w	r3, [r8], #1

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 800446c:	b2ad      	uxth	r5, r5

      if((Sizetmp == 0)&&(Size!=0))
 800446e:	d113      	bne.n	8004498 <HAL_I2C_Mem_Read+0xc8>
 8004470:	b1a5      	cbz	r5, 800449c <HAL_I2C_Mem_Read+0xcc>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004472:	4620      	mov	r0, r4
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	4632      	mov	r2, r6
 8004478:	464b      	mov	r3, r9
 800447a:	f7ff fddf 	bl	800403c <I2C_WaitOnFlagUntilTimeout>
 800447e:	b9b0      	cbnz	r0, 80044ae <HAL_I2C_Mem_Read+0xde>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004480:	9600      	str	r6, [sp, #0]
 8004482:	4620      	mov	r0, r4
 8004484:	4639      	mov	r1, r7
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8004486:	2dff      	cmp	r5, #255	; 0xff
 8004488:	e7dc      	b.n	8004444 <HAL_I2C_Mem_Read+0x74>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800448a:	22ff      	movs	r2, #255	; 0xff
 800448c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004490:	f7ff fd7a 	bl	8003f88 <I2C_TransferConfig>
          Sizetmp = 255;
 8004494:	26ff      	movs	r6, #255	; 0xff
 8004496:	e7dc      	b.n	8004452 <HAL_I2C_Mem_Read+0x82>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }

    }while(Size > 0);
 8004498:	2d00      	cmp	r5, #0
 800449a:	d1da      	bne.n	8004452 <HAL_I2C_Mem_Read+0x82>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800449c:	4620      	mov	r0, r4
 800449e:	2119      	movs	r1, #25
 80044a0:	f7ff fe8f 	bl	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044a4:	b128      	cbz	r0, 80044b2 <HAL_I2C_Mem_Read+0xe2>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d0a4      	beq.n	80043f8 <HAL_I2C_Mem_Read+0x28>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 80044ae:	2003      	movs	r0, #3
 80044b0:	e00d      	b.n	80044ce <HAL_I2C_Mem_Read+0xfe>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	2220      	movs	r2, #32
 80044b6:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	4a06      	ldr	r2, [pc, #24]	; (80044d4 <HAL_I2C_Mem_Read+0x104>)
 80044bc:	400a      	ands	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 80044ca:	e000      	b.n	80044ce <HAL_I2C_Mem_Read+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2002      	movs	r0, #2
  }
}
 80044ce:	b002      	add	sp, #8
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d4:	fe00e800 	.word	0xfe00e800

080044d8 <HAL_I2C_GetState>:
  * @param  hi2c : I2C handle
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 80044d8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80044dc:	4770      	bx	lr

080044de <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 80044de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e2:	4604      	mov	r4, r0
 80044e4:	460f      	mov	r7, r1
 80044e6:	4616      	mov	r6, r2
 80044e8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80044ea:	f7fe fce7 	bl	8002ebc <HAL_GetTick>
 80044ee:	4680      	mov	r8, r0
     
  while((hspi->Instance->SR & Flag) != State)
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	6893      	ldr	r3, [r2, #8]
 80044f4:	403b      	ands	r3, r7
 80044f6:	42b3      	cmp	r3, r6
 80044f8:	d033      	beq.n	8004562 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
 80044fa:	1c6b      	adds	r3, r5, #1
 80044fc:	d0f9      	beq.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80044fe:	b94d      	cbnz	r5, 8004514 <SPI_WaitFlagStateUntilTimeout+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004508:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004510:	d112      	bne.n	8004538 <SPI_WaitFlagStateUntilTimeout+0x5a>
 8004512:	e006      	b.n	8004522 <SPI_WaitFlagStateUntilTimeout+0x44>
     
  while((hspi->Instance->SR & Flag) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004514:	f7fe fcd2 	bl	8002ebc <HAL_GetTick>
 8004518:	ebc8 0000 	rsb	r0, r8, r0
 800451c:	42a8      	cmp	r0, r5
 800451e:	d9e7      	bls.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x12>
 8004520:	e7ee      	b.n	8004500 <SPI_WaitFlagStateUntilTimeout+0x22>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004522:	68a2      	ldr	r2, [r4, #8]
 8004524:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004528:	d002      	beq.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x52>
 800452a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800452e:	d103      	bne.n	8004538 <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004536:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004538:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800453a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800453e:	d107      	bne.n	8004550 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          __HAL_SPI_RESET_CRC(hspi);
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800454e:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 8004550:	2301      	movs	r3, #1
 8004552:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004556:	2300      	movs	r3, #0
 8004558:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800455c:	2003      	movs	r0, #3
 800455e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 8004562:	2000      	movs	r0, #0
}
 8004564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004568 <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 8004568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	460f      	mov	r7, r1
 8004570:	4616      	mov	r6, r2
 8004572:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 8004574:	f7fe fca2 	bl	8002ebc <HAL_GetTick>
 8004578:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	403a      	ands	r2, r7
 8004580:	42b2      	cmp	r2, r6
 8004582:	d03a      	beq.n	80045fa <SPI_WaitFifoStateUntilTimeout+0x92>
  {
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004584:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 8004588:	d104      	bne.n	8004594 <SPI_WaitFifoStateUntilTimeout+0x2c>
 800458a:	b91e      	cbnz	r6, 8004594 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800458c:	7b1a      	ldrb	r2, [r3, #12]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	f88d 2007 	strb.w	r2, [sp, #7]
    }
    if(Timeout != HAL_MAX_DELAY)
 8004594:	1c6a      	adds	r2, r5, #1
 8004596:	d0f1      	beq.n	800457c <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004598:	b94d      	cbnz	r5, 80045ae <SPI_WaitFifoStateUntilTimeout+0x46>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045a2:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045a4:	6862      	ldr	r2, [r4, #4]
 80045a6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80045aa:	d112      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0x6a>
 80045ac:	e006      	b.n	80045bc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
    }
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80045ae:	f7fe fc85 	bl	8002ebc <HAL_GetTick>
 80045b2:	ebc8 0000 	rsb	r0, r8, r0
 80045b6:	42a8      	cmp	r0, r5
 80045b8:	d9df      	bls.n	800457a <SPI_WaitFifoStateUntilTimeout+0x12>
 80045ba:	e7ee      	b.n	800459a <SPI_WaitFifoStateUntilTimeout+0x32>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045bc:	68a2      	ldr	r2, [r4, #8]
 80045be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80045c2:	d002      	beq.n	80045ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80045c4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80045c8:	d103      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0x6a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d0:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80045d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80045d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80045d8:	d107      	bne.n	80045ea <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          __HAL_SPI_RESET_CRC(hspi);
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e8:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045f0:	2300      	movs	r3, #0
 80045f2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80045f6:	2003      	movs	r0, #3
 80045f8:	e000      	b.n	80045fc <SPI_WaitFifoStateUntilTimeout+0x94>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 80045fa:	2000      	movs	r0, #0
}
 80045fc:	b002      	add	sp, #8
 80045fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004602 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 8004602:	b538      	push	{r3, r4, r5, lr}
 8004604:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8004606:	2200      	movs	r2, #0
 8004608:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800460c:	462b      	mov	r3, r5
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800460e:	4604      	mov	r4, r0
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8004610:	f7ff ffaa 	bl	8004568 <SPI_WaitFifoStateUntilTimeout>
 8004614:	4602      	mov	r2, r0
 8004616:	b968      	cbnz	r0, 8004634 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004618:	4620      	mov	r0, r4
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	462b      	mov	r3, r5
 800461e:	f7ff ff5e 	bl	80044de <SPI_WaitFlagStateUntilTimeout>
 8004622:	4602      	mov	r2, r0
 8004624:	b930      	cbnz	r0, 8004634 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 8004626:	4620      	mov	r0, r4
 8004628:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800462c:	462b      	mov	r3, r5
 800462e:	f7ff ff9b 	bl	8004568 <SPI_WaitFifoStateUntilTimeout>
 8004632:	b130      	cbz	r0, 8004642 <SPI_EndRxTxTransaction+0x40>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 8004634:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 8004640:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8004642:	bd38      	pop	{r3, r4, r5, pc}

08004644 <HAL_SPI_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004644:	4770      	bx	lr

08004646 <HAL_SPI_Init>:
  *         in the SPI_InitTypeDef and create the associated handle.
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004646:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004648:	4604      	mov	r4, r0
 800464a:	2800      	cmp	r0, #0
 800464c:	d04b      	beq.n	80046e6 <HAL_SPI_Init+0xa0>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800464e:	2302      	movs	r3, #2
 8004650:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
 8004654:	f7ff fff6 	bl	8004644 <HAL_SPI_MspInit>
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004658:	6823      	ldr	r3, [r4, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465a:	68e1      	ldr	r1, [r4, #12]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800465c:	681a      	ldr	r2, [r3, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f04f 0000 	mov.w	r0, #0
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800466c:	d903      	bls.n	8004676 <HAL_SPI_Init+0x30>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800466e:	4602      	mov	r2, r0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 8004670:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8004674:	e001      	b.n	800467a <HAL_SPI_Init+0x34>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800467a:	bf18      	it	ne
 800467c:	62a0      	strne	r0, [r4, #40]	; 0x28
  }
  
  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800467e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004680:	b928      	cbnz	r0, 800468e <HAL_SPI_Init+0x48>
  {
    /* CRC Lengtht aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004682:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004686:	bf8c      	ite	hi
 8004688:	2002      	movhi	r0, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800468a:	2001      	movls	r0, #1
 800468c:	6320      	str	r0, [r4, #48]	; 0x30
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800468e:	6865      	ldr	r5, [r4, #4]
 8004690:	68a6      	ldr	r6, [r4, #8]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8004692:	69a0      	ldr	r0, [r4, #24]
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 8004694:	432e      	orrs	r6, r5
 8004696:	6925      	ldr	r5, [r4, #16]
 8004698:	432e      	orrs	r6, r5
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800469a:	6965      	ldr	r5, [r4, #20]
 800469c:	432e      	orrs	r6, r5
 800469e:	69e5      	ldr	r5, [r4, #28]
 80046a0:	432e      	orrs	r6, r5
 80046a2:	6a25      	ldr	r5, [r4, #32]
 80046a4:	432e      	orrs	r6, r5
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 80046a6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80046a8:	4335      	orrs	r5, r6
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 80046aa:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 80046ae:	4335      	orrs	r5, r6
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 80046b0:	601d      	str	r5, [r3, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80046b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80046b4:	2d02      	cmp	r5, #2
 80046b6:	d103      	bne.n	80046c0 <HAL_SPI_Init+0x7a>
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 80046b8:	681d      	ldr	r5, [r3, #0]
 80046ba:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80046be:	601d      	str	r5, [r3, #0]
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 80046c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80046c2:	4329      	orrs	r1, r5
 80046c4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80046c6:	0c00      	lsrs	r0, r0, #16
 80046c8:	430d      	orrs	r5, r1
 80046ca:	f000 0004 	and.w	r0, r0, #4
 80046ce:	4305      	orrs	r5, r0
                         hspi->Init.DataSize ) | frxth;
 80046d0:	432a      	orrs	r2, r5
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 80046d2:	605a      	str	r2, [r3, #4]
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80046d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d6:	2000      	movs	r0, #0
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80046d8:	611a      	str	r2, [r3, #16]
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
 80046da:	2301      	movs	r3, #1
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046dc:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 80046e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  
  return HAL_OK;
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  { 
    return HAL_ERROR;
 80046e6:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 80046e8:	bd70      	pop	{r4, r5, r6, pc}

080046ea <HAL_SPI_MspDeInit>:
  * @brief SPI MSP DeInit
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80046ea:	4770      	bx	lr

080046ec <HAL_SPI_DeInit>:
  * @brief  DeInitializes the SPI peripheral 
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80046ec:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80046ee:	4604      	mov	r4, r0
 80046f0:	b188      	cbz	r0, 8004716 <HAL_SPI_DeInit+0x2a>
  {
     return HAL_ERROR;
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80046f8:	6803      	ldr	r3, [r0, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004700:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004702:	f7ff fff2 	bl	80046ea <HAL_SPI_MspDeInit>
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004706:	2000      	movs	r0, #0
 8004708:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 800470c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  
  __HAL_UNLOCK(hspi);
 8004710:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
  return HAL_OK;
 8004714:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
     return HAL_ERROR;
 8004716:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_RESET;
  
  __HAL_UNLOCK(hspi);
    
  return HAL_OK;
}
 8004718:	bd10      	pop	{r4, pc}

0800471a <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800471a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint16_t tmpreg __attribute((unused)) = 0;
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 800471e:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8004722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 8004724:	f04f 0b00 	mov.w	fp, #0
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8004728:	2f01      	cmp	r7, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800472a:	4604      	mov	r4, r0
 800472c:	4689      	mov	r9, r1
 800472e:	4692      	mov	sl, r2
 8004730:	461e      	mov	r6, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 8004732:	f8ad b006 	strh.w	fp, [sp, #6]
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8004736:	d001      	beq.n	800473c <HAL_SPI_TransmitReceive+0x22>
  {
    return HAL_BUSY;
 8004738:	2002      	movs	r0, #2
 800473a:	e12d      	b.n	8004998 <HAL_SPI_TransmitReceive+0x27e>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800473c:	2900      	cmp	r1, #0
 800473e:	f000 8128 	beq.w	8004992 <HAL_SPI_TransmitReceive+0x278>
 8004742:	2a00      	cmp	r2, #0
 8004744:	f000 8125 	beq.w	8004992 <HAL_SPI_TransmitReceive+0x278>
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8122 	beq.w	8004992 <HAL_SPI_TransmitReceive+0x278>
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 800474e:	f7fe fbb5 	bl	8002ebc <HAL_GetTick>
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8004752:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004756:	2b01      	cmp	r3, #1
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 8004758:	4680      	mov	r8, r0
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 800475a:	d0ed      	beq.n	8004738 <HAL_SPI_TransmitReceive+0x1e>
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800475c:	2305      	movs	r3, #5
 800475e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  }

  tickstart = HAL_GetTick();
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8004764:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800476c:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->pRxBuffPtr  = pRxData;
 8004770:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004774:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004778:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800477c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004780:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 8004782:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8004784:	6822      	ldr	r2, [r4, #0]
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004786:	d107      	bne.n	8004798 <HAL_SPI_TransmitReceive+0x7e>
  {
    __HAL_SPI_RESET_CRC(hspi);
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	6813      	ldr	r3, [r2, #0]
 8004792:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004796:	6013      	str	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8004798:	68e3      	ldr	r3, [r4, #12]
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800479a:	6851      	ldr	r1, [r2, #4]
  {
    __HAL_SPI_RESET_CRC(hspi);
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800479c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047a0:	d801      	bhi.n	80047a6 <HAL_SPI_TransmitReceive+0x8c>
 80047a2:	2e01      	cmp	r6, #1
 80047a4:	d902      	bls.n	80047ac <HAL_SPI_TransmitReceive+0x92>
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047a6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80047aa:	e001      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x96>
  }
  else
  {
    /* set fiforxthreshold according the reception data lenght: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ac:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80047b0:	6051      	str	r1, [r2, #4]
  }
  
  /* Check if the SPI is already enabled */ 
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b2:	6811      	ldr	r1, [r2, #0]
 80047b4:	064f      	lsls	r7, r1, #25
 80047b6:	d403      	bmi.n	80047c0 <HAL_SPI_TransmitReceive+0xa6>
  {
    /* Enable SPI peripheral */    
    __HAL_SPI_ENABLE(hspi);
 80047b8:	6811      	ldr	r1, [r2, #0]
 80047ba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80047be:	6011      	str	r1, [r2, #0]
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047c4:	d93f      	bls.n	8004846 <HAL_SPI_TransmitReceive+0x12c>
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 80047c6:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 80047c8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80047cc:	b368      	cbz	r0, 800482a <HAL_SPI_TransmitReceive+0x110>
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	0796      	lsls	r6, r2, #30
 80047d4:	d510      	bpl.n	80047f8 <HAL_SPI_TransmitReceive+0xde>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->pTxBuffPtr += sizeof(uint16_t);
        hspi->TxXferCount--;
 80047d8:	3801      	subs	r0, #1
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047da:	f832 6b02 	ldrh.w	r6, [r2], #2
        hspi->pTxBuffPtr += sizeof(uint16_t);
        hspi->TxXferCount--;
 80047de:	b280      	uxth	r0, r0
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e0:	60de      	str	r6, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80047e4:	87e0      	strh	r0, [r4, #62]	; 0x3e
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 80047e6:	b938      	cbnz	r0, 80047f8 <HAL_SPI_TransmitReceive+0xde>
 80047e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80047ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80047ee:	d103      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0xde>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f6:	601a      	str	r2, [r3, #0]
        } 
      }
      
      /* Wait until RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 80047f8:	b169      	cbz	r1, 8004816 <HAL_SPI_TransmitReceive+0xfc>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	07d2      	lsls	r2, r2, #31
 8004800:	d509      	bpl.n	8004816 <HAL_SPI_TransmitReceive+0xfc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004806:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800480a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800480c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004810:	3b01      	subs	r3, #1
 8004812:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 8004816:	1c6b      	adds	r3, r5, #1
 8004818:	d0d5      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0xac>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800481a:	b315      	cbz	r5, 8004862 <HAL_SPI_TransmitReceive+0x148>
 800481c:	f7fe fb4e 	bl	8002ebc <HAL_GetTick>
 8004820:	ebc8 0000 	rsb	r0, r8, r0
 8004824:	42a8      	cmp	r0, r5
 8004826:	d9ce      	bls.n	80047c6 <HAL_SPI_TransmitReceive+0xac>
 8004828:	e01b      	b.n	8004862 <HAL_SPI_TransmitReceive+0x148>
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800482a:	2900      	cmp	r1, #0
 800482c:	d1e4      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0xde>
      }
    }
  }
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800482e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004834:	f040 808d 	bne.w	8004952 <HAL_SPI_TransmitReceive+0x238>
 8004838:	e05e      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x1de>
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800483a:	f7fe fb3f 	bl	8002ebc <HAL_GetTick>
 800483e:	ebc8 0000 	rsb	r0, r8, r0
 8004842:	42a8      	cmp	r0, r5
 8004844:	d80d      	bhi.n	8004862 <HAL_SPI_TransmitReceive+0x148>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8004846:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004848:	2b00      	cmp	r3, #0
 800484a:	d050      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x1d4>
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	6891      	ldr	r1, [r2, #8]
 8004850:	078f      	lsls	r7, r1, #30
 8004852:	d40d      	bmi.n	8004870 <HAL_SPI_TransmitReceive+0x156>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8004854:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004858:	bb3a      	cbnz	r2, 80048aa <HAL_SPI_TransmitReceive+0x190>
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 800485a:	1c68      	adds	r0, r5, #1
 800485c:	d0f3      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x12c>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800485e:	2d00      	cmp	r5, #0
 8004860:	d1eb      	bne.n	800483a <HAL_SPI_TransmitReceive+0x120>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004862:	2301      	movs	r3, #1
 8004864:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 8004868:	2300      	movs	r3, #0
 800486a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800486e:	e092      	b.n	8004996 <HAL_SPI_TransmitReceive+0x27c>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
 8004870:	2b02      	cmp	r3, #2
 8004872:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004874:	d905      	bls.n	8004882 <HAL_SPI_TransmitReceive+0x168>
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004876:	f831 0b02 	ldrh.w	r0, [r1], #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
 800487a:	3b02      	subs	r3, #2
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800487c:	60d0      	str	r0, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800487e:	63a1      	str	r1, [r4, #56]	; 0x38
 8004880:	e005      	b.n	800488e <HAL_SPI_TransmitReceive+0x174>
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004882:	1c4b      	adds	r3, r1, #1
 8004884:	63a3      	str	r3, [r4, #56]	; 0x38
 8004886:	780b      	ldrb	r3, [r1, #0]
 8004888:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800488a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800488c:	3b01      	subs	r3, #1
 800488e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8004890:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1de      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x13a>
 8004896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489c:	d1da      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x13a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e7d4      	b.n	8004854 <HAL_SPI_TransmitReceive+0x13a>
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
 80048ae:	07ce      	lsls	r6, r1, #31
 80048b0:	d5d3      	bpl.n	800485a <HAL_SPI_TransmitReceive+0x140>
      {
        if(hspi->RxXferCount > 1)
 80048b2:	2a01      	cmp	r2, #1
 80048b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048b6:	d910      	bls.n	80048da <HAL_SPI_TransmitReceive+0x1c0>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048b8:	68d9      	ldr	r1, [r3, #12]
 80048ba:	f822 1b02 	strh.w	r1, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048be:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 80048c0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80048c4:	3a02      	subs	r2, #2
 80048c6:	b292      	uxth	r2, r2
          if(hspi->RxXferCount <= 1)
 80048c8:	2a01      	cmp	r2, #1
      {
        if(hspi->RxXferCount > 1)
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr += sizeof(uint16_t);
          hspi->RxXferCount -= 2;
 80048ca:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 80048ce:	d8c4      	bhi.n	800485a <HAL_SPI_TransmitReceive+0x140>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048d6:	605a      	str	r2, [r3, #4]
 80048d8:	e7bf      	b.n	800485a <HAL_SPI_TransmitReceive+0x140>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 80048da:	1c51      	adds	r1, r2, #1
 80048dc:	6421      	str	r1, [r4, #64]	; 0x40
 80048de:	7b1b      	ldrb	r3, [r3, #12]
 80048e0:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 80048e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80048ec:	e7b5      	b.n	800485a <HAL_SPI_TransmitReceive+0x140>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 80048ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ae      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x13a>
 80048f6:	e79a      	b.n	800482e <HAL_SPI_TransmitReceive+0x114>
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 80048f8:	2102      	movs	r1, #2
 80048fa:	4620      	mov	r0, r4
 80048fc:	460a      	mov	r2, r1
 80048fe:	462b      	mov	r3, r5
 8004900:	f7ff fded 	bl	80044de <SPI_WaitFlagStateUntilTimeout>
 8004904:	b128      	cbz	r0, 8004912 <HAL_SPI_TransmitReceive+0x1f8>
    {  
      /* Erreur on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8004906:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    }
    
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004912:	68e3      	ldr	r3, [r4, #12]
 8004914:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	d102      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x208>
    {
      tmpreg = hspi->Instance->DR;
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	b29b      	uxth	r3, r3
 8004920:	e015      	b.n	800494e <HAL_SPI_TransmitReceive+0x234>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8004922:	7b1b      	ldrb	r3, [r3, #12]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004924:	6b21      	ldr	r1, [r4, #48]	; 0x30
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8004926:	b2db      	uxtb	r3, r3
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004928:	2902      	cmp	r1, #2
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800492a:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800492e:	d110      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x238>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 8004930:	4620      	mov	r0, r4
 8004932:	460a      	mov	r2, r1
 8004934:	462b      	mov	r3, r5
 8004936:	f7ff fdd2 	bl	80044de <SPI_WaitFlagStateUntilTimeout>
 800493a:	b128      	cbz	r0, 8004948 <HAL_SPI_TransmitReceive+0x22e>
        {  
          /* Erreur on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800493c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        }    
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	7b1b      	ldrb	r3, [r3, #12]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f8ad 3006 	strh.w	r3, [sp, #6]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7ff fe54 	bl	8004602 <SPI_EndRxTxTransaction>
 800495a:	b9e0      	cbnz	r0, 8004996 <HAL_SPI_TransmitReceive+0x27c>
  }

  hspi->State = HAL_SPI_STATE_READY;
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800495c:	6821      	ldr	r1, [r4, #0]
 800495e:	688b      	ldr	r3, [r1, #8]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004960:	2201      	movs	r2, #1
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004962:	f013 0510 	ands.w	r5, r3, #16
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004966:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
 800496a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800496e:	d00a      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x26c>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004978:	f06f 0310 	mvn.w	r3, #16
 800497c:	608b      	str	r3, [r1, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800497e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
    return HAL_ERROR;
 8004982:	4610      	mov	r0, r2
 8004984:	e008      	b.n	8004998 <HAL_SPI_TransmitReceive+0x27e>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 8004986:	1c18      	adds	r0, r3, #0
    
    return HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004988:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 800498c:	bf18      	it	ne
 800498e:	2001      	movne	r0, #1
 8004990:	e002      	b.n	8004998 <HAL_SPI_TransmitReceive+0x27e>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
 8004992:	4638      	mov	r0, r7
 8004994:	e000      	b.n	8004998 <HAL_SPI_TransmitReceive+0x27e>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 8004996:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8004998:	b003      	add	sp, #12
 800499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800499e <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800499e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80049a6:	2302      	movs	r3, #2
 80049a8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049ac:	6803      	ldr	r3, [r0, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 80049bc:	2000      	movs	r0, #0
 80049be:	4770      	bx	lr

080049c0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c0:	4a2a      	ldr	r2, [pc, #168]	; (8004a6c <TIM_Base_SetConfig+0xac>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80049c2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c4:	4290      	cmp	r0, r2
 80049c6:	d00e      	beq.n	80049e6 <TIM_Base_SetConfig+0x26>
 80049c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80049cc:	d00b      	beq.n	80049e6 <TIM_Base_SetConfig+0x26>
 80049ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80049d2:	4290      	cmp	r0, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_Base_SetConfig+0x26>
 80049d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049da:	4290      	cmp	r0, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_Base_SetConfig+0x26>
 80049de:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80049e2:	4290      	cmp	r0, r2
 80049e4:	d115      	bne.n	8004a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80049e6:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80049ec:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ee:	4a1f      	ldr	r2, [pc, #124]	; (8004a6c <TIM_Base_SetConfig+0xac>)
 80049f0:	4290      	cmp	r0, r2
 80049f2:	d019      	beq.n	8004a28 <TIM_Base_SetConfig+0x68>
 80049f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80049f8:	d016      	beq.n	8004a28 <TIM_Base_SetConfig+0x68>
 80049fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80049fe:	4290      	cmp	r0, r2
 8004a00:	d012      	beq.n	8004a28 <TIM_Base_SetConfig+0x68>
 8004a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a06:	4290      	cmp	r0, r2
 8004a08:	d00e      	beq.n	8004a28 <TIM_Base_SetConfig+0x68>
 8004a0a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004a0e:	4290      	cmp	r0, r2
 8004a10:	d00a      	beq.n	8004a28 <TIM_Base_SetConfig+0x68>
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <TIM_Base_SetConfig+0xb0>)
 8004a14:	4290      	cmp	r0, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0x68>
 8004a18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a1c:	4290      	cmp	r0, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0x68>
 8004a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a24:	4290      	cmp	r0, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a28:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2e:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8004a30:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a32:	688b      	ldr	r3, [r1, #8]
 8004a34:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004a36:	680b      	ldr	r3, [r1, #0]
 8004a38:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <TIM_Base_SetConfig+0xac>)
 8004a3c:	4298      	cmp	r0, r3
 8004a3e:	d00f      	beq.n	8004a60 <TIM_Base_SetConfig+0xa0>
 8004a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a44:	4298      	cmp	r0, r3
 8004a46:	d00b      	beq.n	8004a60 <TIM_Base_SetConfig+0xa0>
 8004a48:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004a4c:	4298      	cmp	r0, r3
 8004a4e:	d007      	beq.n	8004a60 <TIM_Base_SetConfig+0xa0>
 8004a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a54:	4298      	cmp	r0, r3
 8004a56:	d003      	beq.n	8004a60 <TIM_Base_SetConfig+0xa0>
 8004a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a5c:	4298      	cmp	r0, r3
 8004a5e:	d101      	bne.n	8004a64 <TIM_Base_SetConfig+0xa4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a60:	690b      	ldr	r3, [r1, #16]
 8004a62:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004a64:	2301      	movs	r3, #1
 8004a66:	6143      	str	r3, [r0, #20]
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40014000 	.word	0x40014000

08004a74 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004a74:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004a76:	4604      	mov	r4, r0
 8004a78:	b180      	cbz	r0, 8004a9c <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8004a7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004a7e:	b90b      	cbnz	r3, 8004a84 <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a80:	f7ff ff90 	bl	80049a4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004a84:	2302      	movs	r3, #2
 8004a86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004a8a:	6820      	ldr	r0, [r4, #0]
 8004a8c:	1d21      	adds	r1, r4, #4
 8004a8e:	f7ff ff97 	bl	80049c0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8004a98:	2000      	movs	r0, #0
 8004a9a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8004a9e:	bd10      	pop	{r4, pc}

08004aa0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa0:	6a03      	ldr	r3, [r0, #32]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004aaa:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aae:	6986      	ldr	r6, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	680c      	ldr	r4, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab2:	f426 3680 	bic.w	r6, r6, #65536	; 0x10000
 8004ab6:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aba:	4326      	orrs	r6, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004abc:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004abe:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ac2:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ac4:	4c1b      	ldr	r4, [pc, #108]	; (8004b34 <TIM_OC1_SetConfig+0x94>)
 8004ac6:	42a0      	cmp	r0, r4
 8004ac8:	d00f      	beq.n	8004aea <TIM_OC1_SetConfig+0x4a>
 8004aca:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004ace:	42a0      	cmp	r0, r4
 8004ad0:	d00b      	beq.n	8004aea <TIM_OC1_SetConfig+0x4a>
 8004ad2:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004ad6:	42a0      	cmp	r0, r4
 8004ad8:	d007      	beq.n	8004aea <TIM_OC1_SetConfig+0x4a>
 8004ada:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ade:	42a0      	cmp	r0, r4
 8004ae0:	d003      	beq.n	8004aea <TIM_OC1_SetConfig+0x4a>
 8004ae2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ae6:	42a0      	cmp	r0, r4
 8004ae8:	d11e      	bne.n	8004b28 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aea:	68cc      	ldr	r4, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aec:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af0:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004af2:	4c10      	ldr	r4, [pc, #64]	; (8004b34 <TIM_OC1_SetConfig+0x94>)
 8004af4:	42a0      	cmp	r0, r4
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004af6:	f023 0304 	bic.w	r3, r3, #4
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	d00f      	beq.n	8004b1c <TIM_OC1_SetConfig+0x7c>
 8004afc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004b00:	42a0      	cmp	r0, r4
 8004b02:	d00b      	beq.n	8004b1c <TIM_OC1_SetConfig+0x7c>
 8004b04:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d007      	beq.n	8004b1c <TIM_OC1_SetConfig+0x7c>
 8004b0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d003      	beq.n	8004b1c <TIM_OC1_SetConfig+0x7c>
 8004b14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b18:	42a0      	cmp	r0, r4
 8004b1a:	d105      	bne.n	8004b28 <TIM_OC1_SetConfig+0x88>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b1c:	698d      	ldr	r5, [r1, #24]
 8004b1e:	694c      	ldr	r4, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b24:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b26:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2a:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2c:	6186      	str	r6, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2e:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004b30:	6203      	str	r3, [r0, #32]
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	40012c00 	.word	0x40012c00

08004b38 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b38:	6a03      	ldr	r3, [r0, #32]
 8004b3a:	f023 0310 	bic.w	r3, r3, #16
 8004b3e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b40:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004b42:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b46:	6985      	ldr	r5, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004b48:	680c      	ldr	r4, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4a:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8004b4e:	f425 45e6 	bic.w	r5, r5, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004b52:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004b56:	688c      	ldr	r4, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b58:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004b5c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b60:	4c16      	ldr	r4, [pc, #88]	; (8004bbc <TIM_OC2_SetConfig+0x84>)
 8004b62:	42a0      	cmp	r0, r4
 8004b64:	d003      	beq.n	8004b6e <TIM_OC2_SetConfig+0x36>
 8004b66:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004b6a:	42a0      	cmp	r0, r4
 8004b6c:	d10d      	bne.n	8004b8a <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004b6e:	68cc      	ldr	r4, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004b74:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	4c10      	ldr	r4, [pc, #64]	; (8004bbc <TIM_OC2_SetConfig+0x84>)
 8004b7a:	42a0      	cmp	r0, r4
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	d00e      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x68>
 8004b82:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004b86:	42a0      	cmp	r0, r4
 8004b88:	d00a      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x68>
 8004b8a:	4c0d      	ldr	r4, [pc, #52]	; (8004bc0 <TIM_OC2_SetConfig+0x88>)
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d007      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x68>
 8004b90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b94:	42a0      	cmp	r0, r4
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x68>
 8004b98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b9c:	42a0      	cmp	r0, r4
 8004b9e:	d107      	bne.n	8004bb0 <TIM_OC2_SetConfig+0x78>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004ba0:	694c      	ldr	r4, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004ba6:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004baa:	698c      	ldr	r4, [r1, #24]
 8004bac:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb0:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb2:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb4:	6185      	str	r5, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb6:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004bb8:	6203      	str	r3, [r0, #32]
 8004bba:	bd30      	pop	{r4, r5, pc}
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40014000 	.word	0x40014000

08004bc4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bc4:	6a03      	ldr	r3, [r0, #32]
 8004bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bcc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004bce:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd2:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	680c      	ldr	r4, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004bd6:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 8004bda:	f025 0573 	bic.w	r5, r5, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bde:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004be0:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004be6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bea:	4c17      	ldr	r4, [pc, #92]	; (8004c48 <TIM_OC3_SetConfig+0x84>)
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d003      	beq.n	8004bf8 <TIM_OC3_SetConfig+0x34>
 8004bf0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d10d      	bne.n	8004c14 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004bf8:	68cc      	ldr	r4, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004bfe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004c02:	4c11      	ldr	r4, [pc, #68]	; (8004c48 <TIM_OC3_SetConfig+0x84>)
 8004c04:	42a0      	cmp	r0, r4
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	d00e      	beq.n	8004c2a <TIM_OC3_SetConfig+0x66>
 8004c0c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d00a      	beq.n	8004c2a <TIM_OC3_SetConfig+0x66>
 8004c14:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <TIM_OC3_SetConfig+0x88>)
 8004c16:	42a0      	cmp	r0, r4
 8004c18:	d007      	beq.n	8004c2a <TIM_OC3_SetConfig+0x66>
 8004c1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c1e:	42a0      	cmp	r0, r4
 8004c20:	d003      	beq.n	8004c2a <TIM_OC3_SetConfig+0x66>
 8004c22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c26:	42a0      	cmp	r0, r4
 8004c28:	d107      	bne.n	8004c3a <TIM_OC3_SetConfig+0x76>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8004c2a:	694c      	ldr	r4, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8004c30:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004c34:	698c      	ldr	r4, [r1, #24]
 8004c36:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c3c:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3e:	61c5      	str	r5, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c40:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004c42:	6203      	str	r3, [r0, #32]
 8004c44:	bd30      	pop	{r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40014000 	.word	0x40014000

08004c50 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c50:	6a03      	ldr	r3, [r0, #32]
 8004c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c56:	6203      	str	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c58:	b530      	push	{r4, r5, lr}

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004c5c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004c60:	680c      	ldr	r4, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c62:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004c66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004c6a:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004c6e:	688a      	ldr	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c70:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004c74:	ea45 3502 	orr.w	r5, r5, r2, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	4a0e      	ldr	r2, [pc, #56]	; (8004cb4 <TIM_OC4_SetConfig+0x64>)
 8004c7a:	4290      	cmp	r0, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_OC4_SetConfig+0x4e>
 8004c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c82:	4290      	cmp	r0, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_OC4_SetConfig+0x4e>
 8004c86:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004c8a:	4290      	cmp	r0, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_OC4_SetConfig+0x4e>
 8004c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c92:	4290      	cmp	r0, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_OC4_SetConfig+0x4e>
 8004c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c9a:	4290      	cmp	r0, r2
 8004c9c:	d104      	bne.n	8004ca8 <TIM_OC4_SetConfig+0x58>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004c9e:	694a      	ldr	r2, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004ca4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca8:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004caa:	684b      	ldr	r3, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cac:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cae:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004cb0:	6205      	str	r5, [r0, #32]
 8004cb2:	bd30      	pop	{r4, r5, pc}
 8004cb4:	40012c00 	.word	0x40012c00

08004cb8 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004cb8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004cba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004cbe:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004cc8:	d058      	beq.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0xc4>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_OCN_POLARITY(sConfig->OCNPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    
  switch (Channel)
 8004cd4:	2a0c      	cmp	r2, #12
 8004cd6:	d84b      	bhi.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0xb8>
 8004cd8:	e8df f002 	tbb	[pc, r2]
 8004cdc:	4a4a4a07 	.word	0x4a4a4a07
 8004ce0:	4a4a4a17 	.word	0x4a4a4a17
 8004ce4:	4a4a4a29 	.word	0x4a4a4a29
 8004ce8:	39          	.byte	0x39
 8004ce9:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cea:	6820      	ldr	r0, [r4, #0]
 8004cec:	f7ff fed8 	bl	8004aa0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	f042 0208 	orr.w	r2, r2, #8
 8004cf8:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	f022 0204 	bic.w	r2, r2, #4
 8004d00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d02:	6999      	ldr	r1, [r3, #24]
 8004d04:	692a      	ldr	r2, [r5, #16]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	e00f      	b.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x72>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	f7ff ff14 	bl	8004b38 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d10:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004d12:	6929      	ldr	r1, [r5, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d2a:	619a      	str	r2, [r3, #24]
    }
    break;
 8004d2c:	e020      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0xb8>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	f7ff ff48 	bl	8004bc4 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	f042 0208 	orr.w	r2, r2, #8
 8004d3c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	f022 0204 	bic.w	r2, r2, #4
 8004d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	692a      	ldr	r2, [r5, #16]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	e00f      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0xb6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	f7ff ff7e 	bl	8004c50 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d54:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004d56:	6929      	ldr	r1, [r5, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5e:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d6e:	61da      	str	r2, [r3, #28]
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8004d72:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8004d78:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8004d7c:	bd38      	pop	{r3, r4, r5, pc}

08004d7e <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d7e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8004d80:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d82:	6a04      	ldr	r4, [r0, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8004d84:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d86:	ea24 0303 	bic.w	r3, r4, r3
 8004d8a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8004d8c:	6a03      	ldr	r3, [r0, #32]
 8004d8e:	408a      	lsls	r2, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	6203      	str	r3, [r0, #32]
 8004d94:	bd10      	pop	{r4, pc}
	...

08004d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	6800      	ldr	r0, [r0, #0]
 8004da0:	f7ff ffed 	bl	8004d7e <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <HAL_TIM_PWM_Start+0x48>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x34>
 8004dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x34>
 8004db4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x34>
 8004dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x34>
 8004dc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d103      	bne.n	8004dd4 <HAL_TIM_PWM_Start+0x3c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8004ddc:	2000      	movs	r0, #0
 8004dde:	bd10      	pop	{r4, pc}
 8004de0:	40012c00 	.word	0x40012c00

08004de4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004de4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004de6:	b180      	cbz	r0, 8004e0a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004de8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004dec:	b113      	cbz	r3, 8004df4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004df4:	b109      	cbz	r1, 8004dfa <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004df6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8004e00:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004e02:	f000 fc87 	bl	8005714 <USBD_LL_Init>
  
  return USBD_OK; 
 8004e06:	2000      	movs	r0, #0
 8004e08:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004e0a:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8004e0c:	bd08      	pop	{r3, pc}

08004e0e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004e0e:	b119      	cbz	r1, 8004e18 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 8004e10:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8004e14:	2000      	movs	r0, #0
 8004e16:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004e18:	2002      	movs	r0, #2
  }
  
  return status;
}
 8004e1a:	4770      	bx	lr

08004e1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004e1c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004e1e:	f000 fcb7 	bl	8005790 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8004e22:	2000      	movs	r0, #0
 8004e24:	bd08      	pop	{r3, pc}

08004e26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e26:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8004e28:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004e2c:	b90b      	cbnz	r3, 8004e32 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004e2e:	2002      	movs	r0, #2
 8004e30:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4798      	blx	r3
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d1f9      	bne.n	8004e2e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8004e3a:	bd08      	pop	{r3, pc}

08004e3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e3c:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004e3e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4798      	blx	r3
  return USBD_OK;
}
 8004e46:	2000      	movs	r0, #0
 8004e48:	bd08      	pop	{r3, pc}

08004e4a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e4a:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e4c:	f500 7502 	add.w	r5, r0, #520	; 0x208
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e50:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e52:	4628      	mov	r0, r5
 8004e54:	f000 f8c9 	bl	8004fea <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004e5e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 8004e62:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8004e66:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004e6a:	f001 031f 	and.w	r3, r1, #31
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d00c      	beq.n	8004e8c <USBD_LL_SetupStage+0x42>
 8004e72:	d306      	bcc.n	8004e82 <USBD_LL_SetupStage+0x38>
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d10e      	bne.n	8004e96 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004e78:	4620      	mov	r0, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f000 f9f8 	bl	8005270 <USBD_StdEPReq>
    break;
 8004e80:	e00e      	b.n	8004ea0 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	f000 f8cf 	bl	8005028 <USBD_StdDevReq>
    break;
 8004e8a:	e009      	b.n	8004ea0 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f000 f9d6 	bl	8005240 <USBD_StdItfReq>
    break;
 8004e94:	e004      	b.n	8004ea0 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004e96:	4620      	mov	r0, r4
 8004e98:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e9c:	f000 fc90 	bl	80057c0 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}

08004ea4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004ea8:	bb09      	cbnz	r1, 8004eee <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004eaa:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d126      	bne.n	8004f00 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 8004eb2:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 8004eb6:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8004eba:	429d      	cmp	r5, r3
 8004ebc:	d90a      	bls.n	8004ed4 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8004ebe:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004ec0:	429d      	cmp	r5, r3
 8004ec2:	bf38      	it	cc
 8004ec4:	462b      	movcc	r3, r5
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8004ec6:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8004ec8:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	f000 fa6e 	bl	80053ae <USBD_CtlContinueRx>
 8004ed2:	e015      	b.n	8004f00 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004ed4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	b123      	cbz	r3, 8004ee6 <USBD_LL_DataOutStage+0x42>
 8004edc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004ee0:	2a03      	cmp	r2, #3
 8004ee2:	d100      	bne.n	8004ee6 <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004ee4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 fa6a 	bl	80053c0 <USBD_CtlSendStatus>
 8004eec:	e008      	b.n	8004f00 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004eee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	b123      	cbz	r3, 8004f00 <USBD_LL_DataOutStage+0x5c>
 8004ef6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004efa:	2a03      	cmp	r2, #3
 8004efc:	d100      	bne.n	8004f00 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004efe:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004f00:	2000      	movs	r0, #0
 8004f02:	bd38      	pop	{r3, r4, r5, pc}

08004f04 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d135      	bne.n	8004f78 <USBD_LL_DataInStage+0x74>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f0c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d129      	bne.n	8004f68 <USBD_LL_DataInStage+0x64>
    {
      if(pep->rem_length > pep->maxpacket)
 8004f14:	69c5      	ldr	r5, [r0, #28]
 8004f16:	6a03      	ldr	r3, [r0, #32]
 8004f18:	429d      	cmp	r5, r3
 8004f1a:	d906      	bls.n	8004f2a <USBD_LL_DataInStage+0x26>
      {
        pep->rem_length -=  pep->maxpacket;
 8004f1c:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 8004f1e:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8004f20:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	f000 fa2a 	bl	800537c <USBD_CtlContinueSendData>
 8004f28:	e01e      	b.n	8004f68 <USBD_LL_DataInStage+0x64>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004f2a:	6985      	ldr	r5, [r0, #24]
 8004f2c:	fbb5 f6f3 	udiv	r6, r5, r3
 8004f30:	fb03 5616 	mls	r6, r3, r6, r5
 8004f34:	b95e      	cbnz	r6, 8004f4e <USBD_LL_DataInStage+0x4a>
 8004f36:	429d      	cmp	r5, r3
 8004f38:	d309      	bcc.n	8004f4e <USBD_LL_DataInStage+0x4a>
           (pep->total_length >= pep->maxpacket) &&
 8004f3a:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 8004f3e:	429d      	cmp	r5, r3
 8004f40:	d205      	bcs.n	8004f4e <USBD_LL_DataInStage+0x4a>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004f42:	4632      	mov	r2, r6
 8004f44:	f000 fa1a 	bl	800537c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004f48:	f8c4 61f8 	str.w	r6, [r4, #504]	; 0x1f8
 8004f4c:	e00c      	b.n	8004f68 <USBD_LL_DataInStage+0x64>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004f4e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	b12b      	cbz	r3, 8004f62 <USBD_LL_DataInStage+0x5e>
 8004f56:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8004f5a:	2a03      	cmp	r2, #3
 8004f5c:	d101      	bne.n	8004f62 <USBD_LL_DataInStage+0x5e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 fa37 	bl	80053d6 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004f68:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10c      	bne.n	8004f8a <USBD_LL_DataInStage+0x86>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8004f76:	e008      	b.n	8004f8a <USBD_LL_DataInStage+0x86>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004f78:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	b123      	cbz	r3, 8004f8a <USBD_LL_DataInStage+0x86>
 8004f80:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004f84:	2a03      	cmp	r2, #3
 8004f86:	d100      	bne.n	8004f8a <USBD_LL_DataInStage+0x86>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004f88:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}

08004f8e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004f8e:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004f90:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004f92:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004f94:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f96:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	f000 fc00 	bl	800579e <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004f9e:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fa0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	2180      	movs	r1, #128	; 0x80
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f000 fbf8 	bl	800579e <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004fb4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fb8:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8004fba:	b12b      	cbz	r3, 8004fc8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004fbc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004fc0:	7921      	ldrb	r1, [r4, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8004fc8:	2000      	movs	r0, #0
 8004fca:	bd38      	pop	{r3, r4, r5, pc}

08004fcc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004fcc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004fce:	2000      	movs	r0, #0
 8004fd0:	4770      	bx	lr

08004fd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004fd2:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004fd8:	2a03      	cmp	r2, #3
 8004fda:	d104      	bne.n	8004fe6 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004fdc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	b103      	cbz	r3, 8004fe6 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004fe4:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	bd08      	pop	{r3, pc}

08004fea <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004fea:	780b      	ldrb	r3, [r1, #0]
 8004fec:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004fee:	784b      	ldrb	r3, [r1, #1]
 8004ff0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004ff2:	78ca      	ldrb	r2, [r1, #3]
 8004ff4:	788b      	ldrb	r3, [r1, #2]
 8004ff6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ffa:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004ffc:	794a      	ldrb	r2, [r1, #5]
 8004ffe:	790b      	ldrb	r3, [r1, #4]
 8005000:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005004:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005006:	79ca      	ldrb	r2, [r1, #7]
 8005008:	798b      	ldrb	r3, [r1, #6]
 800500a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800500e:	80c3      	strh	r3, [r0, #6]
 8005010:	4770      	bx	lr

08005012 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005012:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8005014:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005016:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8005018:	f000 fbd2 	bl	80057c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800501c:	4620      	mov	r0, r4
 800501e:	2100      	movs	r1, #0
}
 8005020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8005024:	f000 bbcc 	b.w	80057c0 <USBD_LL_StallEP>

08005028 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005028:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 800502a:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800502c:	4604      	mov	r4, r0
 800502e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8005030:	2b09      	cmp	r3, #9
 8005032:	f200 80fc 	bhi.w	800522e <USBD_StdDevReq+0x206>
 8005036:	e8df f013 	tbh	[pc, r3, lsl #1]
 800503a:	00ce      	.short	0x00ce
 800503c:	00fa00e5 	.word	0x00fa00e5
 8005040:	00fa00e1 	.word	0x00fa00e1
 8005044:	000a0077 	.word	0x000a0077
 8005048:	00bd00fa 	.word	0x00bd00fa
 800504c:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800504e:	886b      	ldrh	r3, [r5, #2]
 8005050:	0a1a      	lsrs	r2, r3, #8
 8005052:	3a01      	subs	r2, #1
 8005054:	2a06      	cmp	r2, #6
 8005056:	f200 80ea 	bhi.w	800522e <USBD_StdDevReq+0x206>
 800505a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800505e:	0007      	.short	0x0007
 8005060:	0018000b 	.word	0x0018000b
 8005064:	00e800e8 	.word	0x00e800e8
 8005068:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800506c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	e02c      	b.n	80050ce <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005074:	7c02      	ldrb	r2, [r0, #16]
 8005076:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800507a:	b90a      	cbnz	r2, 8005080 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	e000      	b.n	8005082 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	f10d 0006 	add.w	r0, sp, #6
 8005086:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005088:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800508a:	4601      	mov	r1, r0
 800508c:	e03c      	b.n	8005108 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b05      	cmp	r3, #5
 8005092:	f200 80cc 	bhi.w	800522e <USBD_StdDevReq+0x206>
 8005096:	e8df f003 	tbb	[pc, r3]
 800509a:	0703      	.short	0x0703
 800509c:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80050a0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	e012      	b.n	80050ce <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80050a8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	e00e      	b.n	80050ce <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80050b0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	e00a      	b.n	80050ce <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80050b8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	e006      	b.n	80050ce <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80050c0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	e002      	b.n	80050ce <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80050c8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	7c20      	ldrb	r0, [r4, #16]
 80050d0:	f10d 0106 	add.w	r1, sp, #6
 80050d4:	4798      	blx	r3
 80050d6:	e009      	b.n	80050ec <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80050d8:	7c03      	ldrb	r3, [r0, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 80a7 	bne.w	800522e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80050e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80050e4:	f10d 0006 	add.w	r0, sp, #6
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	4798      	blx	r3
 80050ec:	4601      	mov	r1, r0
 80050ee:	e00c      	b.n	800510a <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80050f0:	7c03      	ldrb	r3, [r0, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 809b 	bne.w	800522e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80050f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80050fc:	f10d 0006 	add.w	r0, sp, #6
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005104:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005106:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005108:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 800510a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8091 	beq.w	8005236 <USBD_StdDevReq+0x20e>
 8005114:	88ea      	ldrh	r2, [r5, #6]
 8005116:	2a00      	cmp	r2, #0
 8005118:	f000 808d 	beq.w	8005236 <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 800511c:	429a      	cmp	r2, r3
 800511e:	bf28      	it	cs
 8005120:	461a      	movcs	r2, r3
 8005122:	f8ad 2006 	strh.w	r2, [sp, #6]
 8005126:	e054      	b.n	80051d2 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005128:	88ab      	ldrh	r3, [r5, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d17f      	bne.n	800522e <USBD_StdDevReq+0x206>
 800512e:	88eb      	ldrh	r3, [r5, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d17c      	bne.n	800522e <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005134:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005138:	78ae      	ldrb	r6, [r5, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800513a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800513c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005140:	d075      	beq.n	800522e <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005142:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005146:	4631      	mov	r1, r6
 8005148:	f000 fb5b 	bl	8005802 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800514c:	4620      	mov	r0, r4
 800514e:	f000 f937 	bl	80053c0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005152:	b10e      	cbz	r6, 8005158 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005154:	2302      	movs	r3, #2
 8005156:	e000      	b.n	800515a <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005158:	2301      	movs	r3, #1
 800515a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800515e:	e06a      	b.n	8005236 <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005160:	78a9      	ldrb	r1, [r5, #2]
 8005162:	4e36      	ldr	r6, [pc, #216]	; (800523c <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005164:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005166:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005168:	d861      	bhi.n	800522e <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 800516a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800516e:	2b02      	cmp	r3, #2
 8005170:	d002      	beq.n	8005178 <USBD_StdDevReq+0x150>
 8005172:	2b03      	cmp	r3, #3
 8005174:	d008      	beq.n	8005188 <USBD_StdDevReq+0x160>
 8005176:	e05a      	b.n	800522e <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005178:	2900      	cmp	r1, #0
 800517a:	d054      	beq.n	8005226 <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800517c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800517e:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005180:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005182:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8005186:	e00f      	b.n	80051a8 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005188:	b931      	cbnz	r1, 8005198 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800518a:	2302      	movs	r3, #2
 800518c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005190:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005192:	f7ff fe53 	bl	8004e3c <USBD_ClrClassConfig>
 8005196:	e046      	b.n	8005226 <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8005198:	6841      	ldr	r1, [r0, #4]
 800519a:	2901      	cmp	r1, #1
 800519c:	d043      	beq.n	8005226 <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800519e:	b2c9      	uxtb	r1, r1
 80051a0:	f7ff fe4c 	bl	8004e3c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80051a4:	7831      	ldrb	r1, [r6, #0]
 80051a6:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7ff fe3c 	bl	8004e26 <USBD_SetClassConfig>
 80051ae:	2802      	cmp	r0, #2
 80051b0:	d139      	bne.n	8005226 <USBD_StdDevReq+0x1fe>
 80051b2:	e03c      	b.n	800522e <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 80051b4:	88ea      	ldrh	r2, [r5, #6]
 80051b6:	2a01      	cmp	r2, #1
 80051b8:	d139      	bne.n	800522e <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 80051ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <USBD_StdDevReq+0x1a2>
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d133      	bne.n	800522e <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 80051c6:	1d01      	adds	r1, r0, #4
 80051c8:	e015      	b.n	80051f6 <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 80051ca:	4601      	mov	r1, r0
 80051cc:	2300      	movs	r3, #0
 80051ce:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80051d2:	4620      	mov	r0, r4
 80051d4:	e00f      	b.n	80051f6 <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 80051d6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80051da:	3b02      	subs	r3, #2
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d826      	bhi.n	800522e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80051e0:	2301      	movs	r3, #1
 80051e2:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80051e4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80051e8:	b10b      	cbz	r3, 80051ee <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80051ea:	2303      	movs	r3, #3
 80051ec:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 80051ee:	4620      	mov	r0, r4
 80051f0:	f104 010c 	add.w	r1, r4, #12
 80051f4:	2202      	movs	r2, #2
 80051f6:	f000 f8b3 	bl	8005360 <USBD_CtlSendData>
 80051fa:	e01c      	b.n	8005236 <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80051fc:	886b      	ldrh	r3, [r5, #2]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d119      	bne.n	8005236 <USBD_StdDevReq+0x20e>
 8005202:	e008      	b.n	8005216 <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8005204:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005208:	3b02      	subs	r3, #2
 800520a:	2b01      	cmp	r3, #1
 800520c:	d80f      	bhi.n	800522e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800520e:	886b      	ldrh	r3, [r5, #2]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d110      	bne.n	8005236 <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8005214:	2300      	movs	r3, #0
 8005216:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800521a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800521e:	4620      	mov	r0, r4
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	4629      	mov	r1, r5
 8005224:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005226:	4620      	mov	r0, r4
 8005228:	f000 f8ca 	bl	80053c0 <USBD_CtlSendStatus>
 800522c:	e003      	b.n	8005236 <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7ff feee 	bl	8005012 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8005236:	2000      	movs	r0, #0
 8005238:	b002      	add	sp, #8
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	20000bf4 	.word	0x20000bf4

08005240 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005240:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8005242:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005246:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005248:	4604      	mov	r4, r0
 800524a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 800524c:	d10c      	bne.n	8005268 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800524e:	790b      	ldrb	r3, [r1, #4]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d809      	bhi.n	8005268 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8005254:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800525c:	88eb      	ldrh	r3, [r5, #6]
 800525e:	b92b      	cbnz	r3, 800526c <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8005260:	4620      	mov	r0, r4
 8005262:	f000 f8ad 	bl	80053c0 <USBD_CtlSendStatus>
 8005266:	e001      	b.n	800526c <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8005268:	f7ff fed3 	bl	8005012 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 800526c:	2000      	movs	r0, #0
 800526e:	bd38      	pop	{r3, r4, r5, pc}

08005270 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005270:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 8005272:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005274:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 8005276:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005278:	4604      	mov	r4, r0
 800527a:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800527c:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 800527e:	d010      	beq.n	80052a2 <USBD_StdEPReq+0x32>
 8005280:	d327      	bcc.n	80052d2 <USBD_StdEPReq+0x62>
 8005282:	2e03      	cmp	r6, #3
 8005284:	d14c      	bne.n	8005320 <USBD_StdEPReq+0xb0>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8005286:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800528a:	2a02      	cmp	r2, #2
 800528c:	d028      	beq.n	80052e0 <USBD_StdEPReq+0x70>
 800528e:	2a03      	cmp	r2, #3
 8005290:	d144      	bne.n	800531c <USBD_StdEPReq+0xac>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005292:	884a      	ldrh	r2, [r1, #2]
 8005294:	b99a      	cbnz	r2, 80052be <USBD_StdEPReq+0x4e>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005296:	065e      	lsls	r6, r3, #25
 8005298:	d011      	beq.n	80052be <USBD_StdEPReq+0x4e>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800529a:	4619      	mov	r1, r3
 800529c:	f000 fa90 	bl	80057c0 <USBD_LL_StallEP>
 80052a0:	e00d      	b.n	80052be <USBD_StdEPReq+0x4e>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80052a2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80052a6:	2a02      	cmp	r2, #2
 80052a8:	d01a      	beq.n	80052e0 <USBD_StdEPReq+0x70>
 80052aa:	2a03      	cmp	r2, #3
 80052ac:	d136      	bne.n	800531c <USBD_StdEPReq+0xac>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80052ae:	884a      	ldrh	r2, [r1, #2]
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d135      	bne.n	8005320 <USBD_StdEPReq+0xb0>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80052b4:	0659      	lsls	r1, r3, #25
 80052b6:	d008      	beq.n	80052ca <USBD_StdEPReq+0x5a>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80052b8:	4619      	mov	r1, r3
 80052ba:	f000 fa88 	bl	80057ce <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80052be:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80052c2:	4620      	mov	r0, r4
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	4629      	mov	r1, r5
 80052c8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f878 	bl	80053c0 <USBD_CtlSendStatus>
 80052d0:	e026      	b.n	8005320 <USBD_StdEPReq+0xb0>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 80052d2:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 80052d6:	2d02      	cmp	r5, #2
 80052d8:	d002      	beq.n	80052e0 <USBD_StdEPReq+0x70>
 80052da:	2d03      	cmp	r5, #3
 80052dc:	d006      	beq.n	80052ec <USBD_StdEPReq+0x7c>
 80052de:	e01d      	b.n	800531c <USBD_StdEPReq+0xac>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 80052e0:	065a      	lsls	r2, r3, #25
 80052e2:	d01d      	beq.n	8005320 <USBD_StdEPReq+0xb0>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80052e4:	4619      	mov	r1, r3
 80052e6:	f000 fa6b 	bl	80057c0 <USBD_LL_StallEP>
 80052ea:	e019      	b.n	8005320 <USBD_StdEPReq+0xb0>
 80052ec:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80052f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80052f4:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80052f8:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80052fa:	bf14      	ite	ne
 80052fc:	3514      	addne	r5, #20
 80052fe:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005302:	f000 fa6b 	bl	80057dc <USBD_LL_IsStallEP>
 8005306:	b110      	cbz	r0, 800530e <USBD_StdEPReq+0x9e>
      {
        pep->status = 0x0001;     
 8005308:	2301      	movs	r3, #1
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	e000      	b.n	8005310 <USBD_StdEPReq+0xa0>
      }
      else
      {
        pep->status = 0x0000;  
 800530e:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8005310:	4620      	mov	r0, r4
 8005312:	4629      	mov	r1, r5
 8005314:	2202      	movs	r2, #2
 8005316:	f000 f823 	bl	8005360 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 800531a:	e001      	b.n	8005320 <USBD_StdEPReq+0xb0>
      
    default:                         
      USBD_CtlError(pdev , req);
 800531c:	f7ff fe79 	bl	8005012 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8005320:	2000      	movs	r0, #0
 8005322:	bd70      	pop	{r4, r5, r6, pc}

08005324 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005324:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8005326:	b1d0      	cbz	r0, 800535e <USBD_GetString+0x3a>
 8005328:	2300      	movs	r3, #0
 800532a:	b2dc      	uxtb	r4, r3
 800532c:	3301      	adds	r3, #1
 800532e:	18c5      	adds	r5, r0, r3
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8005330:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005334:	2d00      	cmp	r5, #0
 8005336:	d1f8      	bne.n	800532a <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005338:	1c63      	adds	r3, r4, #1
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800533e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005340:	2303      	movs	r3, #3
 8005342:	704b      	strb	r3, [r1, #1]
 8005344:	3801      	subs	r0, #1
 8005346:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8005348:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800534c:	b13a      	cbz	r2, 800535e <USBD_GetString+0x3a>
    {
      unicode[idx++] = *desc++;
 800534e:	1c5c      	adds	r4, r3, #1
 8005350:	b2e4      	uxtb	r4, r4
 8005352:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 8005354:	3302      	adds	r3, #2
 8005356:	2200      	movs	r2, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	550a      	strb	r2, [r1, r4]
 800535c:	e7f4      	b.n	8005348 <USBD_GetString+0x24>
 800535e:	bd30      	pop	{r4, r5, pc}

08005360 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4613      	mov	r3, r2
 8005364:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005366:	2202      	movs	r2, #2
 8005368:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800536c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800536e:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005370:	2100      	movs	r1, #0
 8005372:	462a      	mov	r2, r5
 8005374:	f000 fa4c 	bl	8005810 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005378:	2000      	movs	r0, #0
 800537a:	bd38      	pop	{r3, r4, r5, pc}

0800537c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800537c:	b510      	push	{r4, lr}
 800537e:	460c      	mov	r4, r1
 8005380:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8005382:	2100      	movs	r1, #0
 8005384:	4622      	mov	r2, r4
 8005386:	f000 fa43 	bl	8005810 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800538a:	2000      	movs	r0, #0
 800538c:	bd10      	pop	{r4, pc}

0800538e <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800538e:	b538      	push	{r3, r4, r5, lr}
 8005390:	4613      	mov	r3, r2
 8005392:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005394:	2203      	movs	r2, #3
 8005396:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800539a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800539e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80053a2:	2100      	movs	r1, #0
 80053a4:	462a      	mov	r2, r5
 80053a6:	f000 fa3a 	bl	800581e <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80053aa:	2000      	movs	r0, #0
 80053ac:	bd38      	pop	{r3, r4, r5, pc}

080053ae <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80053ae:	b510      	push	{r4, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 80053b4:	2100      	movs	r1, #0
 80053b6:	4622      	mov	r2, r4
 80053b8:	f000 fa31 	bl	800581e <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80053bc:	2000      	movs	r0, #0
 80053be:	bd10      	pop	{r4, pc}

080053c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80053c0:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80053c2:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80053c4:	2304      	movs	r3, #4
 80053c6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80053ca:	460a      	mov	r2, r1
 80053cc:	460b      	mov	r3, r1
 80053ce:	f000 fa1f 	bl	8005810 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80053d2:	2000      	movs	r0, #0
 80053d4:	bd08      	pop	{r3, pc}

080053d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80053d6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80053d8:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80053da:	2305      	movs	r3, #5
 80053dc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80053e0:	460a      	mov	r2, r1
 80053e2:	460b      	mov	r3, r1
 80053e4:	f000 fa1b 	bl	800581e <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80053e8:	2000      	movs	r0, #0
 80053ea:	bd08      	pop	{r3, pc}

080053ec <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80053ec:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80053f0:	b11b      	cbz	r3, 80053fa <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80053f2:	2000      	movs	r0, #0
 80053f4:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80053f8:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80053fa:	2002      	movs	r0, #2
  }
}
 80053fc:	4770      	bx	lr

080053fe <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80053fe:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8005402:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8005404:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005408:	b15b      	cbz	r3, 8005422 <USBD_CDC_EP0_RxReady+0x24>
 800540a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800540e:	28ff      	cmp	r0, #255	; 0xff
 8005410:	d007      	beq.n	8005422 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005418:	4621      	mov	r1, r4
 800541a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800541c:	23ff      	movs	r3, #255	; 0xff
 800541e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8005422:	2000      	movs	r0, #0
 8005424:	bd10      	pop	{r4, pc}
	...

08005428 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005428:	2343      	movs	r3, #67	; 0x43
 800542a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800542c:	4800      	ldr	r0, [pc, #0]	; (8005430 <USBD_CDC_GetFSCfgDesc+0x8>)
 800542e:	4770      	bx	lr
 8005430:	20000018 	.word	0x20000018

08005434 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005434:	2343      	movs	r3, #67	; 0x43
 8005436:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005438:	4800      	ldr	r0, [pc, #0]	; (800543c <USBD_CDC_GetHSCfgDesc+0x8>)
 800543a:	4770      	bx	lr
 800543c:	200000e4 	.word	0x200000e4

08005440 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005440:	2343      	movs	r3, #67	; 0x43
 8005442:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005444:	4800      	ldr	r0, [pc, #0]	; (8005448 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005446:	4770      	bx	lr
 8005448:	200000a0 	.word	0x200000a0

0800544c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800544c:	230a      	movs	r3, #10
 800544e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005450:	4800      	ldr	r0, [pc, #0]	; (8005454 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005452:	4770      	bx	lr
 8005454:	20000094 	.word	0x20000094

08005458 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800545c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005460:	f000 f9e4 	bl	800582c <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005464:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005468:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800546c:	b14b      	cbz	r3, 8005482 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800546e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8005472:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800547c:	4798      	blx	r3

    return USBD_OK;
 800547e:	2000      	movs	r0, #0
 8005480:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8005482:	2002      	movs	r0, #2
  }
}
 8005484:	bd38      	pop	{r3, r4, r5, pc}

08005486 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005488:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800548a:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800548c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005490:	f001 0360 	and.w	r3, r1, #96	; 0x60
 8005494:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005496:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005498:	d120      	bne.n	80054dc <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800549a:	88e2      	ldrh	r2, [r4, #6]
 800549c:	7863      	ldrb	r3, [r4, #1]
 800549e:	b1ba      	cbz	r2, 80054d0 <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 80054a0:	0609      	lsls	r1, r1, #24
 80054a2:	d50b      	bpl.n	80054bc <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054a4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80054a8:	4618      	mov	r0, r3
 80054aa:	688f      	ldr	r7, [r1, #8]
 80054ac:	4629      	mov	r1, r5
 80054ae:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80054b0:	4630      	mov	r0, r6
 80054b2:	4629      	mov	r1, r5
 80054b4:	88e2      	ldrh	r2, [r4, #6]
 80054b6:	f7ff ff53 	bl	8005360 <USBD_CtlSendData>
 80054ba:	e00f      	b.n	80054dc <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80054bc:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80054c0:	88e3      	ldrh	r3, [r4, #6]
 80054c2:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 80054c6:	4629      	mov	r1, r5
 80054c8:	88e2      	ldrh	r2, [r4, #6]
 80054ca:	f7ff ff60 	bl	800538e <USBD_CtlPrepareRx>
 80054ce:	e005      	b.n	80054dc <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054d0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80054d4:	4618      	mov	r0, r3
 80054d6:	688c      	ldr	r4, [r1, #8]
 80054d8:	4611      	mov	r1, r2
 80054da:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 80054dc:	2000      	movs	r0, #0
 80054de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054e0 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80054e0:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80054e2:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80054e4:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80054e6:	f000 f964 	bl	80057b2 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80054ea:	2101      	movs	r1, #1
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 f960 	bl	80057b2 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80054f2:	4620      	mov	r0, r4
 80054f4:	2182      	movs	r1, #130	; 0x82
 80054f6:	f000 f95c 	bl	80057b2 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80054fa:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80054fe:	b153      	cbz	r3, 8005516 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005500:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005508:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800550c:	f000 f998 	bl	8005840 <USBD_static_free>
    pdev->pClassData = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8005516:	2000      	movs	r0, #0
 8005518:	bd10      	pop	{r4, pc}

0800551a <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800551c:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800551e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005520:	2181      	movs	r1, #129	; 0x81
 8005522:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005524:	b94b      	cbnz	r3, 800553a <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800552a:	f000 f938 	bl	800579e <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800552e:	4620      	mov	r0, r4
 8005530:	2101      	movs	r1, #1
 8005532:	2202      	movs	r2, #2
 8005534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005538:	e006      	b.n	8005548 <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800553a:	2340      	movs	r3, #64	; 0x40
 800553c:	f000 f92f 	bl	800579e <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005540:	4620      	mov	r0, r4
 8005542:	2101      	movs	r1, #1
 8005544:	2202      	movs	r2, #2
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	f000 f929 	bl	800579e <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800554c:	2182      	movs	r1, #130	; 0x82
 800554e:	2203      	movs	r2, #3
 8005550:	2308      	movs	r3, #8
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f923 	bl	800579e <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005558:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800555c:	f000 f96c 	bl	8005838 <USBD_static_malloc>
 8005560:	4605      	mov	r5, r0
 8005562:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8005566:	b1c8      	cbz	r0, 800559c <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005568:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005570:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005572:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8005576:	2600      	movs	r6, #0
 8005578:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800557c:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 800557e:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005582:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005584:	b92f      	cbnz	r7, 8005592 <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800558a:	f000 f948 	bl	800581e <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 800558e:	4638      	mov	r0, r7
 8005590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005592:	2340      	movs	r3, #64	; 0x40
 8005594:	f000 f943 	bl	800581e <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8005598:	4630      	mov	r0, r6
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 800559c:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 800559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080055a0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80055a0:	b119      	cbz	r1, 80055aa <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80055a2:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80055a6:	2000      	movs	r0, #0
 80055a8:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80055aa:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 80055ac:	4770      	bx	lr

080055ae <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80055ae:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80055b2:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 80055b4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80055b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 80055bc:	4770      	bx	lr

080055be <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80055be:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80055c2:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80055c4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 80055c8:	4770      	bx	lr

080055ca <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80055ca:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80055cc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80055d0:	b174      	cbz	r4, 80055f0 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 80055d2:	f8d4 5214 	ldr.w	r5, [r4, #532]	; 0x214
 80055d6:	b96d      	cbnz	r5, 80055f4 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80055d8:	f8b4 3210 	ldrh.w	r3, [r4, #528]	; 0x210
 80055dc:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 80055e0:	2181      	movs	r1, #129	; 0x81
 80055e2:	f000 f915 	bl	8005810 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
      return USBD_OK;
 80055ec:	4628      	mov	r0, r5
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80055f0:	2002      	movs	r0, #2
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80055f4:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80055f6:	bd38      	pop	{r3, r4, r5, pc}

080055f8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80055f8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80055fc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80055fe:	b163      	cbz	r3, 800561a <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005600:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005606:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005608:	b914      	cbnz	r4, 8005610 <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800560a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800560e:	e000      	b.n	8005612 <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005610:	2340      	movs	r3, #64	; 0x40
 8005612:	f000 f904 	bl	800581e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005616:	2000      	movs	r0, #0
 8005618:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 800561a:	2002      	movs	r0, #2
  }
}
 800561c:	bd10      	pop	{r4, pc}
	...

08005620 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 8005624:	4c24      	ldr	r4, [pc, #144]	; (80056b8 <HAL_PCD_MspInit+0x98>)
 8005626:	6963      	ldr	r3, [r4, #20]
 8005628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562c:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800562e:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8005630:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 8005632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005636:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8005638:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800563c:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563e:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005640:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8005644:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005646:	a901      	add	r1, sp, #4
 8005648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800564c:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800564e:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005652:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8005656:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005658:	f7fd fcaa 	bl	8002fb0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800565c:	4631      	mov	r1, r6
 800565e:	462a      	mov	r2, r5
 8005660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005664:	f7fd fd62 	bl	800312c <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005668:	2001      	movs	r0, #1
 800566a:	f7fd fc2d 	bl	8002ec8 <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800566e:	4631      	mov	r1, r6
 8005670:	2201      	movs	r2, #1
 8005672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005676:	f7fd fd59 	bl	800312c <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567a:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800567c:	a901      	add	r1, sp, #4
 800567e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005682:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8005684:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005686:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005688:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800568c:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800568e:	f7fd fc8f 	bl	8002fb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 8005692:	69e3      	ldr	r3, [r4, #28]
 8005694:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005698:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 800569a:	69a3      	ldr	r3, [r4, #24]
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80056a2:	2105      	movs	r1, #5
 80056a4:	462a      	mov	r2, r5
 80056a6:	2014      	movs	r0, #20
 80056a8:	f7fd fc2e 	bl	8002f08 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 80056ac:	2014      	movs	r0, #20
 80056ae:	f7fd fc5d 	bl	8002f6c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 80056b2:	b006      	add	sp, #24
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b8:	40021000 	.word	0x40021000

080056bc <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80056bc:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80056be:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 80056c2:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80056c6:	f7ff bbc0 	b.w	8004e4a <USBD_LL_SetupStage>

080056ca <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80056ca:	231c      	movs	r3, #28
 80056cc:	fb03 0301 	mla	r3, r3, r1, r0
 80056d0:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80056d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80056d8:	f7ff bbe4 	b.w	8004ea4 <USBD_LL_DataOutStage>

080056dc <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80056dc:	231c      	movs	r3, #28
 80056de:	fb03 0301 	mla	r3, r3, r1, r0
 80056e2:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80056e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e8:	f7ff bc0c 	b.w	8004f04 <USBD_LL_DataInStage>

080056ec <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80056ec:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80056f0:	f7ff bc6f 	b.w	8004fd2 <USBD_LL_SOF>

080056f4 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80056f4:	b510      	push	{r4, lr}
 80056f6:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80056f8:	2101      	movs	r1, #1
 80056fa:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80056fe:	f7ff fc65 	bl	8004fcc <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8005702:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 8005706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800570a:	f7ff bc40 	b.w	8004f8e <USBD_LL_Reset>

0800570e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800570e:	4770      	bx	lr

08005710 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005710:	4770      	bx	lr
	...

08005714 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8005714:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8005716:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8005718:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 800571a:	481c      	ldr	r0, [pc, #112]	; (800578c <USBD_LL_Init+0x78>)
  hpcd.Init.dev_endpoints = 8;
 800571c:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800571e:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8005720:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 8005724:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005728:	2202      	movs	r2, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800572a:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800572c:	6102      	str	r2, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800572e:	6082      	str	r2, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8005730:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 8005734:	f7fd fd03 	bl	800313e <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8005738:	4621      	mov	r1, r4
 800573a:	4622      	mov	r2, r4
 800573c:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	f7fe fbde 	bl	8003f02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	4622      	mov	r2, r4
 800574a:	460b      	mov	r3, r1
 800574c:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005750:	f7fe fbd7 	bl	8003f02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 8005754:	4622      	mov	r2, r4
 8005756:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800575a:	2181      	movs	r1, #129	; 0x81
 800575c:	23c0      	movs	r3, #192	; 0xc0
 800575e:	f7fe fbd0 	bl	8003f02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 8005762:	4622      	mov	r2, r4
 8005764:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005768:	2101      	movs	r1, #1
 800576a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800576e:	f7fe fbc8 	bl	8003f02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 8005772:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005776:	2182      	movs	r1, #130	; 0x82
 8005778:	4622      	mov	r2, r4
 800577a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800577e:	f7fe fbc0 	bl	8003f02 <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 8005782:	4620      	mov	r0, r4
 8005784:	bd38      	pop	{r3, r4, r5, pc}
 8005786:	bf00      	nop
 8005788:	40005c00 	.word	0x40005c00
 800578c:	20003c48 	.word	0x20003c48

08005790 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005790:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8005792:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005796:	f7fd fd18 	bl	80031ca <HAL_PCD_Start>
  return USBD_OK;
}
 800579a:	2000      	movs	r0, #0
 800579c:	bd08      	pop	{r3, pc}

0800579e <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800579e:	b510      	push	{r4, lr}
 80057a0:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 80057a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80057a6:	461a      	mov	r2, r3
 80057a8:	4623      	mov	r3, r4
 80057aa:	f7fd fd2a 	bl	8003202 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80057ae:	2000      	movs	r0, #0
 80057b0:	bd10      	pop	{r4, pc}

080057b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80057b2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80057b4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80057b8:	f7fd fec6 	bl	8003548 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80057bc:	2000      	movs	r0, #0
 80057be:	bd08      	pop	{r3, pc}

080057c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80057c0:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80057c2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80057c6:	f7fe fae7 	bl	8003d98 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80057ca:	2000      	movs	r0, #0
 80057cc:	bd08      	pop	{r3, pc}

080057ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80057ce:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80057d0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80057d4:	f7fe fb31 	bl	8003e3a <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80057d8:	2000      	movs	r0, #0
 80057da:	bd08      	pop	{r3, pc}

080057dc <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80057dc:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057e0:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 80057e4:	f04f 021c 	mov.w	r2, #28
  
  if((ep_addr & 0x80) == 0x80)
 80057e8:	d006      	beq.n	80057f8 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80057ea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80057ee:	fb02 3301 	mla	r3, r2, r1, r3
 80057f2:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80057f6:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80057f8:	fb02 3101 	mla	r1, r2, r1, r3
 80057fc:	f891 00b6 	ldrb.w	r0, [r1, #182]	; 0xb6
  }
}
 8005800:	4770      	bx	lr

08005802 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005802:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005804:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005808:	f7fd fce5 	bl	80031d6 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800580c:	2000      	movs	r0, #0
 800580e:	bd08      	pop	{r3, pc}

08005810 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8005810:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005812:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005816:	f7fd ffe2 	bl	80037de <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800581a:	2000      	movs	r0, #0
 800581c:	bd08      	pop	{r3, pc}

0800581e <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800581e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005820:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005824:	f7fd ff6b 	bl	80036fe <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8005828:	2000      	movs	r0, #0
 800582a:	bd08      	pop	{r3, pc}

0800582c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800582c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800582e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005832:	f7fd ffcc 	bl	80037ce <HAL_PCD_EP_GetRxCount>
}
 8005836:	bd08      	pop	{r3, pc}

08005838 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 8005838:	4800      	ldr	r0, [pc, #0]	; (800583c <USBD_static_malloc+0x4>)
 800583a:	4770      	bx	lr
 800583c:	20000bf8 	.word	0x20000bf8

08005840 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005840:	4770      	bx	lr
	...

08005844 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8005844:	2312      	movs	r3, #18
 8005846:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 8005848:	4800      	ldr	r0, [pc, #0]	; (800584c <USBD_VCP_DeviceDescriptor+0x8>)
 800584a:	4770      	bx	lr
 800584c:	0801b91d 	.word	0x0801b91d

08005850 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8005850:	2304      	movs	r3, #4
 8005852:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8005854:	4800      	ldr	r0, [pc, #0]	; (8005858 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8005856:	4770      	bx	lr
 8005858:	0801b8cc 	.word	0x0801b8cc

0800585c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800585c:	b510      	push	{r4, lr}
 800585e:	3101      	adds	r1, #1
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8005860:	2300      	movs	r3, #0
 8005862:	4293      	cmp	r3, r2
 8005864:	d00d      	beq.n	8005882 <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 8005866:	0f04      	lsrs	r4, r0, #28
 8005868:	2c09      	cmp	r4, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800586a:	bf94      	ite	ls
 800586c:	3430      	addls	r4, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800586e:	3437      	addhi	r4, #55	; 0x37
 8005870:	f801 4c01 	strb.w	r4, [r1, #-1]
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8005874:	3301      	adds	r3, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8005876:	2400      	movs	r4, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8005878:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 800587a:	f801 4b02 	strb.w	r4, [r1], #2
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e7ef      	b.n	8005862 <IntToUnicode+0x6>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8005882:	bd10      	pop	{r4, pc}

08005884 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 8005884:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005886:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005888:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <USBD_VCP_SerialStrDescriptor+0x2c>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800588c:	e893 0014 	ldmia.w	r3, {r2, r4}
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8005890:	3308      	adds	r3, #8
  
  deviceserial0 += deviceserial2;
 8005892:	681b      	ldr	r3, [r3, #0]
  
  if (deviceserial0 != 0)
 8005894:	18d0      	adds	r0, r2, r3
 8005896:	d008      	beq.n	80058aa <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8005898:	4906      	ldr	r1, [pc, #24]	; (80058b4 <USBD_VCP_SerialStrDescriptor+0x30>)
 800589a:	2208      	movs	r2, #8
 800589c:	f7ff ffde 	bl	800585c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80058a0:	4620      	mov	r0, r4
 80058a2:	4905      	ldr	r1, [pc, #20]	; (80058b8 <USBD_VCP_SerialStrDescriptor+0x34>)
 80058a4:	2204      	movs	r2, #4
 80058a6:	f7ff ffd9 	bl	800585c <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 80058aa:	4804      	ldr	r0, [pc, #16]	; (80058bc <USBD_VCP_SerialStrDescriptor+0x38>)
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	bf00      	nop
 80058b0:	1ffff7ac 	.word	0x1ffff7ac
 80058b4:	20000146 	.word	0x20000146
 80058b8:	20000156 	.word	0x20000156
 80058bc:	20000144 	.word	0x20000144

080058c0 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058c0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80058c2:	4c04      	ldr	r4, [pc, #16]	; (80058d4 <USBD_VCP_ProductStrDescriptor+0x14>)
 80058c4:	4804      	ldr	r0, [pc, #16]	; (80058d8 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058c6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80058c8:	4621      	mov	r1, r4
 80058ca:	f7ff fd2b 	bl	8005324 <USBD_GetString>
  return USBD_StrDesc;
}
 80058ce:	4620      	mov	r0, r4
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	bf00      	nop
 80058d4:	20003dc0 	.word	0x20003dc0
 80058d8:	0801b8d0 	.word	0x0801b8d0

080058dc <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058dc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80058de:	4c04      	ldr	r4, [pc, #16]	; (80058f0 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 80058e0:	4804      	ldr	r0, [pc, #16]	; (80058f4 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058e2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80058e4:	4621      	mov	r1, r4
 80058e6:	f7ff fd1d 	bl	8005324 <USBD_GetString>
  return USBD_StrDesc;
}
 80058ea:	4620      	mov	r0, r4
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	20003dc0 	.word	0x20003dc0
 80058f4:	0801b8f1 	.word	0x0801b8f1

080058f8 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058f8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80058fa:	4c04      	ldr	r4, [pc, #16]	; (800590c <USBD_VCP_ConfigStrDescriptor+0x14>)
 80058fc:	4804      	ldr	r0, [pc, #16]	; (8005910 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058fe:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8005900:	4621      	mov	r1, r4
 8005902:	f7ff fd0f 	bl	8005324 <USBD_GetString>
  return USBD_StrDesc;  
}
 8005906:	4620      	mov	r0, r4
 8005908:	bd10      	pop	{r4, pc}
 800590a:	bf00      	nop
 800590c:	20003dc0 	.word	0x20003dc0
 8005910:	0801b904 	.word	0x0801b904

08005914 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005914:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8005916:	4c04      	ldr	r4, [pc, #16]	; (8005928 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8005918:	4804      	ldr	r0, [pc, #16]	; (800592c <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800591a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800591c:	4621      	mov	r1, r4
 800591e:	f7ff fd01 	bl	8005324 <USBD_GetString>
  return USBD_StrDesc;  
}
 8005922:	4620      	mov	r0, r4
 8005924:	bd10      	pop	{r4, pc}
 8005926:	bf00      	nop
 8005928:	20003dc0 	.word	0x20003dc0
 800592c:	0801b90f 	.word	0x0801b90f

08005930 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 8005930:	2000      	movs	r0, #0
 8005932:	4770      	bx	lr

08005934 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8005934:	b508      	push	{r3, lr}
 8005936:	460b      	mov	r3, r1
 8005938:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800593a:	4611      	mov	r1, r2
 800593c:	2000      	movs	r0, #0
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	f7fc fb38 	bl	8001fb4 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 8005944:	4802      	ldr	r0, [pc, #8]	; (8005950 <CDC_Itf_Receive+0x1c>)
 8005946:	f7ff fe57 	bl	80055f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800594a:	2000      	movs	r0, #0
 800594c:	bd08      	pop	{r3, pc}
 800594e:	bf00      	nop
 8005950:	20003a20 	.word	0x20003a20

08005954 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8005954:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 8005956:	4903      	ldr	r1, [pc, #12]	; (8005964 <CDC_Itf_Init+0x10>)
 8005958:	4803      	ldr	r0, [pc, #12]	; (8005968 <CDC_Itf_Init+0x14>)
 800595a:	f7ff fe30 	bl	80055be <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 800595e:	2000      	movs	r0, #0
 8005960:	bd08      	pop	{r3, pc}
 8005962:	bf00      	nop
 8005964:	20003f30 	.word	0x20003f30
 8005968:	20003a20 	.word	0x20003a20

0800596c <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800596c:	2820      	cmp	r0, #32
 800596e:	d012      	beq.n	8005996 <CDC_Itf_Control+0x2a>
 8005970:	2821      	cmp	r0, #33	; 0x21
 8005972:	d122      	bne.n	80059ba <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <CDC_Itf_Control+0x54>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	0a12      	lsrs	r2, r2, #8
 800597e:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8005980:	885a      	ldrh	r2, [r3, #2]
 8005982:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8005984:	78da      	ldrb	r2, [r3, #3]
 8005986:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8005988:	791a      	ldrb	r2, [r3, #4]
 800598a:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800598c:	795a      	ldrb	r2, [r3, #5]
 800598e:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8005990:	799b      	ldrb	r3, [r3, #6]
 8005992:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 8005994:	e011      	b.n	80059ba <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8005996:	788a      	ldrb	r2, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005998:	7848      	ldrb	r0, [r1, #1]
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 800599c:	0412      	lsls	r2, r2, #16
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800599e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80059a2:	7808      	ldrb	r0, [r1, #0]
 80059a4:	4302      	orrs	r2, r0
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80059a6:	78c8      	ldrb	r0, [r1, #3]
 80059a8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80059ac:	601a      	str	r2, [r3, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 80059ae:	790a      	ldrb	r2, [r1, #4]
 80059b0:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 80059b2:	794a      	ldrb	r2, [r1, #5]
 80059b4:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 80059b6:	798a      	ldrb	r2, [r1, #6]
 80059b8:	719a      	strb	r2, [r3, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 80059ba:	2000      	movs	r0, #0
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000160 	.word	0x20000160

080059c4 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 80059c4:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80059c6:	4c1c      	ldr	r4, [pc, #112]	; (8005a38 <SPIx_Init+0x74>)
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 80059c8:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80059ca:	4620      	mov	r0, r4
 80059cc:	f7fe ffe7 	bl	800499e <HAL_SPI_GetState>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d12e      	bne.n	8005a32 <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80059d4:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <SPIx_Init+0x78>)
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80059d6:	60a0      	str	r0, [r4, #8]
static void SPIx_Init(void)
{
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80059d8:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80059da:	2318      	movs	r3, #24
 80059dc:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 80059de:	2307      	movs	r3, #7
 80059e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80059e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80059e6:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80059e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ec:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80059ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 80059f2:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80059f4:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <SPIx_Init+0x7c>)
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80059f6:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80059f8:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80059fa:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059fc:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80059fe:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a06:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005a0e:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8005a10:	23e0      	movs	r3, #224	; 0xe0
 8005a12:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005a14:	2302      	movs	r3, #2
 8005a16:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005a18:	2303      	movs	r3, #3
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8005a1a:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005a1c:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8005a22:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005a24:	a901      	add	r1, sp, #4
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8005a26:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005a28:	f7fd fac2 	bl	8002fb0 <HAL_GPIO_Init>
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;

    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7fe fe0a 	bl	8004646 <HAL_SPI_Init>
  }
}
 8005a32:	b006      	add	sp, #24
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	bf00      	nop
 8005a38:	20000e28 	.word	0x20000e28
 8005a3c:	40013000 	.word	0x40013000
 8005a40:	40021000 	.word	0x40021000

08005a44 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8005a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  uint8_t receivedbyte = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <SPIx_WriteRead+0x38>)
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8005a4e:	f88d 000f 	strb.w	r0, [sp, #15]

  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	480a      	ldr	r0, [pc, #40]	; (8005a80 <SPIx_WriteRead+0x3c>)
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	f10d 010f 	add.w	r1, sp, #15
 8005a5c:	f10d 0217 	add.w	r2, sp, #23
 8005a60:	2301      	movs	r3, #1
 8005a62:	f7fe fe5a 	bl	800471a <HAL_SPI_TransmitReceive>
 8005a66:	b120      	cbz	r0, 8005a72 <SPIx_WriteRead+0x2e>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8005a68:	4805      	ldr	r0, [pc, #20]	; (8005a80 <SPIx_WriteRead+0x3c>)
 8005a6a:	f7fe fe3f 	bl	80046ec <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8005a6e:	f7ff ffa9 	bl	80059c4 <SPIx_Init>
  {
    SPIx_Error();
  }
  
  return receivedbyte;
}
 8005a72:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8005a76:	b007      	add	sp, #28
 8005a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a7c:	20000178 	.word	0x20000178
 8005a80:	20000e28 	.word	0x20000e28

08005a84 <I2Cx_Init>:
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 8005a84:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8005a86:	4c16      	ldr	r4, [pc, #88]	; (8005ae0 <I2Cx_Init+0x5c>)
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 8005a88:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f7fe fd24 	bl	80044d8 <HAL_I2C_GetState>
 8005a90:	bb18      	cbnz	r0, 8005ada <I2Cx_Init+0x56>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <I2Cx_Init+0x60>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8005a94:	4d14      	ldr	r5, [pc, #80]	; (8005ae8 <I2Cx_Init+0x64>)
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8005a96:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8005a98:	2332      	movs	r3, #50	; 0x32
 8005a9a:	60a3      	str	r3, [r4, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a9c:	2301      	movs	r3, #1
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8005a9e:	6120      	str	r0, [r4, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8005aa0:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8005aa2:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8005aa4:	6220      	str	r0, [r4, #32]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005aa6:	60e3      	str	r3, [r4, #12]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8005aa8:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8005aaa:	4810      	ldr	r0, [pc, #64]	; (8005aec <I2Cx_Init+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab0:	616b      	str	r3, [r5, #20]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8005ab2:	23c0      	movs	r3, #192	; 0xc0
 8005ab4:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8005aba:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005abc:	2303      	movs	r3, #3
 8005abe:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8005ac0:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8005ac2:	eb0d 0103 	add.w	r1, sp, r3
  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8005ac6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8005ac8:	f7fd fa72 	bl	8002fb0 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8005acc:	69eb      	ldr	r3, [r5, #28]
 8005ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ad2:	61eb      	str	r3, [r5, #28]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f7fe fb9d 	bl	8004214 <HAL_I2C_Init>
  }
}
 8005ada:	b007      	add	sp, #28
 8005adc:	bd30      	pop	{r4, r5, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000e88 	.word	0x20000e88
 8005ae4:	40005400 	.word	0x40005400
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	48000400 	.word	0x48000400

08005af0 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005af0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005af2:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005af4:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005af6:	b168      	cbz	r0, 8005b14 <BSP_LED_Init+0x24>
 8005af8:	2801      	cmp	r0, #1
 8005afa:	d00b      	beq.n	8005b14 <BSP_LED_Init+0x24>
 8005afc:	2802      	cmp	r0, #2
 8005afe:	d009      	beq.n	8005b14 <BSP_LED_Init+0x24>
 8005b00:	2803      	cmp	r0, #3
 8005b02:	d007      	beq.n	8005b14 <BSP_LED_Init+0x24>
 8005b04:	2804      	cmp	r0, #4
 8005b06:	d005      	beq.n	8005b14 <BSP_LED_Init+0x24>
 8005b08:	2805      	cmp	r0, #5
 8005b0a:	d003      	beq.n	8005b14 <BSP_LED_Init+0x24>
 8005b0c:	2806      	cmp	r0, #6
 8005b0e:	d001      	beq.n	8005b14 <BSP_LED_Init+0x24>
 8005b10:	2807      	cmp	r0, #7
 8005b12:	d104      	bne.n	8005b1e <BSP_LED_Init+0x2e>
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <BSP_LED_Init+0x5c>)
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005b1c:	615a      	str	r2, [r3, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005b20:	4e0c      	ldr	r6, [pc, #48]	; (8005b54 <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005b22:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005b26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005b2a:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b30:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005b32:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005b34:	2303      	movs	r3, #3
 8005b36:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005b38:	f7fd fa3a 	bl	8002fb0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005b3c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b40:	4629      	mov	r1, r5
 8005b42:	2200      	movs	r2, #0
 8005b44:	f7fd faf2 	bl	800312c <HAL_GPIO_WritePin>
}
 8005b48:	b006      	add	sp, #24
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	0801b930 	.word	0x0801b930
 8005b54:	20000184 	.word	0x20000184

08005b58 <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005b58:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005b5a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005b5c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005b60:	4a03      	ldr	r2, [pc, #12]	; (8005b70 <BSP_LED_On+0x18>)
 8005b62:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f7fd bae0 	b.w	800312c <HAL_GPIO_WritePin>
 8005b6c:	20000184 	.word	0x20000184
 8005b70:	0801b930 	.word	0x0801b930

08005b74 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005b74:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005b76:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005b78:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005b7c:	4a03      	ldr	r2, [pc, #12]	; (8005b8c <BSP_LED_Off+0x18>)
 8005b7e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f7fd bad2 	b.w	800312c <HAL_GPIO_WritePin>
 8005b88:	20000184 	.word	0x20000184
 8005b8c:	0801b930 	.word	0x0801b930

08005b90 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005b90:	4a04      	ldr	r2, [pc, #16]	; (8005ba4 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005b92:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005b94:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005b98:	4a03      	ldr	r2, [pc, #12]	; (8005ba8 <BSP_LED_Toggle+0x18>)
 8005b9a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b9e:	f7fd baca 	b.w	8003136 <HAL_GPIO_TogglePin>
 8005ba2:	bf00      	nop
 8005ba4:	20000184 	.word	0x20000184
 8005ba8:	0801b930 	.word	0x0801b930

08005bac <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005bac:	b510      	push	{r4, lr}
 8005bae:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <BSP_PB_Init+0x68>)
 8005bb0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005bb2:	b918      	cbnz	r0, 8005bbc <BSP_PB_Init+0x10>
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005bba:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005bc4:	b969      	cbnz	r1, 8005be2 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bd4:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005bd6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005bda:	a901      	add	r1, sp, #4
 8005bdc:	f7fd f9e8 	bl	8002fb0 <HAL_GPIO_Init>
 8005be0:	e016      	b.n	8005c10 <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005be2:	2901      	cmp	r1, #1
 8005be4:	d114      	bne.n	8005c10 <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005be6:	2303      	movs	r3, #3
 8005be8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8005bea:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <BSP_PB_Init+0x70>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005bec:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8005bee:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005bf4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005bfa:	a901      	add	r1, sp, #4
 8005bfc:	f7fd f9d8 	bl	8002fb0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005c00:	2006      	movs	r0, #6
 8005c02:	210f      	movs	r1, #15
 8005c04:	4622      	mov	r2, r4
 8005c06:	f7fd f97f 	bl	8002f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005c0a:	2006      	movs	r0, #6
 8005c0c:	f7fd f9ae 	bl	8002f6c <HAL_NVIC_EnableIRQ>
  }
}
 8005c10:	b006      	add	sp, #24
 8005c12:	bd10      	pop	{r4, pc}
 8005c14:	40021000 	.word	0x40021000
 8005c18:	2000017c 	.word	0x2000017c
 8005c1c:	10110000 	.word	0x10110000

08005c20 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8005c20:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <BSP_PB_GetState+0x10>)
 8005c24:	2101      	movs	r1, #1
 8005c26:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005c2a:	f7fd fa79 	bl	8003120 <HAL_GPIO_ReadPin>
}
 8005c2e:	bd08      	pop	{r3, pc}
 8005c30:	2000017c 	.word	0x2000017c

08005c34 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8005c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005c38:	4c16      	ldr	r4, [pc, #88]	; (8005c94 <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8005c3a:	4d17      	ldr	r5, [pc, #92]	; (8005c98 <GYRO_IO_Init+0x64>)
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005c3c:	6963      	ldr	r3, [r4, #20]
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8005c3e:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c44:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005c46:	2600      	movs	r6, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8005c48:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005c4c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005c50:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8005c52:	4628      	mov	r0, r5
 8005c54:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8005c56:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005c5a:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005c5e:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005c60:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8005c62:	f7fd f9a5 	bl	8002fb0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8005c66:	4642      	mov	r2, r8
 8005c68:	4628      	mov	r0, r5
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	f7fd fa5e 	bl	800312c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8005c70:	6963      	ldr	r3, [r4, #20]
 8005c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c76:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005c78:	4628      	mov	r0, r5
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8005c7a:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005c7c:	a901      	add	r1, sp, #4
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8005c7e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005c80:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005c82:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8005c84:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005c86:	f7fd f993 	bl	8002fb0 <HAL_GPIO_Init>
  
  SPIx_Init();
 8005c8a:	f7ff fe9b 	bl	80059c4 <SPIx_Init>
}
 8005c8e:	b007      	add	sp, #28
 8005c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c94:	40021000 	.word	0x40021000
 8005c98:	48001000 	.word	0x48001000

08005c9c <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8005c9c:	2a01      	cmp	r2, #1
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8005c9e:	b570      	push	{r4, r5, r6, lr}
 8005ca0:	460d      	mov	r5, r1
 8005ca2:	4606      	mov	r6, r0
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8005ca4:	bf88      	it	hi
 8005ca6:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005caa:	480c      	ldr	r0, [pc, #48]	; (8005cdc <GYRO_IO_Write+0x40>)
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8005cac:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005cae:	2108      	movs	r1, #8
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f7fd fa3b 	bl	800312c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7ff fec4 	bl	8005a44 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8005cbc:	b134      	cbz	r4, 8005ccc <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 8005cbe:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 8005cc2:	3c01      	subs	r4, #1
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
  {
    SPIx_WriteRead(*pBuffer);
 8005cc4:	f7ff febe 	bl	8005a44 <SPIx_WriteRead>
    NumByteToWrite--;
 8005cc8:	b2a4      	uxth	r4, r4
 8005cca:	e7f7      	b.n	8005cbc <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005ccc:	4803      	ldr	r0, [pc, #12]	; (8005cdc <GYRO_IO_Write+0x40>)
 8005cce:	2108      	movs	r1, #8
 8005cd0:	2201      	movs	r2, #1
}
 8005cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005cd6:	f7fd ba29 	b.w	800312c <HAL_GPIO_WritePin>
 8005cda:	bf00      	nop
 8005cdc:	48001000 	.word	0x48001000

08005ce0 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8005ce0:	2a01      	cmp	r2, #1
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8005ce2:	b570      	push	{r4, r5, r6, lr}
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8005ce4:	bf8c      	ite	hi
 8005ce6:	f041 06c0 	orrhi.w	r6, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8005cea:	f041 0680 	orrls.w	r6, r1, #128	; 0x80
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8005cee:	4605      	mov	r5, r0
 8005cf0:	4614      	mov	r4, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005cf2:	480c      	ldr	r0, [pc, #48]	; (8005d24 <GYRO_IO_Read+0x44>)
 8005cf4:	2108      	movs	r1, #8
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f7fd fa18 	bl	800312c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f7ff fea1 	bl	8005a44 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8005d02:	b13c      	cbz	r4, 8005d14 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8005d04:	2000      	movs	r0, #0
 8005d06:	f7ff fe9d 	bl	8005a44 <SPIx_WriteRead>
    NumByteToRead--;
 8005d0a:	3c01      	subs	r4, #1
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8005d0c:	f805 0b01 	strb.w	r0, [r5], #1
    NumByteToRead--;
 8005d10:	b2a4      	uxth	r4, r4
 8005d12:	e7f6      	b.n	8005d02 <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005d14:	4803      	ldr	r0, [pc, #12]	; (8005d24 <GYRO_IO_Read+0x44>)
 8005d16:	2108      	movs	r1, #8
 8005d18:	2201      	movs	r2, #1
}  
 8005d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005d1e:	f7fd ba05 	b.w	800312c <HAL_GPIO_WritePin>
 8005d22:	bf00      	nop
 8005d24:	48001000 	.word	0x48001000

08005d28 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8005d28:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <COMPASSACCELERO_IO_Init+0x5c>)
 8005d2a:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8005d2c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8005d2e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005d32:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005d34:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005d36:	4d14      	ldr	r5, [pc, #80]	; (8005d88 <COMPASSACCELERO_IO_Init+0x60>)
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005d38:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8005d3c:	b086      	sub	sp, #24
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005d3e:	615a      	str	r2, [r3, #20]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8005d40:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005d42:	2400      	movs	r4, #0
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005d44:	eb0d 0103 	add.w	r1, sp, r3
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005d48:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005d4a:	4628      	mov	r0, r5
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8005d4c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005d4e:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005d50:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005d52:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005d54:	f7fd f92c 	bl	8002fb0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	2008      	movs	r0, #8
 8005d5e:	f7fd f8d3 	bl	8002f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8005d62:	2008      	movs	r0, #8
 8005d64:	f7fd f902 	bl	8002f6c <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8005d68:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	a901      	add	r1, sp, #4
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8005d6e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005d70:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005d72:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005d74:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005d76:	f7fd f91b 	bl	8002fb0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8005d7a:	f7ff fe83 	bl	8005a84 <I2Cx_Init>
}
 8005d7e:	b006      	add	sp, #24
 8005d80:	bd70      	pop	{r4, r5, r6, pc}
 8005d82:	bf00      	nop
 8005d84:	40021000 	.word	0x40021000
 8005d88:	48001000 	.word	0x48001000

08005d8c <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8005d8c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005d90:	480e      	ldr	r0, [pc, #56]	; (8005dcc <COMPASSACCELERO_IO_ITConfig+0x40>)
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005d92:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8005d94:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005d96:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005d9a:	615a      	str	r2, [r3, #20]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8005d9c:	2330      	movs	r3, #48	; 0x30
 8005d9e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <COMPASSACCELERO_IO_ITConfig+0x44>)
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005da2:	2400      	movs	r4, #0
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8005da4:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005da6:	a901      	add	r1, sp, #4
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005da8:	2303      	movs	r3, #3
 8005daa:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005dac:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005dae:	f7fd f8ff 	bl	8002fb0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 8005db2:	4621      	mov	r1, r4
 8005db4:	4622      	mov	r2, r4
 8005db6:	200a      	movs	r0, #10
 8005db8:	f7fd f8a6 	bl	8002f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8005dbc:	200a      	movs	r0, #10
 8005dbe:	f7fd f8d5 	bl	8002f6c <HAL_NVIC_EnableIRQ>
  
}
 8005dc2:	b006      	add	sp, #24
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	48001000 	.word	0x48001000
 8005dd0:	10110000 	.word	0x10110000

08005dd4 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	ab06      	add	r3, sp, #24
 8005dda:	4606      	mov	r6, r0
 8005ddc:	f803 2d01 	strb.w	r2, [r3, #-1]!
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8005de0:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <COMPASSACCELERO_IO_Write+0x34>)
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	6814      	ldr	r4, [r2, #0]
 8005dea:	4808      	ldr	r0, [pc, #32]	; (8005e0c <COMPASSACCELERO_IO_Write+0x38>)
 8005dec:	9402      	str	r4, [sp, #8]
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8005dee:	460d      	mov	r5, r1
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8005df0:	462a      	mov	r2, r5
 8005df2:	4631      	mov	r1, r6
 8005df4:	f7fe fa6e 	bl	80042d4 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005df8:	b120      	cbz	r0, 8005e04 <COMPASSACCELERO_IO_Write+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8005dfa:	4804      	ldr	r0, [pc, #16]	; (8005e0c <COMPASSACCELERO_IO_Write+0x38>)
 8005dfc:	f7fe fa53 	bl	80042a6 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8005e00:	f7ff fe40 	bl	8005a84 <I2Cx_Init>
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 8005e04:	b006      	add	sp, #24
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	20000180 	.word	0x20000180
 8005e0c:	20000e88 	.word	0x20000e88

08005e10 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8005e10:	b530      	push	{r4, r5, lr}
 8005e12:	b087      	sub	sp, #28
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 8005e14:	ab06      	add	r3, sp, #24
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8005e16:	460a      	mov	r2, r1
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f803 1d01 	strb.w	r1, [r3, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005e1e:	490a      	ldr	r1, [pc, #40]	; (8005e48 <COMPASSACCELERO_IO_Read+0x38>)
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	2301      	movs	r3, #1
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	680c      	ldr	r4, [r1, #0]
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8005e28:	4605      	mov	r5, r0
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005e2a:	9402      	str	r4, [sp, #8]
 8005e2c:	4807      	ldr	r0, [pc, #28]	; (8005e4c <COMPASSACCELERO_IO_Read+0x3c>)
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fe face 	bl	80043d0 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 8005e34:	b120      	cbz	r0, 8005e40 <COMPASSACCELERO_IO_Read+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8005e36:	4805      	ldr	r0, [pc, #20]	; (8005e4c <COMPASSACCELERO_IO_Read+0x3c>)
 8005e38:	f7fe fa35 	bl	80042a6 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8005e3c:	f7ff fe22 	bl	8005a84 <I2Cx_Init>
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 8005e40:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8005e44:	b007      	add	sp, #28
 8005e46:	bd30      	pop	{r4, r5, pc}
 8005e48:	20000180 	.word	0x20000180
 8005e4c:	20000e88 	.word	0x20000e88

08005e50 <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 8005e50:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8005e52:	4c09      	ldr	r4, [pc, #36]	; (8005e78 <BSP_ACCELERO_Init+0x28>)
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	4798      	blx	r3
 8005e58:	2833      	cmp	r0, #51	; 0x33
 8005e5a:	d10b      	bne.n	8005e74 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8005e5c:	4d07      	ldr	r5, [pc, #28]	; (8005e7c <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005e5e:	6823      	ldr	r3, [r4, #0]
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8005e60:	602c      	str	r4, [r5, #0]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005e62:	f640 0047 	movw	r0, #2119	; 0x847
 8005e66:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	2090      	movs	r0, #144	; 0x90
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8005e70:	2000      	movs	r0, #0
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 8005e74:	2001      	movs	r0, #1
  }

  return ret;
}
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	200001a4 	.word	0x200001a4
 8005e7c:	20000ec0 	.word	0x20000ec0

08005e80 <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointeur on 3 angular accelerations 
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8005e80:	b508      	push	{r3, lr}
  if(AccelerometerDrv->GetXYZ!= NULL)
 8005e82:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <BSP_ACCELERO_GetXYZ+0x10>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	b103      	cbz	r3, 8005e8c <BSP_ACCELERO_GetXYZ+0xc>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8005e8a:	4798      	blx	r3
 8005e8c:	bd08      	pop	{r3, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000ec0 	.word	0x20000ec0

08005e94 <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8005e94:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8005e96:	4c0e      	ldr	r4, [pc, #56]	; (8005ed0 <BSP_GYRO_Init+0x3c>)
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	4798      	blx	r3
 8005e9c:	28d4      	cmp	r0, #212	; 0xd4
 8005e9e:	4625      	mov	r5, r4
 8005ea0:	d10f      	bne.n	8005ec2 <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8005ea2:	4c0c      	ldr	r4, [pc, #48]	; (8005ed4 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8005ea4:	682b      	ldr	r3, [r5, #0]
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8005ea6:	6025      	str	r5, [r4, #0]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8005ea8:	f241 003f 	movw	r0, #4159	; 0x103f
 8005eac:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	2010      	movs	r0, #16
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	4798      	blx	r3
	
    ret = GYRO_OK;
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	4798      	blx	r3
 8005ec6:	28d5      	cmp	r0, #213	; 0xd5
 8005ec8:	d0eb      	beq.n	8005ea2 <BSP_GYRO_Init+0xe>
	
    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 8005eca:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	200001d0 	.word	0x200001d0
 8005ed4:	20000ec4 	.word	0x20000ec4

08005ed8 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8005ed8:	b508      	push	{r3, lr}
  if(GyroscopeDrv->GetXYZ!= NULL)
 8005eda:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <BSP_GYRO_GetXYZ+0x10>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	b103      	cbz	r3, 8005ee4 <BSP_GYRO_GetXYZ+0xc>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8005ee2:	4798      	blx	r3
 8005ee4:	bd08      	pop	{r3, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000ec4 	.word	0x20000ec4

08005eec <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005ef0:	f7ff ff1a 	bl	8005d28 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8005ef4:	b2e2      	uxtb	r2, r4
 8005ef6:	2032      	movs	r0, #50	; 0x32
 8005ef8:	2120      	movs	r1, #32
 8005efa:	f7ff ff6b 	bl	8005dd4 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8005efe:	2032      	movs	r0, #50	; 0x32
 8005f00:	2123      	movs	r1, #35	; 0x23
 8005f02:	2200      	movs	r2, #0
}
 8005f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8005f08:	f7ff bf64 	b.w	8005dd4 <COMPASSACCELERO_IO_Write>

08005f0c <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8005f0c:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005f0e:	f7ff ff0b 	bl	8005d28 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8005f12:	2032      	movs	r0, #50	; 0x32
 8005f14:	210f      	movs	r1, #15

  return ctrl;
}
 8005f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8005f1a:	f7ff bf79 	b.w	8005e10 <COMPASSACCELERO_IO_Read>

08005f1e <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8005f1e:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005f20:	2124      	movs	r1, #36	; 0x24
 8005f22:	2032      	movs	r0, #50	; 0x32
 8005f24:	f7ff ff74 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8005f28:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8005f2c:	2124      	movs	r1, #36	; 0x24
 8005f2e:	2032      	movs	r0, #50	; 0x32
 8005f30:	b2d2      	uxtb	r2, r2
}
 8005f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8005f36:	f7ff bf4d 	b.w	8005dd4 <COMPASSACCELERO_IO_Write>

08005f3a <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8005f3a:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005f3c:	2121      	movs	r1, #33	; 0x21
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8005f3e:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005f40:	2032      	movs	r0, #50	; 0x32
 8005f42:	f7ff ff65 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8005f46:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005f4a:	4322      	orrs	r2, r4
 8005f4c:	2032      	movs	r0, #50	; 0x32
 8005f4e:	2121      	movs	r1, #33	; 0x21
}
 8005f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  tmpreg &= 0x0C;
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005f54:	f7ff bf3e 	b.w	8005dd4 <COMPASSACCELERO_IO_Write>

08005f58 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8005f58:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005f5a:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8005f5c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005f5e:	2032      	movs	r0, #50	; 0x32
 8005f60:	f7ff ff56 	bl	8005e10 <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 8005f64:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005f68:	4322      	orrs	r2, r4
 8005f6a:	2032      	movs	r0, #50	; 0x32
 8005f6c:	2121      	movs	r1, #33	; 0x21
}
 8005f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= 0xF7;

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005f72:	f7ff bf2f 	b.w	8005dd4 <COMPASSACCELERO_IO_Write>

08005f76 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8005f76:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8005f78:	2123      	movs	r1, #35	; 0x23
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8005f7e:	2032      	movs	r0, #50	; 0x32
 8005f80:	f7ff ff46 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005f84:	2124      	movs	r1, #36	; 0x24
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8005f86:	4605      	mov	r5, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005f88:	2032      	movs	r0, #50	; 0x32
 8005f8a:	f7ff ff41 	bl	8005e10 <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8005f8e:	2128      	movs	r1, #40	; 0x28
 8005f90:	2032      	movs	r0, #50	; 0x32
 8005f92:	f7ff ff3d 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8005f96:	2129      	movs	r1, #41	; 0x29
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8005f98:	f88d 0008 	strb.w	r0, [sp, #8]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8005f9c:	2032      	movs	r0, #50	; 0x32
 8005f9e:	f7ff ff37 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8005fa2:	212a      	movs	r1, #42	; 0x2a
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8005fa4:	f88d 0009 	strb.w	r0, [sp, #9]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8005fa8:	2032      	movs	r0, #50	; 0x32
 8005faa:	f7ff ff31 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8005fae:	212b      	movs	r1, #43	; 0x2b
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8005fb0:	f88d 000a 	strb.w	r0, [sp, #10]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8005fb4:	2032      	movs	r0, #50	; 0x32
 8005fb6:	f7ff ff2b 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8005fba:	212c      	movs	r1, #44	; 0x2c

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8005fbc:	f88d 000b 	strb.w	r0, [sp, #11]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8005fc0:	2032      	movs	r0, #50	; 0x32
 8005fc2:	f7ff ff25 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8005fc6:	212d      	movs	r1, #45	; 0x2d
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8005fc8:	f88d 000c 	strb.w	r0, [sp, #12]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8005fcc:	2032      	movs	r0, #50	; 0x32
 8005fce:	f7ff ff1f 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8005fd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fd6:	f99d 1009 	ldrsb.w	r1, [sp, #9]
 8005fda:	f99d 6008 	ldrsb.w	r6, [sp, #8]
 8005fde:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8005fe2:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8005fe6:	f99d 700c 	ldrsb.w	r7, [sp, #12]
 8005fea:	b240      	sxtb	r0, r0
 8005fec:	d119      	bne.n	8006022 <LSM303DLHC_AccReadXYZ+0xac>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8005fee:	b289      	uxth	r1, r1
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	b280      	uxth	r0, r0
 8005ff4:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 8005ff8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8005ffc:	eb07 2700 	add.w	r7, r7, r0, lsl #8
 8006000:	f8ad 6000 	strh.w	r6, [sp]
 8006004:	f8ad 2002 	strh.w	r2, [sp, #2]
 8006008:	f8ad 7004 	strh.w	r7, [sp, #4]
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800600c:	f005 0330 	and.w	r3, r5, #48	; 0x30
 8006010:	2b20      	cmp	r3, #32
 8006012:	d016      	beq.n	8006042 <LSM303DLHC_AccReadXYZ+0xcc>
 8006014:	2b30      	cmp	r3, #48	; 0x30
 8006016:	d016      	beq.n	8006046 <LSM303DLHC_AccReadXYZ+0xd0>
{
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8006018:	2b10      	cmp	r3, #16
 800601a:	bf0c      	ite	eq
 800601c:	2302      	moveq	r3, #2
 800601e:	2301      	movne	r3, #1
 8006020:	e012      	b.n	8006048 <LSM303DLHC_AccReadXYZ+0xd2>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8006022:	b2b6      	uxth	r6, r6
 8006024:	b292      	uxth	r2, r2
 8006026:	b2bf      	uxth	r7, r7
 8006028:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 800602c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006030:	eb00 2007 	add.w	r0, r0, r7, lsl #8
 8006034:	f8ad 1000 	strh.w	r1, [sp]
 8006038:	f8ad 3002 	strh.w	r3, [sp, #2]
 800603c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8006040:	e7e4      	b.n	800600c <LSM303DLHC_AccReadXYZ+0x96>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8006042:	2304      	movs	r3, #4
    break;
 8006044:	e000      	b.n	8006048 <LSM303DLHC_AccReadXYZ+0xd2>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8006046:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8006048:	f8bd 2000 	ldrh.w	r2, [sp]
 800604c:	435a      	muls	r2, r3
 800604e:	8022      	strh	r2, [r4, #0]
 8006050:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8006054:	435a      	muls	r2, r3
 8006056:	8062      	strh	r2, [r4, #2]
 8006058:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800605c:	4353      	muls	r3, r2
 800605e:	80a3      	strh	r3, [r4, #4]
  }

}
 8006060:	b005      	add	sp, #20
 8006062:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006064 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8006064:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8006066:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8006068:	4604      	mov	r4, r0
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800606a:	2032      	movs	r0, #50	; 0x32
 800606c:	f7ff fed0 	bl	8005e10 <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8006070:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8006074:	4322      	orrs	r2, r4
 8006076:	2032      	movs	r0, #50	; 0x32
 8006078:	2121      	movs	r1, #33	; 0x21
}
 800607a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800607e:	f7ff bea9 	b.w	8005dd4 <COMPASSACCELERO_IO_Write>

08006082 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8006082:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8006084:	2122      	movs	r1, #34	; 0x22
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8006086:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8006088:	2032      	movs	r0, #50	; 0x32
 800608a:	f7ff fec1 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800608e:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8006092:	2122      	movs	r1, #34	; 0x22
 8006094:	2032      	movs	r0, #50	; 0x32
 8006096:	b2d2      	uxtb	r2, r2
}
 8006098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800609c:	f7ff be9a 	b.w	8005dd4 <COMPASSACCELERO_IO_Write>

080060a0 <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80060a0:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80060a2:	2138      	movs	r1, #56	; 0x38
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80060a4:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80060a6:	2032      	movs	r0, #50	; 0x32
 80060a8:	f7ff feb2 	bl	8005e10 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80060ac:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80060b0:	2138      	movs	r1, #56	; 0x38
 80060b2:	2032      	movs	r0, #50	; 0x32
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	f7ff fe8d 	bl	8005dd4 <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80060ba:	2032      	movs	r0, #50	; 0x32
 80060bc:	213a      	movs	r1, #58	; 0x3a
 80060be:	220a      	movs	r2, #10
 80060c0:	f7ff fe88 	bl	8005dd4 <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80060c4:	2032      	movs	r0, #50	; 0x32
 80060c6:	213b      	movs	r1, #59	; 0x3b
 80060c8:	2205      	movs	r2, #5
 80060ca:	f7ff fe83 	bl	8005dd4 <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80060ce:	2032      	movs	r0, #50	; 0x32
 80060d0:	213c      	movs	r1, #60	; 0x3c
 80060d2:	2205      	movs	r2, #5
 80060d4:	f7ff fe7e 	bl	8005dd4 <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80060d8:	2032      	movs	r0, #50	; 0x32
 80060da:	213d      	movs	r1, #61	; 0x3d
 80060dc:	4602      	mov	r2, r0

}
 80060de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80060e2:	f7ff be77 	b.w	8005dd4 <COMPASSACCELERO_IO_Write>

080060e6 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80060e6:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80060e8:	f7ff fe50 	bl	8005d8c <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80060ec:	2080      	movs	r0, #128	; 0x80
 80060ee:	f7ff ffc8 	bl	8006082 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80060f2:	2004      	movs	r0, #4
 80060f4:	f7ff ffb6 	bl	8006064 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80060f8:	2010      	movs	r0, #16
  
}
 80060fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80060fe:	f7ff bfcf 	b.w	80060a0 <LSM303DLHC_AccClickITEnable>

08006102 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8006102:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8006104:	ac02      	add	r4, sp, #8
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
  uint8_t ctrl = 0x00;
 8006106:	2300      	movs	r3, #0
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8006108:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 800610a:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 800610e:	f7ff fd91 	bl	8005c34 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8006112:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8006116:	2120      	movs	r1, #32
 8006118:	4620      	mov	r0, r4
 800611a:	2201      	movs	r2, #1
 800611c:	f7ff fdbe 	bl	8005c9c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8006120:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8006122:	4620      	mov	r0, r4
 8006124:	2123      	movs	r1, #35	; 0x23
 8006126:	2201      	movs	r2, #1
  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8006128:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800612c:	f7ff fdb6 	bl	8005c9c <GYRO_IO_Write>
}
 8006130:	b003      	add	sp, #12
 8006132:	bd30      	pop	{r4, r5, pc}

08006134 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8006134:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8006136:	f7ff fd7d 	bl	8005c34 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800613a:	f10d 0007 	add.w	r0, sp, #7
 800613e:	210f      	movs	r1, #15
 8006140:	2201      	movs	r2, #1
 8006142:	f7ff fdcd 	bl	8005ce0 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 8006146:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800614a:	b003      	add	sp, #12
 800614c:	f85d fb04 	ldr.w	pc, [sp], #4

08006150 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8006150:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8006152:	2124      	movs	r1, #36	; 0x24
 8006154:	f10d 0007 	add.w	r0, sp, #7
 8006158:	2201      	movs	r2, #1
 800615a:	f7ff fdc1 	bl	8005ce0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800615e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8006162:	f10d 0007 	add.w	r0, sp, #7
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8006166:	f063 037f 	orn	r3, r3, #127	; 0x7f
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800616a:	2124      	movs	r1, #36	; 0x24
 800616c:	2201      	movs	r2, #1
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800616e:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8006172:	f7ff fd93 	bl	8005c9c <GYRO_IO_Write>
}
 8006176:	b003      	add	sp, #12
 8006178:	f85d fb04 	ldr.w	pc, [sp], #4

0800617c <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800617c:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800617e:	2300      	movs	r3, #0
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8006180:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8006182:	2130      	movs	r1, #48	; 0x30
 8006184:	f10d 0006 	add.w	r0, sp, #6
 8006188:	2201      	movs	r2, #1
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800618a:	f88d 3006 	strb.w	r3, [sp, #6]
 800618e:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8006192:	f7ff fda5 	bl	8005ce0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8006196:	f10d 0007 	add.w	r0, sp, #7
 800619a:	2122      	movs	r1, #34	; 0x22
 800619c:	2201      	movs	r2, #1
 800619e:	f7ff fd9f 	bl	8005ce0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80061a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80061a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80061aa:	f88d 3006 	strb.w	r3, [sp, #6]
  
  ctrl3 &= 0xDF;
 80061ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061b2:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 80061b6:	431c      	orrs	r4, r3
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80061b8:	f10d 0006 	add.w	r0, sp, #6
 80061bc:	2130      	movs	r1, #48	; 0x30
 80061be:	2201      	movs	r2, #1
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 80061c0:	f88d 4007 	strb.w	r4, [sp, #7]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80061c4:	f7ff fd6a 	bl	8005c9c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80061c8:	f10d 0007 	add.w	r0, sp, #7
 80061cc:	2122      	movs	r1, #34	; 0x22
 80061ce:	2201      	movs	r2, #1
 80061d0:	f7ff fd64 	bl	8005c9c <GYRO_IO_Write>
}
 80061d4:	b002      	add	sp, #8
 80061d6:	bd10      	pop	{r4, pc}

080061d8 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80061d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80061da:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80061dc:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80061de:	2122      	movs	r1, #34	; 0x22
 80061e0:	f10d 0007 	add.w	r0, sp, #7
 80061e4:	f7ff fd7c 	bl	8005ce0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80061e8:	b924      	cbnz	r4, 80061f4 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 80061ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80061ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061f2:	e007      	b.n	8006204 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 80061f4:	2c01      	cmp	r4, #1
 80061f6:	d107      	bne.n	8006208 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
 80061f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061fc:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8006200:	f043 0308 	orr.w	r3, r3, #8
 8006204:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006208:	f10d 0007 	add.w	r0, sp, #7
 800620c:	2122      	movs	r1, #34	; 0x22
 800620e:	2201      	movs	r2, #1
 8006210:	f7ff fd44 	bl	8005c9c <GYRO_IO_Write>
}
 8006214:	b002      	add	sp, #8
 8006216:	bd10      	pop	{r4, pc}

08006218 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8006218:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800621a:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800621c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800621e:	2122      	movs	r1, #34	; 0x22
 8006220:	f10d 0007 	add.w	r0, sp, #7
 8006224:	f7ff fd5c 	bl	8005ce0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8006228:	b924      	cbnz	r4, 8006234 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 800622a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800622e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006232:	e005      	b.n	8006240 <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 8006234:	2c01      	cmp	r4, #1
 8006236:	d105      	bne.n	8006244 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 8006238:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800623c:	f023 0308 	bic.w	r3, r3, #8
 8006240:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006244:	f10d 0007 	add.w	r0, sp, #7
 8006248:	2122      	movs	r1, #34	; 0x22
 800624a:	2201      	movs	r2, #1
 800624c:	f7ff fd26 	bl	8005c9c <GYRO_IO_Write>
}
 8006250:	b002      	add	sp, #8
 8006252:	bd10      	pop	{r4, pc}

08006254 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8006254:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8006256:	2201      	movs	r2, #1
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8006258:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800625a:	2121      	movs	r1, #33	; 0x21
 800625c:	f10d 0007 	add.w	r0, sp, #7
 8006260:	f7ff fd3e 	bl	8005ce0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8006264:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 800626c:	431c      	orrs	r4, r3

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800626e:	f10d 0007 	add.w	r0, sp, #7
 8006272:	2121      	movs	r1, #33	; 0x21
 8006274:	2201      	movs	r2, #1
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 8006276:	f88d 4007 	strb.w	r4, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800627a:	f7ff fd0f 	bl	8005c9c <GYRO_IO_Write>
}
 800627e:	b002      	add	sp, #8
 8006280:	bd10      	pop	{r4, pc}

08006282 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8006282:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8006284:	2201      	movs	r2, #1
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8006286:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8006288:	2124      	movs	r1, #36	; 0x24
 800628a:	f10d 0007 	add.w	r0, sp, #7
 800628e:	f7ff fd27 	bl	8005ce0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8006292:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006296:	f023 0310 	bic.w	r3, r3, #16
  
  tmpreg |= HighPassFilterState;
 800629a:	431c      	orrs	r4, r3
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800629c:	f10d 0007 	add.w	r0, sp, #7
 80062a0:	2124      	movs	r1, #36	; 0x24
 80062a2:	2201      	movs	r2, #1
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  tmpreg &= 0xEF;
  
  tmpreg |= HighPassFilterState;
 80062a4:	f88d 4007 	strb.w	r4, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80062a8:	f7ff fcf8 	bl	8005c9c <GYRO_IO_Write>
}
 80062ac:	b002      	add	sp, #8
 80062ae:	bd10      	pop	{r4, pc}

080062b0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 80062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	4680      	mov	r8, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 80062b8:	a806      	add	r0, sp, #24
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 80062ba:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 80062bc:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80062c0:	2123      	movs	r1, #35	; 0x23
 80062c2:	2201      	movs	r2, #1
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80062d0:	f7ff fd06 	bl	8005ce0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80062d4:	2128      	movs	r1, #40	; 0x28
 80062d6:	2206      	movs	r2, #6
 80062d8:	a802      	add	r0, sp, #8
 80062da:	f7ff fd01 	bl	8005ce0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80062de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062e2:	f89d 6009 	ldrb.w	r6, [sp, #9]
 80062e6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80062ea:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80062ee:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80062f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80062f6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80062fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062fe:	d11a      	bne.n	8006336 <L3GD20_ReadXYZAngRate+0x86>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8006300:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8006304:	eb05 2404 	add.w	r4, r5, r4, lsl #8
 8006308:	f8ad 6010 	strh.w	r6, [sp, #16]
 800630c:	f8ad 4012 	strh.w	r4, [sp, #18]
 8006310:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8006314:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006318:	2b10      	cmp	r3, #16
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800631a:	f8ad 2014 	strh.w	r2, [sp, #20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800631e:	d015      	beq.n	800634c <L3GD20_ReadXYZAngRate+0x9c>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d016      	beq.n	8006352 <L3GD20_ReadXYZAngRate+0xa2>
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
 8006324:	eddf 7a15 	vldr	s15, [pc, #84]	; 800637c <L3GD20_ReadXYZAngRate+0xcc>
 8006328:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006380 <L3GD20_ReadXYZAngRate+0xd0>
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf08      	it	eq
 8006330:	eef0 7a47 	vmoveq.f32	s15, s14
 8006334:	e00f      	b.n	8006356 <L3GD20_ReadXYZAngRate+0xa6>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8006336:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800633a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800633e:	f8ad 6010 	strh.w	r6, [sp, #16]
 8006342:	f8ad 4012 	strh.w	r4, [sp, #18]
 8006346:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800634a:	e7e3      	b.n	8006314 <L3GD20_ReadXYZAngRate+0x64>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800634c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006384 <L3GD20_ReadXYZAngRate+0xd4>
    break;
 8006350:	e001      	b.n	8006356 <L3GD20_ReadXYZAngRate+0xa6>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8006352:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006388 <L3GD20_ReadXYZAngRate+0xd8>
 8006356:	4640      	mov	r0, r8
 8006358:	2300      	movs	r3, #0
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800635a:	aa04      	add	r2, sp, #16
 800635c:	5e9a      	ldrsh	r2, [r3, r2]
 800635e:	ee07 2a10 	vmov	s14, r2
 8006362:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006366:	3302      	adds	r3, #2
 8006368:	ee27 7a27 	vmul.f32	s14, s14, s15
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 800636c:	2b06      	cmp	r3, #6
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800636e:	eca0 7a01 	vstmia	r0!, {s14}
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8006372:	d1f2      	bne.n	800635a <L3GD20_ReadXYZAngRate+0xaa>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
  }
}
 8006374:	b006      	add	sp, #24
 8006376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637a:	bf00      	nop
 800637c:	00000000 	.word	0x00000000
 8006380:	410c0000 	.word	0x410c0000
 8006384:	418c0000 	.word	0x418c0000
 8006388:	428c0000 	.word	0x428c0000

0800638c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800638c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006390:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006392:	e003      	b.n	800639c <LoopCopyDataInit>

08006394 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006396:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006398:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800639a:	3104      	adds	r1, #4

0800639c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800639c:	480b      	ldr	r0, [pc, #44]	; (80063cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80063a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80063a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80063a4:	d3f6      	bcc.n	8006394 <CopyDataInit>
	ldr	r2, =_sbss
 80063a6:	4a0b      	ldr	r2, [pc, #44]	; (80063d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80063a8:	e002      	b.n	80063b0 <LoopFillZerobss>

080063aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80063aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80063ac:	f842 3b04 	str.w	r3, [r2], #4

080063b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <LoopForever+0x16>)
	cmp	r2, r3
 80063b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80063b4:	d3f9      	bcc.n	80063aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80063b6:	f7fc f82d 	bl	8002414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063ba:	f000 f837 	bl	800642c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80063be:	f7fa ffdd 	bl	800137c <main>

080063c2 <LoopForever>:

LoopForever:
    b LoopForever
 80063c2:	e7fe      	b.n	80063c2 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80063c4:	20007fff 	.word	0x20007fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80063c8:	0801bbe0 	.word	0x0801bbe0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80063cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80063d0:	20000a9c 	.word	0x20000a9c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80063d4:	20000a9c 	.word	0x20000a9c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80063d8:	2000476c 	.word	0x2000476c

080063dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80063dc:	e7fe      	b.n	80063dc <ADC1_2_IRQHandler>
	...

080063e0 <atexit>:
 80063e0:	4601      	mov	r1, r0
 80063e2:	2000      	movs	r0, #0
 80063e4:	4602      	mov	r2, r0
 80063e6:	4603      	mov	r3, r0
 80063e8:	f001 bef4 	b.w	80081d4 <__register_exitproc>

080063ec <__errno>:
 80063ec:	f240 6328 	movw	r3, #1576	; 0x628
 80063f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	4770      	bx	lr

080063f8 <__libc_fini_array>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	f64b 34e0 	movw	r4, #48096	; 0xbbe0
 80063fe:	f64b 35dc 	movw	r5, #48092	; 0xbbdc
 8006402:	f6c0 0501 	movt	r5, #2049	; 0x801
 8006406:	f6c0 0401 	movt	r4, #2049	; 0x801
 800640a:	1b64      	subs	r4, r4, r5
 800640c:	10a4      	asrs	r4, r4, #2
 800640e:	bf18      	it	ne
 8006410:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8006414:	d005      	beq.n	8006422 <__libc_fini_array+0x2a>
 8006416:	3c01      	subs	r4, #1
 8006418:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800641c:	4798      	blx	r3
 800641e:	2c00      	cmp	r4, #0
 8006420:	d1f9      	bne.n	8006416 <__libc_fini_array+0x1e>
 8006422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006426:	f004 becb 	b.w	800b1c0 <_fini>
 800642a:	bf00      	nop

0800642c <__libc_init_array>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	f64b 36d4 	movw	r6, #48084	; 0xbbd4
 8006432:	f64b 35d4 	movw	r5, #48084	; 0xbbd4
 8006436:	f6c0 0501 	movt	r5, #2049	; 0x801
 800643a:	f6c0 0601 	movt	r6, #2049	; 0x801
 800643e:	1b76      	subs	r6, r6, r5
 8006440:	10b6      	asrs	r6, r6, #2
 8006442:	bf1c      	itt	ne
 8006444:	3d04      	subne	r5, #4
 8006446:	2400      	movne	r4, #0
 8006448:	d005      	beq.n	8006456 <__libc_init_array+0x2a>
 800644a:	3401      	adds	r4, #1
 800644c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8006450:	4798      	blx	r3
 8006452:	42a6      	cmp	r6, r4
 8006454:	d1f9      	bne.n	800644a <__libc_init_array+0x1e>
 8006456:	f64b 36dc 	movw	r6, #48092	; 0xbbdc
 800645a:	f64b 35d4 	movw	r5, #48084	; 0xbbd4
 800645e:	f6c0 0501 	movt	r5, #2049	; 0x801
 8006462:	f6c0 0601 	movt	r6, #2049	; 0x801
 8006466:	1b76      	subs	r6, r6, r5
 8006468:	f004 fea4 	bl	800b1b4 <_init>
 800646c:	10b6      	asrs	r6, r6, #2
 800646e:	bf1c      	itt	ne
 8006470:	3d04      	subne	r5, #4
 8006472:	2400      	movne	r4, #0
 8006474:	d006      	beq.n	8006484 <__libc_init_array+0x58>
 8006476:	3401      	adds	r4, #1
 8006478:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800647c:	4798      	blx	r3
 800647e:	42a6      	cmp	r6, r4
 8006480:	d1f9      	bne.n	8006476 <__libc_init_array+0x4a>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	bd70      	pop	{r4, r5, r6, pc}
 8006486:	bf00      	nop

08006488 <memset>:
 8006488:	b4f0      	push	{r4, r5, r6, r7}
 800648a:	0784      	lsls	r4, r0, #30
 800648c:	d043      	beq.n	8006516 <memset+0x8e>
 800648e:	1e54      	subs	r4, r2, #1
 8006490:	2a00      	cmp	r2, #0
 8006492:	d03e      	beq.n	8006512 <memset+0x8a>
 8006494:	b2cd      	uxtb	r5, r1
 8006496:	4603      	mov	r3, r0
 8006498:	e003      	b.n	80064a2 <memset+0x1a>
 800649a:	1e62      	subs	r2, r4, #1
 800649c:	2c00      	cmp	r4, #0
 800649e:	d038      	beq.n	8006512 <memset+0x8a>
 80064a0:	4614      	mov	r4, r2
 80064a2:	f803 5b01 	strb.w	r5, [r3], #1
 80064a6:	079a      	lsls	r2, r3, #30
 80064a8:	d1f7      	bne.n	800649a <memset+0x12>
 80064aa:	2c03      	cmp	r4, #3
 80064ac:	d92a      	bls.n	8006504 <memset+0x7c>
 80064ae:	b2cd      	uxtb	r5, r1
 80064b0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80064b4:	2c0f      	cmp	r4, #15
 80064b6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80064ba:	d915      	bls.n	80064e8 <memset+0x60>
 80064bc:	f1a4 0710 	sub.w	r7, r4, #16
 80064c0:	093f      	lsrs	r7, r7, #4
 80064c2:	f103 0610 	add.w	r6, r3, #16
 80064c6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80064ca:	461a      	mov	r2, r3
 80064cc:	6015      	str	r5, [r2, #0]
 80064ce:	6055      	str	r5, [r2, #4]
 80064d0:	6095      	str	r5, [r2, #8]
 80064d2:	60d5      	str	r5, [r2, #12]
 80064d4:	3210      	adds	r2, #16
 80064d6:	42b2      	cmp	r2, r6
 80064d8:	d1f8      	bne.n	80064cc <memset+0x44>
 80064da:	f004 040f 	and.w	r4, r4, #15
 80064de:	3701      	adds	r7, #1
 80064e0:	2c03      	cmp	r4, #3
 80064e2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80064e6:	d90d      	bls.n	8006504 <memset+0x7c>
 80064e8:	461e      	mov	r6, r3
 80064ea:	4622      	mov	r2, r4
 80064ec:	3a04      	subs	r2, #4
 80064ee:	2a03      	cmp	r2, #3
 80064f0:	f846 5b04 	str.w	r5, [r6], #4
 80064f4:	d8fa      	bhi.n	80064ec <memset+0x64>
 80064f6:	1f22      	subs	r2, r4, #4
 80064f8:	f022 0203 	bic.w	r2, r2, #3
 80064fc:	3204      	adds	r2, #4
 80064fe:	4413      	add	r3, r2
 8006500:	f004 0403 	and.w	r4, r4, #3
 8006504:	b12c      	cbz	r4, 8006512 <memset+0x8a>
 8006506:	b2c9      	uxtb	r1, r1
 8006508:	441c      	add	r4, r3
 800650a:	f803 1b01 	strb.w	r1, [r3], #1
 800650e:	42a3      	cmp	r3, r4
 8006510:	d1fb      	bne.n	800650a <memset+0x82>
 8006512:	bcf0      	pop	{r4, r5, r6, r7}
 8006514:	4770      	bx	lr
 8006516:	4614      	mov	r4, r2
 8006518:	4603      	mov	r3, r0
 800651a:	e7c6      	b.n	80064aa <memset+0x22>

0800651c <printf>:
 800651c:	b40f      	push	{r0, r1, r2, r3}
 800651e:	b500      	push	{lr}
 8006520:	f240 6228 	movw	r2, #1576	; 0x628
 8006524:	b083      	sub	sp, #12
 8006526:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800652a:	ab04      	add	r3, sp, #16
 800652c:	6810      	ldr	r0, [r2, #0]
 800652e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006532:	6881      	ldr	r1, [r0, #8]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	f000 fb0b 	bl	8006b50 <_vfprintf_r>
 800653a:	b003      	add	sp, #12
 800653c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006540:	b004      	add	sp, #16
 8006542:	4770      	bx	lr

08006544 <putchar>:
 8006544:	f240 6328 	movw	r3, #1576	; 0x628
 8006548:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800654c:	4601      	mov	r1, r0
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	6882      	ldr	r2, [r0, #8]
 8006552:	f004 b9f7 	b.w	800a944 <_putc_r>
 8006556:	bf00      	nop

08006558 <_puts_r>:
 8006558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655a:	4604      	mov	r4, r0
 800655c:	b089      	sub	sp, #36	; 0x24
 800655e:	4608      	mov	r0, r1
 8006560:	460d      	mov	r5, r1
 8006562:	f000 f93f 	bl	80067e4 <strlen>
 8006566:	68a3      	ldr	r3, [r4, #8]
 8006568:	9005      	str	r0, [sp, #20]
 800656a:	8999      	ldrh	r1, [r3, #12]
 800656c:	9504      	str	r5, [sp, #16]
 800656e:	f64b 224c 	movw	r2, #47692	; 0xba4c
 8006572:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006576:	9206      	str	r2, [sp, #24]
 8006578:	048a      	lsls	r2, r1, #18
 800657a:	bf5e      	ittt	pl
 800657c:	6e5a      	ldrpl	r2, [r3, #100]	; 0x64
 800657e:	f441 5100 	orrpl.w	r1, r1, #8192	; 0x2000
 8006582:	f422 5200 	bicpl.w	r2, r2, #8192	; 0x2000
 8006586:	f100 0001 	add.w	r0, r0, #1
 800658a:	f04f 0701 	mov.w	r7, #1
 800658e:	bf58      	it	pl
 8006590:	665a      	strpl	r2, [r3, #100]	; 0x64
 8006592:	9003      	str	r0, [sp, #12]
 8006594:	9707      	str	r7, [sp, #28]
 8006596:	ae04      	add	r6, sp, #16
 8006598:	bf58      	it	pl
 800659a:	8199      	strhpl	r1, [r3, #12]
 800659c:	2502      	movs	r5, #2
 800659e:	4620      	mov	r0, r4
 80065a0:	4619      	mov	r1, r3
 80065a2:	aa01      	add	r2, sp, #4
 80065a4:	9601      	str	r6, [sp, #4]
 80065a6:	9502      	str	r5, [sp, #8]
 80065a8:	f003 f920 	bl	80097ec <__sfvwrite_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	bf0c      	ite	eq
 80065b0:	200a      	moveq	r0, #10
 80065b2:	f04f 30ff 	movne.w	r0, #4294967295
 80065b6:	b009      	add	sp, #36	; 0x24
 80065b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ba:	bf00      	nop

080065bc <puts>:
 80065bc:	f240 6328 	movw	r3, #1576	; 0x628
 80065c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80065c4:	4601      	mov	r1, r0
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	f7ff bfc6 	b.w	8006558 <_puts_r>

080065cc <setvbuf>:
 80065cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d0:	f240 6528 	movw	r5, #1576	; 0x628
 80065d4:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80065d8:	4604      	mov	r4, r0
 80065da:	682e      	ldr	r6, [r5, #0]
 80065dc:	4689      	mov	r9, r1
 80065de:	4617      	mov	r7, r2
 80065e0:	4698      	mov	r8, r3
 80065e2:	b116      	cbz	r6, 80065ea <setvbuf+0x1e>
 80065e4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d058      	beq.n	800669c <setvbuf+0xd0>
 80065ea:	ea4f 75d8 	mov.w	r5, r8, lsr #31
 80065ee:	2f02      	cmp	r7, #2
 80065f0:	bf88      	it	hi
 80065f2:	f045 0501 	orrhi.w	r5, r5, #1
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	d133      	bne.n	8006662 <setvbuf+0x96>
 80065fa:	4630      	mov	r0, r6
 80065fc:	4621      	mov	r1, r4
 80065fe:	f002 ff39 	bl	8009474 <_fflush_r>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	6065      	str	r5, [r4, #4]
 8006606:	061a      	lsls	r2, r3, #24
 8006608:	61a5      	str	r5, [r4, #24]
 800660a:	d42e      	bmi.n	800666a <setvbuf+0x9e>
 800660c:	f64f 757c 	movw	r5, #65404	; 0xff7c
 8006610:	401d      	ands	r5, r3
 8006612:	2f02      	cmp	r7, #2
 8006614:	81a5      	strh	r5, [r4, #12]
 8006616:	d033      	beq.n	8006680 <setvbuf+0xb4>
 8006618:	f1b9 0f00 	cmp.w	r9, #0
 800661c:	d042      	beq.n	80066a4 <setvbuf+0xd8>
 800661e:	2f01      	cmp	r7, #1
 8006620:	bf02      	ittt	eq
 8006622:	f045 0501 	orreq.w	r5, r5, #1
 8006626:	f1c8 0300 	rsbeq	r3, r8, #0
 800662a:	81a5      	strheq	r5, [r4, #12]
 800662c:	b2ad      	uxth	r5, r5
 800662e:	bf08      	it	eq
 8006630:	61a3      	streq	r3, [r4, #24]
 8006632:	f005 0008 	and.w	r0, r5, #8
 8006636:	f249 43a1 	movw	r3, #38049	; 0x94a1
 800663a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800663e:	b280      	uxth	r0, r0
 8006640:	63f3      	str	r3, [r6, #60]	; 0x3c
 8006642:	f8c4 9000 	str.w	r9, [r4]
 8006646:	f8c4 9010 	str.w	r9, [r4, #16]
 800664a:	f8c4 8014 	str.w	r8, [r4, #20]
 800664e:	b150      	cbz	r0, 8006666 <setvbuf+0x9a>
 8006650:	f015 0f03 	tst.w	r5, #3
 8006654:	bf0c      	ite	eq
 8006656:	4643      	moveq	r3, r8
 8006658:	2300      	movne	r3, #0
 800665a:	60a3      	str	r3, [r4, #8]
 800665c:	2000      	movs	r0, #0
 800665e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006662:	f04f 30ff 	mov.w	r0, #4294967295
 8006666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666a:	4630      	mov	r0, r6
 800666c:	6921      	ldr	r1, [r4, #16]
 800666e:	f002 ffef 	bl	8009650 <_free_r>
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	f64f 757c 	movw	r5, #65404	; 0xff7c
 8006678:	401d      	ands	r5, r3
 800667a:	2f02      	cmp	r7, #2
 800667c:	81a5      	strh	r5, [r4, #12]
 800667e:	d1cb      	bne.n	8006618 <setvbuf+0x4c>
 8006680:	2000      	movs	r0, #0
 8006682:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8006686:	f045 0502 	orr.w	r5, r5, #2
 800668a:	2100      	movs	r1, #0
 800668c:	2201      	movs	r2, #1
 800668e:	81a5      	strh	r5, [r4, #12]
 8006690:	60a1      	str	r1, [r4, #8]
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	6123      	str	r3, [r4, #16]
 8006696:	6162      	str	r2, [r4, #20]
 8006698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669c:	4630      	mov	r0, r6
 800669e:	f002 ff05 	bl	80094ac <__sinit>
 80066a2:	e7a2      	b.n	80065ea <setvbuf+0x1e>
 80066a4:	f1b8 0f00 	cmp.w	r8, #0
 80066a8:	bf08      	it	eq
 80066aa:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 80066ae:	4640      	mov	r0, r8
 80066b0:	f003 fad0 	bl	8009c54 <malloc>
 80066b4:	4681      	mov	r9, r0
 80066b6:	b128      	cbz	r0, 80066c4 <setvbuf+0xf8>
 80066b8:	89a5      	ldrh	r5, [r4, #12]
 80066ba:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80066be:	b2ad      	uxth	r5, r5
 80066c0:	81a5      	strh	r5, [r4, #12]
 80066c2:	e7ac      	b.n	800661e <setvbuf+0x52>
 80066c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80066c8:	f003 fac4 	bl	8009c54 <malloc>
 80066cc:	4681      	mov	r9, r0
 80066ce:	b918      	cbnz	r0, 80066d8 <setvbuf+0x10c>
 80066d0:	89a5      	ldrh	r5, [r4, #12]
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295
 80066d6:	e7d4      	b.n	8006682 <setvbuf+0xb6>
 80066d8:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80066dc:	e7ec      	b.n	80066b8 <setvbuf+0xec>
 80066de:	bf00      	nop

080066e0 <strcasecmp>:
 80066e0:	f240 13fc 	movw	r3, #508	; 0x1fc
 80066e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80066e8:	b430      	push	{r4, r5}
 80066ea:	4605      	mov	r5, r0
 80066ec:	681c      	ldr	r4, [r3, #0]
 80066ee:	e002      	b.n	80066f6 <strcasecmp+0x16>
 80066f0:	1ad0      	subs	r0, r2, r3
 80066f2:	d116      	bne.n	8006722 <strcasecmp+0x42>
 80066f4:	b1ab      	cbz	r3, 8006722 <strcasecmp+0x42>
 80066f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066fa:	18e0      	adds	r0, r4, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	7840      	ldrb	r0, [r0, #1]
 8006700:	f000 0003 	and.w	r0, r0, #3
 8006704:	2801      	cmp	r0, #1
 8006706:	bf08      	it	eq
 8006708:	f103 0220 	addeq.w	r2, r3, #32
 800670c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006710:	18e0      	adds	r0, r4, r3
 8006712:	7840      	ldrb	r0, [r0, #1]
 8006714:	f000 0003 	and.w	r0, r0, #3
 8006718:	2801      	cmp	r0, #1
 800671a:	d1e9      	bne.n	80066f0 <strcasecmp+0x10>
 800671c:	3320      	adds	r3, #32
 800671e:	1ad0      	subs	r0, r2, r3
 8006720:	d0e9      	beq.n	80066f6 <strcasecmp+0x16>
 8006722:	bc30      	pop	{r4, r5}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop

08006728 <strcpy>:
 8006728:	ea80 0201 	eor.w	r2, r0, r1
 800672c:	4684      	mov	ip, r0
 800672e:	f012 0f03 	tst.w	r2, #3
 8006732:	d14f      	bne.n	80067d4 <strcpy+0xac>
 8006734:	f011 0f03 	tst.w	r1, #3
 8006738:	d132      	bne.n	80067a0 <strcpy+0x78>
 800673a:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800673e:	f011 0f04 	tst.w	r1, #4
 8006742:	f851 3b04 	ldr.w	r3, [r1], #4
 8006746:	d00b      	beq.n	8006760 <strcpy+0x38>
 8006748:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800674c:	439a      	bics	r2, r3
 800674e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8006752:	bf04      	itt	eq
 8006754:	f84c 3b04 	streq.w	r3, [ip], #4
 8006758:	f851 3b04 	ldreq.w	r3, [r1], #4
 800675c:	d116      	bne.n	800678c <strcpy+0x64>
 800675e:	bf00      	nop
 8006760:	f851 4b04 	ldr.w	r4, [r1], #4
 8006764:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8006768:	439a      	bics	r2, r3
 800676a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800676e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8006772:	d10b      	bne.n	800678c <strcpy+0x64>
 8006774:	f84c 3b04 	str.w	r3, [ip], #4
 8006778:	43a2      	bics	r2, r4
 800677a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800677e:	bf04      	itt	eq
 8006780:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006784:	f84c 4b04 	streq.w	r4, [ip], #4
 8006788:	d0ea      	beq.n	8006760 <strcpy+0x38>
 800678a:	4623      	mov	r3, r4
 800678c:	f80c 3b01 	strb.w	r3, [ip], #1
 8006790:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006794:	ea4f 2333 	mov.w	r3, r3, ror #8
 8006798:	d1f8      	bne.n	800678c <strcpy+0x64>
 800679a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	f011 0f01 	tst.w	r1, #1
 80067a4:	d006      	beq.n	80067b4 <strcpy+0x8c>
 80067a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067aa:	f80c 2b01 	strb.w	r2, [ip], #1
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	bf08      	it	eq
 80067b2:	4770      	bxeq	lr
 80067b4:	f011 0f02 	tst.w	r1, #2
 80067b8:	d0bf      	beq.n	800673a <strcpy+0x12>
 80067ba:	f831 2b02 	ldrh.w	r2, [r1], #2
 80067be:	f012 0fff 	tst.w	r2, #255	; 0xff
 80067c2:	bf16      	itet	ne
 80067c4:	f82c 2b02 	strhne.w	r2, [ip], #2
 80067c8:	f88c 2000 	strbeq.w	r2, [ip]
 80067cc:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80067d0:	d1b3      	bne.n	800673a <strcpy+0x12>
 80067d2:	4770      	bx	lr
 80067d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d8:	f80c 2b01 	strb.w	r2, [ip], #1
 80067dc:	2a00      	cmp	r2, #0
 80067de:	d1f9      	bne.n	80067d4 <strcpy+0xac>
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <strlen>:
 80067e4:	f020 0103 	bic.w	r1, r0, #3
 80067e8:	f010 0003 	ands.w	r0, r0, #3
 80067ec:	f1c0 0000 	rsb	r0, r0, #0
 80067f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80067f4:	f100 0c04 	add.w	ip, r0, #4
 80067f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80067fc:	f06f 0200 	mvn.w	r2, #0
 8006800:	bf1c      	itt	ne
 8006802:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006806:	4313      	orrne	r3, r2
 8006808:	f04f 0c01 	mov.w	ip, #1
 800680c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006810:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006814:	eba3 020c 	sub.w	r2, r3, ip
 8006818:	ea22 0203 	bic.w	r2, r2, r3
 800681c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006820:	bf04      	itt	eq
 8006822:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006826:	3004      	addeq	r0, #4
 8006828:	d0f4      	beq.n	8006814 <strlen+0x30>
 800682a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800682e:	bf1f      	itttt	ne
 8006830:	3001      	addne	r0, #1
 8006832:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006836:	3001      	addne	r0, #1
 8006838:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800683c:	bf18      	it	ne
 800683e:	3001      	addne	r0, #1
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop

08006844 <strtok>:
 8006844:	f240 6228 	movw	r2, #1576	; 0x628
 8006848:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800684c:	2301      	movs	r3, #1
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	325c      	adds	r2, #92	; 0x5c
 8006852:	f000 b801 	b.w	8006858 <__strtok_r>
 8006856:	bf00      	nop

08006858 <__strtok_r>:
 8006858:	b4f0      	push	{r4, r5, r6, r7}
 800685a:	b320      	cbz	r0, 80068a6 <__strtok_r+0x4e>
 800685c:	4607      	mov	r7, r0
 800685e:	460d      	mov	r5, r1
 8006860:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006864:	e001      	b.n	800686a <__strtok_r+0x12>
 8006866:	42a6      	cmp	r6, r4
 8006868:	d016      	beq.n	8006898 <__strtok_r+0x40>
 800686a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800686e:	2c00      	cmp	r4, #0
 8006870:	d1f9      	bne.n	8006866 <__strtok_r+0xe>
 8006872:	b1ee      	cbz	r6, 80068b0 <__strtok_r+0x58>
 8006874:	463e      	mov	r6, r7
 8006876:	460c      	mov	r4, r1
 8006878:	f816 5b01 	ldrb.w	r5, [r6], #1
 800687c:	e000      	b.n	8006880 <__strtok_r+0x28>
 800687e:	b173      	cbz	r3, 800689e <__strtok_r+0x46>
 8006880:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006884:	42ab      	cmp	r3, r5
 8006886:	d1fa      	bne.n	800687e <__strtok_r+0x26>
 8006888:	b15d      	cbz	r5, 80068a2 <__strtok_r+0x4a>
 800688a:	2300      	movs	r3, #0
 800688c:	703b      	strb	r3, [r7, #0]
 800688e:	6016      	str	r6, [r2, #0]
 8006890:	4606      	mov	r6, r0
 8006892:	4630      	mov	r0, r6
 8006894:	bcf0      	pop	{r4, r5, r6, r7}
 8006896:	4770      	bx	lr
 8006898:	b163      	cbz	r3, 80068b4 <__strtok_r+0x5c>
 800689a:	4638      	mov	r0, r7
 800689c:	e7de      	b.n	800685c <__strtok_r+0x4>
 800689e:	4637      	mov	r7, r6
 80068a0:	e7e8      	b.n	8006874 <__strtok_r+0x1c>
 80068a2:	462e      	mov	r6, r5
 80068a4:	e7f3      	b.n	800688e <__strtok_r+0x36>
 80068a6:	6810      	ldr	r0, [r2, #0]
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d1d7      	bne.n	800685c <__strtok_r+0x4>
 80068ac:	4606      	mov	r6, r0
 80068ae:	e7f0      	b.n	8006892 <__strtok_r+0x3a>
 80068b0:	6016      	str	r6, [r2, #0]
 80068b2:	e7ee      	b.n	8006892 <__strtok_r+0x3a>
 80068b4:	6017      	str	r7, [r2, #0]
 80068b6:	4606      	mov	r6, r0
 80068b8:	7003      	strb	r3, [r0, #0]
 80068ba:	e7ea      	b.n	8006892 <__strtok_r+0x3a>

080068bc <_strtol_r>:
 80068bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068c0:	f240 14fc 	movw	r4, #508	; 0x1fc
 80068c4:	b082      	sub	sp, #8
 80068c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80068ca:	9001      	str	r0, [sp, #4]
 80068cc:	f8d4 c000 	ldr.w	ip, [r4]
 80068d0:	460e      	mov	r6, r1
 80068d2:	e000      	b.n	80068d6 <_strtol_r+0x1a>
 80068d4:	4626      	mov	r6, r4
 80068d6:	4634      	mov	r4, r6
 80068d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80068dc:	eb0c 0005 	add.w	r0, ip, r5
 80068e0:	7840      	ldrb	r0, [r0, #1]
 80068e2:	f000 0008 	and.w	r0, r0, #8
 80068e6:	f000 0bff 	and.w	fp, r0, #255	; 0xff
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d1f2      	bne.n	80068d4 <_strtol_r+0x18>
 80068ee:	2d2d      	cmp	r5, #45	; 0x2d
 80068f0:	d06c      	beq.n	80069cc <_strtol_r+0x110>
 80068f2:	2d2b      	cmp	r5, #43	; 0x2b
 80068f4:	bf04      	itt	eq
 80068f6:	7875      	ldrbeq	r5, [r6, #1]
 80068f8:	1cb4      	addeq	r4, r6, #2
 80068fa:	f033 0010 	bics.w	r0, r3, #16
 80068fe:	d110      	bne.n	8006922 <_strtol_r+0x66>
 8006900:	f1d3 0001 	rsbs	r0, r3, #1
 8006904:	bf38      	it	cc
 8006906:	2000      	movcc	r0, #0
 8006908:	2d30      	cmp	r5, #48	; 0x30
 800690a:	d003      	beq.n	8006914 <_strtol_r+0x58>
 800690c:	b148      	cbz	r0, 8006922 <_strtol_r+0x66>
 800690e:	230a      	movs	r3, #10
 8006910:	469a      	mov	sl, r3
 8006912:	e007      	b.n	8006924 <_strtol_r+0x68>
 8006914:	7826      	ldrb	r6, [r4, #0]
 8006916:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800691a:	2e58      	cmp	r6, #88	; 0x58
 800691c:	d05b      	beq.n	80069d6 <_strtol_r+0x11a>
 800691e:	b100      	cbz	r0, 8006922 <_strtol_r+0x66>
 8006920:	2308      	movs	r3, #8
 8006922:	469a      	mov	sl, r3
 8006924:	f1bb 0f00 	cmp.w	fp, #0
 8006928:	bf0c      	ite	eq
 800692a:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 800692e:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 8006932:	fbb9 f8fa 	udiv	r8, r9, sl
 8006936:	2700      	movs	r7, #0
 8006938:	fb0a 9918 	mls	r9, sl, r8, r9
 800693c:	4638      	mov	r0, r7
 800693e:	e00c      	b.n	800695a <_strtol_r+0x9e>
 8006940:	454d      	cmp	r5, r9
 8006942:	bfd4      	ite	le
 8006944:	2600      	movle	r6, #0
 8006946:	2601      	movgt	r6, #1
 8006948:	4540      	cmp	r0, r8
 800694a:	bf18      	it	ne
 800694c:	2600      	movne	r6, #0
 800694e:	b9ee      	cbnz	r6, 800698c <_strtol_r+0xd0>
 8006950:	fb0a 5000 	mla	r0, sl, r0, r5
 8006954:	2701      	movs	r7, #1
 8006956:	f814 5b01 	ldrb.w	r5, [r4], #1
 800695a:	eb0c 0605 	add.w	r6, ip, r5
 800695e:	7876      	ldrb	r6, [r6, #1]
 8006960:	f016 0f04 	tst.w	r6, #4
 8006964:	bf18      	it	ne
 8006966:	3d30      	subne	r5, #48	; 0x30
 8006968:	d107      	bne.n	800697a <_strtol_r+0xbe>
 800696a:	f016 0603 	ands.w	r6, r6, #3
 800696e:	d010      	beq.n	8006992 <_strtol_r+0xd6>
 8006970:	2e01      	cmp	r6, #1
 8006972:	bf14      	ite	ne
 8006974:	2657      	movne	r6, #87	; 0x57
 8006976:	2637      	moveq	r6, #55	; 0x37
 8006978:	1bad      	subs	r5, r5, r6
 800697a:	42ab      	cmp	r3, r5
 800697c:	dd09      	ble.n	8006992 <_strtol_r+0xd6>
 800697e:	4540      	cmp	r0, r8
 8006980:	bf94      	ite	ls
 8006982:	2600      	movls	r6, #0
 8006984:	2601      	movhi	r6, #1
 8006986:	ea56 77d7 	orrs.w	r7, r6, r7, lsr #31
 800698a:	d0d9      	beq.n	8006940 <_strtol_r+0x84>
 800698c:	f04f 37ff 	mov.w	r7, #4294967295
 8006990:	e7e1      	b.n	8006956 <_strtol_r+0x9a>
 8006992:	1c7b      	adds	r3, r7, #1
 8006994:	d009      	beq.n	80069aa <_strtol_r+0xee>
 8006996:	f1bb 0f00 	cmp.w	fp, #0
 800699a:	d115      	bne.n	80069c8 <_strtol_r+0x10c>
 800699c:	b10a      	cbz	r2, 80069a2 <_strtol_r+0xe6>
 800699e:	b98f      	cbnz	r7, 80069c4 <_strtol_r+0x108>
 80069a0:	6011      	str	r1, [r2, #0]
 80069a2:	b002      	add	sp, #8
 80069a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80069a8:	4770      	bx	lr
 80069aa:	9901      	ldr	r1, [sp, #4]
 80069ac:	f1bb 0f00 	cmp.w	fp, #0
 80069b0:	f04f 0322 	mov.w	r3, #34	; 0x22
 80069b4:	bf0c      	ite	eq
 80069b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80069ba:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80069be:	600b      	str	r3, [r1, #0]
 80069c0:	2a00      	cmp	r2, #0
 80069c2:	d0ee      	beq.n	80069a2 <_strtol_r+0xe6>
 80069c4:	1e61      	subs	r1, r4, #1
 80069c6:	e7eb      	b.n	80069a0 <_strtol_r+0xe4>
 80069c8:	4240      	negs	r0, r0
 80069ca:	e7e7      	b.n	800699c <_strtol_r+0xe0>
 80069cc:	1cb4      	adds	r4, r6, #2
 80069ce:	7875      	ldrb	r5, [r6, #1]
 80069d0:	f04f 0b01 	mov.w	fp, #1
 80069d4:	e791      	b.n	80068fa <_strtol_r+0x3e>
 80069d6:	2310      	movs	r3, #16
 80069d8:	7865      	ldrb	r5, [r4, #1]
 80069da:	469a      	mov	sl, r3
 80069dc:	3402      	adds	r4, #2
 80069de:	e7a1      	b.n	8006924 <_strtol_r+0x68>

080069e0 <strtol>:
 80069e0:	b430      	push	{r4, r5}
 80069e2:	f240 6428 	movw	r4, #1576	; 0x628
 80069e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80069ea:	460d      	mov	r5, r1
 80069ec:	4613      	mov	r3, r2
 80069ee:	4601      	mov	r1, r0
 80069f0:	462a      	mov	r2, r5
 80069f2:	6820      	ldr	r0, [r4, #0]
 80069f4:	bc30      	pop	{r4, r5}
 80069f6:	f7ff bf61 	b.w	80068bc <_strtol_r>
 80069fa:	bf00      	nop

080069fc <_strtoul_r>:
 80069fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a00:	f240 14fc 	movw	r4, #508	; 0x1fc
 8006a04:	b082      	sub	sp, #8
 8006a06:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006a0a:	9001      	str	r0, [sp, #4]
 8006a0c:	f8d4 c000 	ldr.w	ip, [r4]
 8006a10:	460e      	mov	r6, r1
 8006a12:	e000      	b.n	8006a16 <_strtoul_r+0x1a>
 8006a14:	4626      	mov	r6, r4
 8006a16:	4634      	mov	r4, r6
 8006a18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006a1c:	eb0c 0005 	add.w	r0, ip, r5
 8006a20:	7840      	ldrb	r0, [r0, #1]
 8006a22:	f000 0008 	and.w	r0, r0, #8
 8006a26:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d1f2      	bne.n	8006a14 <_strtoul_r+0x18>
 8006a2e:	2d2d      	cmp	r5, #45	; 0x2d
 8006a30:	d06a      	beq.n	8006b08 <_strtoul_r+0x10c>
 8006a32:	2d2b      	cmp	r5, #43	; 0x2b
 8006a34:	bf08      	it	eq
 8006a36:	7875      	ldrbeq	r5, [r6, #1]
 8006a38:	46ba      	mov	sl, r7
 8006a3a:	bf08      	it	eq
 8006a3c:	1cb4      	addeq	r4, r6, #2
 8006a3e:	f033 0010 	bics.w	r0, r3, #16
 8006a42:	d116      	bne.n	8006a72 <_strtoul_r+0x76>
 8006a44:	f1d3 0001 	rsbs	r0, r3, #1
 8006a48:	bf38      	it	cc
 8006a4a:	2000      	movcc	r0, #0
 8006a4c:	2d30      	cmp	r5, #48	; 0x30
 8006a4e:	d009      	beq.n	8006a64 <_strtoul_r+0x68>
 8006a50:	b178      	cbz	r0, 8006a72 <_strtoul_r+0x76>
 8006a52:	f649 1899 	movw	r8, #39321	; 0x9999
 8006a56:	230a      	movs	r3, #10
 8006a58:	f6c1 1899 	movt	r8, #6553	; 0x1999
 8006a5c:	469b      	mov	fp, r3
 8006a5e:	f04f 0905 	mov.w	r9, #5
 8006a62:	e00f      	b.n	8006a84 <_strtoul_r+0x88>
 8006a64:	7826      	ldrb	r6, [r4, #0]
 8006a66:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 8006a6a:	2e58      	cmp	r6, #88	; 0x58
 8006a6c:	d051      	beq.n	8006b12 <_strtoul_r+0x116>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d158      	bne.n	8006b24 <_strtoul_r+0x128>
 8006a72:	f04f 38ff 	mov.w	r8, #4294967295
 8006a76:	fbb8 f8f3 	udiv	r8, r8, r3
 8006a7a:	fb03 f908 	mul.w	r9, r3, r8
 8006a7e:	ea6f 0909 	mvn.w	r9, r9
 8006a82:	469b      	mov	fp, r3
 8006a84:	2700      	movs	r7, #0
 8006a86:	4638      	mov	r0, r7
 8006a88:	e00c      	b.n	8006aa4 <_strtoul_r+0xa8>
 8006a8a:	454d      	cmp	r5, r9
 8006a8c:	bfd4      	ite	le
 8006a8e:	2600      	movle	r6, #0
 8006a90:	2601      	movgt	r6, #1
 8006a92:	4540      	cmp	r0, r8
 8006a94:	bf18      	it	ne
 8006a96:	2600      	movne	r6, #0
 8006a98:	b9ee      	cbnz	r6, 8006ad6 <_strtoul_r+0xda>
 8006a9a:	fb0b 5000 	mla	r0, fp, r0, r5
 8006a9e:	2701      	movs	r7, #1
 8006aa0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006aa4:	eb0c 0605 	add.w	r6, ip, r5
 8006aa8:	7876      	ldrb	r6, [r6, #1]
 8006aaa:	f016 0f04 	tst.w	r6, #4
 8006aae:	bf18      	it	ne
 8006ab0:	3d30      	subne	r5, #48	; 0x30
 8006ab2:	d107      	bne.n	8006ac4 <_strtoul_r+0xc8>
 8006ab4:	f016 0603 	ands.w	r6, r6, #3
 8006ab8:	d010      	beq.n	8006adc <_strtoul_r+0xe0>
 8006aba:	2e01      	cmp	r6, #1
 8006abc:	bf14      	ite	ne
 8006abe:	2657      	movne	r6, #87	; 0x57
 8006ac0:	2637      	moveq	r6, #55	; 0x37
 8006ac2:	1bad      	subs	r5, r5, r6
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dd09      	ble.n	8006adc <_strtoul_r+0xe0>
 8006ac8:	4540      	cmp	r0, r8
 8006aca:	bf94      	ite	ls
 8006acc:	2600      	movls	r6, #0
 8006ace:	2601      	movhi	r6, #1
 8006ad0:	ea56 77d7 	orrs.w	r7, r6, r7, lsr #31
 8006ad4:	d0d9      	beq.n	8006a8a <_strtoul_r+0x8e>
 8006ad6:	f04f 37ff 	mov.w	r7, #4294967295
 8006ada:	e7e1      	b.n	8006aa0 <_strtoul_r+0xa4>
 8006adc:	1c7b      	adds	r3, r7, #1
 8006ade:	d009      	beq.n	8006af4 <_strtoul_r+0xf8>
 8006ae0:	f1ba 0f00 	cmp.w	sl, #0
 8006ae4:	d10e      	bne.n	8006b04 <_strtoul_r+0x108>
 8006ae6:	b10a      	cbz	r2, 8006aec <_strtoul_r+0xf0>
 8006ae8:	b957      	cbnz	r7, 8006b00 <_strtoul_r+0x104>
 8006aea:	6011      	str	r1, [r2, #0]
 8006aec:	b002      	add	sp, #8
 8006aee:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006af2:	4770      	bx	lr
 8006af4:	9901      	ldr	r1, [sp, #4]
 8006af6:	2322      	movs	r3, #34	; 0x22
 8006af8:	600b      	str	r3, [r1, #0]
 8006afa:	4638      	mov	r0, r7
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	d0f5      	beq.n	8006aec <_strtoul_r+0xf0>
 8006b00:	1e61      	subs	r1, r4, #1
 8006b02:	e7f2      	b.n	8006aea <_strtoul_r+0xee>
 8006b04:	4240      	negs	r0, r0
 8006b06:	e7ee      	b.n	8006ae6 <_strtoul_r+0xea>
 8006b08:	1cb4      	adds	r4, r6, #2
 8006b0a:	7875      	ldrb	r5, [r6, #1]
 8006b0c:	f04f 0a01 	mov.w	sl, #1
 8006b10:	e795      	b.n	8006a3e <_strtoul_r+0x42>
 8006b12:	2310      	movs	r3, #16
 8006b14:	7865      	ldrb	r5, [r4, #1]
 8006b16:	469b      	mov	fp, r3
 8006b18:	f04f 090f 	mov.w	r9, #15
 8006b1c:	3402      	adds	r4, #2
 8006b1e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8006b22:	e7af      	b.n	8006a84 <_strtoul_r+0x88>
 8006b24:	2308      	movs	r3, #8
 8006b26:	469b      	mov	fp, r3
 8006b28:	f04f 0907 	mov.w	r9, #7
 8006b2c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8006b30:	e7a8      	b.n	8006a84 <_strtoul_r+0x88>
 8006b32:	bf00      	nop

08006b34 <strtoul>:
 8006b34:	b430      	push	{r4, r5}
 8006b36:	f240 6428 	movw	r4, #1576	; 0x628
 8006b3a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006b3e:	460d      	mov	r5, r1
 8006b40:	4613      	mov	r3, r2
 8006b42:	4601      	mov	r1, r0
 8006b44:	462a      	mov	r2, r5
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	bc30      	pop	{r4, r5}
 8006b4a:	f7ff bf57 	b.w	80069fc <_strtoul_r>
 8006b4e:	bf00      	nop

08006b50 <_vfprintf_r>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	b0c3      	sub	sp, #268	; 0x10c
 8006b56:	461c      	mov	r4, r3
 8006b58:	4689      	mov	r9, r1
 8006b5a:	9206      	str	r2, [sp, #24]
 8006b5c:	900a      	str	r0, [sp, #40]	; 0x28
 8006b5e:	f003 f801 	bl	8009b64 <_localeconv_r>
 8006b62:	6800      	ldr	r0, [r0, #0]
 8006b64:	9014      	str	r0, [sp, #80]	; 0x50
 8006b66:	f7ff fe3d 	bl	80067e4 <strlen>
 8006b6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006b6c:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b6e:	940e      	str	r4, [sp, #56]	; 0x38
 8006b70:	b11d      	cbz	r5, 8006b7a <_vfprintf_r+0x2a>
 8006b72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 811d 	beq.w	8006db4 <_vfprintf_r+0x264>
 8006b7a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	0490      	lsls	r0, r2, #18
 8006b82:	d40a      	bmi.n	8006b9a <_vfprintf_r+0x4a>
 8006b84:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8006b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b8c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006b90:	f8a9 300c 	strh.w	r3, [r9, #12]
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8006b9a:	0711      	lsls	r1, r2, #28
 8006b9c:	f140 80d1 	bpl.w	8006d42 <_vfprintf_r+0x1f2>
 8006ba0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80cc 	beq.w	8006d42 <_vfprintf_r+0x1f2>
 8006baa:	f002 021a 	and.w	r2, r2, #26
 8006bae:	2a0a      	cmp	r2, #10
 8006bb0:	f000 80d3 	beq.w	8006d5a <_vfprintf_r+0x20a>
 8006bb4:	f10d 05c7 	add.w	r5, sp, #199	; 0xc7
 8006bb8:	9503      	str	r5, [sp, #12]
 8006bba:	ad32      	add	r5, sp, #200	; 0xc8
 8006bbc:	46ac      	mov	ip, r5
 8006bbe:	9525      	str	r5, [sp, #148]	; 0x94
 8006bc0:	9d03      	ldr	r5, [sp, #12]
 8006bc2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bc6:	ac32      	add	r4, sp, #200	; 0xc8
 8006bc8:	9404      	str	r4, [sp, #16]
 8006bca:	ebc5 040c 	rsb	r4, r5, ip
 8006bce:	f64b 2b50 	movw	fp, #47696	; 0xba50
 8006bd2:	941b      	str	r4, [sp, #108]	; 0x6c
 8006bd4:	f64b 25a0 	movw	r5, #47776	; 0xbaa0
 8006bd8:	f64b 24a4 	movw	r4, #47780	; 0xbaa4
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f6c0 0401 	movt	r4, #2049	; 0x801
 8006be2:	f6c0 0b01 	movt	fp, #2049	; 0x801
 8006be6:	f6c0 0501 	movt	r5, #2049	; 0x801
 8006bea:	930c      	str	r3, [sp, #48]	; 0x30
 8006bec:	9327      	str	r3, [sp, #156]	; 0x9c
 8006bee:	9326      	str	r3, [sp, #152]	; 0x98
 8006bf0:	9316      	str	r3, [sp, #88]	; 0x58
 8006bf2:	9318      	str	r3, [sp, #96]	; 0x60
 8006bf4:	9315      	str	r3, [sp, #84]	; 0x54
 8006bf6:	9319      	str	r3, [sp, #100]	; 0x64
 8006bf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bfa:	9411      	str	r4, [sp, #68]	; 0x44
 8006bfc:	9512      	str	r5, [sp, #72]	; 0x48
 8006bfe:	4666      	mov	r6, ip
 8006c00:	465f      	mov	r7, fp
 8006c02:	9c06      	ldr	r4, [sp, #24]
 8006c04:	7823      	ldrb	r3, [r4, #0]
 8006c06:	2b25      	cmp	r3, #37	; 0x25
 8006c08:	bf18      	it	ne
 8006c0a:	2b00      	cmpne	r3, #0
 8006c0c:	f000 80d6 	beq.w	8006dbc <_vfprintf_r+0x26c>
 8006c10:	1c62      	adds	r2, r4, #1
 8006c12:	4614      	mov	r4, r2
 8006c14:	3201      	adds	r2, #1
 8006c16:	7823      	ldrb	r3, [r4, #0]
 8006c18:	2b25      	cmp	r3, #37	; 0x25
 8006c1a:	bf18      	it	ne
 8006c1c:	2b00      	cmpne	r3, #0
 8006c1e:	d1f8      	bne.n	8006c12 <_vfprintf_r+0xc2>
 8006c20:	9806      	ldr	r0, [sp, #24]
 8006c22:	1a25      	subs	r5, r4, r0
 8006c24:	d00f      	beq.n	8006c46 <_vfprintf_r+0xf6>
 8006c26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c28:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8006c2a:	6030      	str	r0, [r6, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	442a      	add	r2, r5
 8006c30:	2b07      	cmp	r3, #7
 8006c32:	6075      	str	r5, [r6, #4]
 8006c34:	9227      	str	r2, [sp, #156]	; 0x9c
 8006c36:	9326      	str	r3, [sp, #152]	; 0x98
 8006c38:	bfd8      	it	le
 8006c3a:	3608      	addle	r6, #8
 8006c3c:	f300 80a0 	bgt.w	8006d80 <_vfprintf_r+0x230>
 8006c40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c42:	4429      	add	r1, r5
 8006c44:	910f      	str	r1, [sp, #60]	; 0x3c
 8006c46:	7823      	ldrb	r3, [r4, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f001 804a 	beq.w	8007ce2 <_vfprintf_r+0x1192>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	1c65      	adds	r5, r4, #1
 8006c52:	f894 9001 	ldrb.w	r9, [r4, #1]
 8006c56:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8006c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c5e:	461a      	mov	r2, r3
 8006c60:	930d      	str	r3, [sp, #52]	; 0x34
 8006c62:	9305      	str	r3, [sp, #20]
 8006c64:	9506      	str	r5, [sp, #24]
 8006c66:	9408      	str	r4, [sp, #32]
 8006c68:	462b      	mov	r3, r5
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	f1a9 0120 	sub.w	r1, r9, #32
 8006c70:	2958      	cmp	r1, #88	; 0x58
 8006c72:	f200 8428 	bhi.w	80074c6 <_vfprintf_r+0x976>
 8006c76:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006c7a:	03cf      	.short	0x03cf
 8006c7c:	04260426 	.word	0x04260426
 8006c80:	0426041e 	.word	0x0426041e
 8006c84:	04260426 	.word	0x04260426
 8006c88:	04260426 	.word	0x04260426
 8006c8c:	03750426 	.word	0x03750426
 8006c90:	042603cb 	.word	0x042603cb
 8006c94:	0250005d 	.word	0x0250005d
 8006c98:	028f0426 	.word	0x028f0426
 8006c9c:	02960296 	.word	0x02960296
 8006ca0:	02960296 	.word	0x02960296
 8006ca4:	02960296 	.word	0x02960296
 8006ca8:	02960296 	.word	0x02960296
 8006cac:	04260296 	.word	0x04260296
 8006cb0:	04260426 	.word	0x04260426
 8006cb4:	04260426 	.word	0x04260426
 8006cb8:	04260426 	.word	0x04260426
 8006cbc:	04260426 	.word	0x04260426
 8006cc0:	02710426 	.word	0x02710426
 8006cc4:	042602ae 	.word	0x042602ae
 8006cc8:	042602ae 	.word	0x042602ae
 8006ccc:	04260426 	.word	0x04260426
 8006cd0:	02a70426 	.word	0x02a70426
 8006cd4:	04260426 	.word	0x04260426
 8006cd8:	042602ed 	.word	0x042602ed
 8006cdc:	04260426 	.word	0x04260426
 8006ce0:	04260426 	.word	0x04260426
 8006ce4:	04260308 	.word	0x04260308
 8006ce8:	03200426 	.word	0x03200426
 8006cec:	04260426 	.word	0x04260426
 8006cf0:	04260426 	.word	0x04260426
 8006cf4:	04260426 	.word	0x04260426
 8006cf8:	04260426 	.word	0x04260426
 8006cfc:	04260426 	.word	0x04260426
 8006d00:	035d0347 	.word	0x035d0347
 8006d04:	02ae02ae 	.word	0x02ae02ae
 8006d08:	03ee02ae 	.word	0x03ee02ae
 8006d0c:	0426035d 	.word	0x0426035d
 8006d10:	03f50426 	.word	0x03f50426
 8006d14:	040a0426 	.word	0x040a0426
 8006d18:	03d6023f 	.word	0x03d6023f
 8006d1c:	04260382 	.word	0x04260382
 8006d20:	04260389 	.word	0x04260389
 8006d24:	042600a3 	.word	0x042600a3
 8006d28:	03b10426 	.word	0x03b10426
 8006d2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006d2e:	910e      	str	r1, [sp, #56]	; 0x38
 8006d30:	4264      	negs	r4, r4
 8006d32:	940d      	str	r4, [sp, #52]	; 0x34
 8006d34:	9d05      	ldr	r5, [sp, #20]
 8006d36:	f045 0504 	orr.w	r5, r5, #4
 8006d3a:	9505      	str	r5, [sp, #20]
 8006d3c:	f893 9000 	ldrb.w	r9, [r3]
 8006d40:	e793      	b.n	8006c6a <_vfprintf_r+0x11a>
 8006d42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d44:	4649      	mov	r1, r9
 8006d46:	f001 f9e1 	bl	800810c <__swsetup_r>
 8006d4a:	b9a0      	cbnz	r0, 8006d76 <_vfprintf_r+0x226>
 8006d4c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8006d50:	f002 021a 	and.w	r2, r2, #26
 8006d54:	2a0a      	cmp	r2, #10
 8006d56:	f47f af2d 	bne.w	8006bb4 <_vfprintf_r+0x64>
 8006d5a:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f6ff af28 	blt.w	8006bb4 <_vfprintf_r+0x64>
 8006d64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d66:	9a06      	ldr	r2, [sp, #24]
 8006d68:	4649      	mov	r1, r9
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	f001 f992 	bl	8008094 <__sbprintf>
 8006d70:	b043      	add	sp, #268	; 0x10c
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7a:	b043      	add	sp, #268	; 0x10c
 8006d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d82:	9907      	ldr	r1, [sp, #28]
 8006d84:	aa25      	add	r2, sp, #148	; 0x94
 8006d86:	f004 f8a3 	bl	800aed0 <__sprint_r>
 8006d8a:	b948      	cbnz	r0, 8006da0 <_vfprintf_r+0x250>
 8006d8c:	ae32      	add	r6, sp, #200	; 0xc8
 8006d8e:	e757      	b.n	8006c40 <_vfprintf_r+0xf0>
 8006d90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d92:	9907      	ldr	r1, [sp, #28]
 8006d94:	aa25      	add	r2, sp, #148	; 0x94
 8006d96:	f004 f89b 	bl	800aed0 <__sprint_r>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f000 818c 	beq.w	80070b8 <_vfprintf_r+0x568>
 8006da0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8006da4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006da8:	065b      	lsls	r3, r3, #25
 8006daa:	d4e4      	bmi.n	8006d76 <_vfprintf_r+0x226>
 8006dac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006dae:	b043      	add	sp, #268	; 0x10c
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db4:	4628      	mov	r0, r5
 8006db6:	f002 fb79 	bl	80094ac <__sinit>
 8006dba:	e6de      	b.n	8006b7a <_vfprintf_r+0x2a>
 8006dbc:	9c06      	ldr	r4, [sp, #24]
 8006dbe:	e742      	b.n	8006c46 <_vfprintf_r+0xf6>
 8006dc0:	9c05      	ldr	r4, [sp, #20]
 8006dc2:	9306      	str	r3, [sp, #24]
 8006dc4:	06a3      	lsls	r3, r4, #26
 8006dc6:	f140 8269 	bpl.w	800729c <_vfprintf_r+0x74c>
 8006dca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006dcc:	1deb      	adds	r3, r5, #7
 8006dce:	f023 0307 	bic.w	r3, r3, #7
 8006dd2:	f103 0408 	add.w	r4, r3, #8
 8006dd6:	940e      	str	r4, [sp, #56]	; 0x38
 8006dd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f04f 0a00 	mov.w	sl, #0
 8006de2:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8006de6:	9a08      	ldr	r2, [sp, #32]
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	bfa2      	ittt	ge
 8006dec:	9805      	ldrge	r0, [sp, #20]
 8006dee:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8006df2:	9005      	strge	r0, [sp, #20]
 8006df4:	ea54 0105 	orrs.w	r1, r4, r5
 8006df8:	9808      	ldr	r0, [sp, #32]
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2200      	moveq	r2, #0
 8006dfe:	2201      	movne	r2, #1
 8006e00:	2800      	cmp	r0, #0
 8006e02:	bf18      	it	ne
 8006e04:	f042 0201 	orrne.w	r2, r2, #1
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	f000 83e2 	beq.w	80075d2 <_vfprintf_r+0xa82>
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	f000 8505 	beq.w	800781e <_vfprintf_r+0xcce>
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	f10d 02c7 	add.w	r2, sp, #199	; 0xc7
 8006e1a:	f040 8151 	bne.w	80070c0 <_vfprintf_r+0x570>
 8006e1e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006e20:	f004 010f 	and.w	r1, r4, #15
 8006e24:	0923      	lsrs	r3, r4, #4
 8006e26:	4690      	mov	r8, r2
 8006e28:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006e2c:	5c42      	ldrb	r2, [r0, r1]
 8006e2e:	0929      	lsrs	r1, r5, #4
 8006e30:	461c      	mov	r4, r3
 8006e32:	460d      	mov	r5, r1
 8006e34:	ea54 0105 	orrs.w	r1, r4, r5
 8006e38:	f888 2000 	strb.w	r2, [r8]
 8006e3c:	f108 32ff 	add.w	r2, r8, #4294967295
 8006e40:	d1ee      	bne.n	8006e20 <_vfprintf_r+0x2d0>
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	ebc8 0303 	rsb	r3, r8, r3
 8006e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e4a:	9c08      	ldr	r4, [sp, #32]
 8006e4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006e4e:	42a5      	cmp	r5, r4
 8006e50:	bfb8      	it	lt
 8006e52:	4625      	movlt	r5, r4
 8006e54:	2400      	movs	r4, #0
 8006e56:	9509      	str	r5, [sp, #36]	; 0x24
 8006e58:	9413      	str	r4, [sp, #76]	; 0x4c
 8006e5a:	f1ba 0f00 	cmp.w	sl, #0
 8006e5e:	d002      	beq.n	8006e66 <_vfprintf_r+0x316>
 8006e60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006e62:	3401      	adds	r4, #1
 8006e64:	9409      	str	r4, [sp, #36]	; 0x24
 8006e66:	9d05      	ldr	r5, [sp, #20]
 8006e68:	f015 0b02 	ands.w	fp, r5, #2
 8006e6c:	bf18      	it	ne
 8006e6e:	9c09      	ldrne	r4, [sp, #36]	; 0x24
 8006e70:	9d05      	ldr	r5, [sp, #20]
 8006e72:	bf1c      	itt	ne
 8006e74:	3402      	addne	r4, #2
 8006e76:	9409      	strne	r4, [sp, #36]	; 0x24
 8006e78:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 8006e7c:	9510      	str	r5, [sp, #64]	; 0x40
 8006e7e:	f040 8337 	bne.w	80074f0 <_vfprintf_r+0x9a0>
 8006e82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e86:	1a2c      	subs	r4, r5, r0
 8006e88:	2c00      	cmp	r4, #0
 8006e8a:	f340 8331 	ble.w	80074f0 <_vfprintf_r+0x9a0>
 8006e8e:	2c10      	cmp	r4, #16
 8006e90:	f64b 2aa4 	movw	sl, #47780	; 0xbaa4
 8006e94:	f340 87a7 	ble.w	8007de6 <_vfprintf_r+0x1296>
 8006e98:	4630      	mov	r0, r6
 8006e9a:	971a      	str	r7, [sp, #104]	; 0x68
 8006e9c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006e9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ea0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006ea2:	4627      	mov	r7, r4
 8006ea4:	f6c0 0a01 	movt	sl, #2049	; 0x801
 8006ea8:	2510      	movs	r5, #16
 8006eaa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006eac:	e002      	b.n	8006eb4 <_vfprintf_r+0x364>
 8006eae:	3f10      	subs	r7, #16
 8006eb0:	2f10      	cmp	r7, #16
 8006eb2:	dd17      	ble.n	8006ee4 <_vfprintf_r+0x394>
 8006eb4:	3201      	adds	r2, #1
 8006eb6:	3110      	adds	r1, #16
 8006eb8:	2a07      	cmp	r2, #7
 8006eba:	6006      	str	r6, [r0, #0]
 8006ebc:	6045      	str	r5, [r0, #4]
 8006ebe:	9127      	str	r1, [sp, #156]	; 0x9c
 8006ec0:	9226      	str	r2, [sp, #152]	; 0x98
 8006ec2:	bfd8      	it	le
 8006ec4:	3008      	addle	r0, #8
 8006ec6:	ddf2      	ble.n	8006eae <_vfprintf_r+0x35e>
 8006ec8:	4620      	mov	r0, r4
 8006eca:	9907      	ldr	r1, [sp, #28]
 8006ecc:	aa25      	add	r2, sp, #148	; 0x94
 8006ece:	f003 ffff 	bl	800aed0 <__sprint_r>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f47f af64 	bne.w	8006da0 <_vfprintf_r+0x250>
 8006ed8:	3f10      	subs	r7, #16
 8006eda:	2f10      	cmp	r7, #16
 8006edc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006ede:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ee0:	a832      	add	r0, sp, #200	; 0xc8
 8006ee2:	dce7      	bgt.n	8006eb4 <_vfprintf_r+0x364>
 8006ee4:	463c      	mov	r4, r7
 8006ee6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006ee8:	4606      	mov	r6, r0
 8006eea:	3201      	adds	r2, #1
 8006eec:	4421      	add	r1, r4
 8006eee:	2a07      	cmp	r2, #7
 8006ef0:	9127      	str	r1, [sp, #156]	; 0x9c
 8006ef2:	9226      	str	r2, [sp, #152]	; 0x98
 8006ef4:	f8c6 a000 	str.w	sl, [r6]
 8006ef8:	6074      	str	r4, [r6, #4]
 8006efa:	f300 849e 	bgt.w	800783a <_vfprintf_r+0xcea>
 8006efe:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8006f02:	3608      	adds	r6, #8
 8006f04:	460c      	mov	r4, r1
 8006f06:	f1ba 0f00 	cmp.w	sl, #0
 8006f0a:	d00e      	beq.n	8006f2a <_vfprintf_r+0x3da>
 8006f0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f0e:	3301      	adds	r3, #1
 8006f10:	3401      	adds	r4, #1
 8006f12:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 8006f16:	2201      	movs	r2, #1
 8006f18:	2b07      	cmp	r3, #7
 8006f1a:	e886 0006 	stmia.w	r6, {r1, r2}
 8006f1e:	9427      	str	r4, [sp, #156]	; 0x9c
 8006f20:	9326      	str	r3, [sp, #152]	; 0x98
 8006f22:	bfd8      	it	le
 8006f24:	3608      	addle	r6, #8
 8006f26:	f300 82e5 	bgt.w	80074f4 <_vfprintf_r+0x9a4>
 8006f2a:	f1bb 0f00 	cmp.w	fp, #0
 8006f2e:	d00d      	beq.n	8006f4c <_vfprintf_r+0x3fc>
 8006f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f32:	3301      	adds	r3, #1
 8006f34:	3402      	adds	r4, #2
 8006f36:	a91e      	add	r1, sp, #120	; 0x78
 8006f38:	2202      	movs	r2, #2
 8006f3a:	2b07      	cmp	r3, #7
 8006f3c:	e886 0006 	stmia.w	r6, {r1, r2}
 8006f40:	9427      	str	r4, [sp, #156]	; 0x9c
 8006f42:	9326      	str	r3, [sp, #152]	; 0x98
 8006f44:	bfd8      	it	le
 8006f46:	3608      	addle	r6, #8
 8006f48:	f300 8406 	bgt.w	8007758 <_vfprintf_r+0xc08>
 8006f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	f000 8352 	beq.w	80075f8 <_vfprintf_r+0xaa8>
 8006f54:	9d08      	ldr	r5, [sp, #32]
 8006f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f58:	ebc3 0a05 	rsb	sl, r3, r5
 8006f5c:	f1ba 0f00 	cmp.w	sl, #0
 8006f60:	dd44      	ble.n	8006fec <_vfprintf_r+0x49c>
 8006f62:	f1ba 0f10 	cmp.w	sl, #16
 8006f66:	f64b 2550 	movw	r5, #47696	; 0xba50
 8006f6a:	bfdc      	itt	le
 8006f6c:	f6c0 0501 	movtle	r5, #2049	; 0x801
 8006f70:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 8006f72:	dd27      	ble.n	8006fc4 <_vfprintf_r+0x474>
 8006f74:	f6c0 0501 	movt	r5, #2049	; 0x801
 8006f78:	4622      	mov	r2, r4
 8006f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f7c:	4654      	mov	r4, sl
 8006f7e:	f04f 0b10 	mov.w	fp, #16
 8006f82:	46aa      	mov	sl, r5
 8006f84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006f86:	e002      	b.n	8006f8e <_vfprintf_r+0x43e>
 8006f88:	3c10      	subs	r4, #16
 8006f8a:	2c10      	cmp	r4, #16
 8006f8c:	dd17      	ble.n	8006fbe <_vfprintf_r+0x46e>
 8006f8e:	3301      	adds	r3, #1
 8006f90:	3210      	adds	r2, #16
 8006f92:	2b07      	cmp	r3, #7
 8006f94:	e886 0880 	stmia.w	r6, {r7, fp}
 8006f98:	9227      	str	r2, [sp, #156]	; 0x9c
 8006f9a:	9326      	str	r3, [sp, #152]	; 0x98
 8006f9c:	bfd8      	it	le
 8006f9e:	3608      	addle	r6, #8
 8006fa0:	ddf2      	ble.n	8006f88 <_vfprintf_r+0x438>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	9907      	ldr	r1, [sp, #28]
 8006fa6:	aa25      	add	r2, sp, #148	; 0x94
 8006fa8:	f003 ff92 	bl	800aed0 <__sprint_r>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f47f aef7 	bne.w	8006da0 <_vfprintf_r+0x250>
 8006fb2:	3c10      	subs	r4, #16
 8006fb4:	2c10      	cmp	r4, #16
 8006fb6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8006fb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fba:	ae32      	add	r6, sp, #200	; 0xc8
 8006fbc:	dce7      	bgt.n	8006f8e <_vfprintf_r+0x43e>
 8006fbe:	4655      	mov	r5, sl
 8006fc0:	46a2      	mov	sl, r4
 8006fc2:	4614      	mov	r4, r2
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	4454      	add	r4, sl
 8006fc8:	2b07      	cmp	r3, #7
 8006fca:	e886 0420 	stmia.w	r6, {r5, sl}
 8006fce:	9427      	str	r4, [sp, #156]	; 0x9c
 8006fd0:	9326      	str	r3, [sp, #152]	; 0x98
 8006fd2:	bfd8      	it	le
 8006fd4:	3608      	addle	r6, #8
 8006fd6:	dd09      	ble.n	8006fec <_vfprintf_r+0x49c>
 8006fd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006fda:	9907      	ldr	r1, [sp, #28]
 8006fdc:	aa25      	add	r2, sp, #148	; 0x94
 8006fde:	f003 ff77 	bl	800aed0 <__sprint_r>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	f47f aedc 	bne.w	8006da0 <_vfprintf_r+0x250>
 8006fe8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006fea:	ae32      	add	r6, sp, #200	; 0xc8
 8006fec:	9d05      	ldr	r5, [sp, #20]
 8006fee:	05ea      	lsls	r2, r5, #23
 8006ff0:	f100 828b 	bmi.w	800750a <_vfprintf_r+0x9ba>
 8006ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ff6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ff8:	f8c6 8000 	str.w	r8, [r6]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	442c      	add	r4, r5
 8007000:	2b07      	cmp	r3, #7
 8007002:	9427      	str	r4, [sp, #156]	; 0x9c
 8007004:	6075      	str	r5, [r6, #4]
 8007006:	9326      	str	r3, [sp, #152]	; 0x98
 8007008:	f300 8396 	bgt.w	8007738 <_vfprintf_r+0xbe8>
 800700c:	3608      	adds	r6, #8
 800700e:	9d05      	ldr	r5, [sp, #20]
 8007010:	076a      	lsls	r2, r5, #29
 8007012:	d546      	bpl.n	80070a2 <_vfprintf_r+0x552>
 8007014:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007018:	1a45      	subs	r5, r0, r1
 800701a:	2d00      	cmp	r5, #0
 800701c:	dd41      	ble.n	80070a2 <_vfprintf_r+0x552>
 800701e:	2d10      	cmp	r5, #16
 8007020:	f64b 2aa4 	movw	sl, #47780	; 0xbaa4
 8007024:	bfdc      	itt	le
 8007026:	f6c0 0a01 	movtle	sl, #2049	; 0x801
 800702a:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 800702c:	dd27      	ble.n	800707e <_vfprintf_r+0x52e>
 800702e:	9705      	str	r7, [sp, #20]
 8007030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007032:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8007036:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800703a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800703c:	f6c0 0a01 	movt	sl, #2049	; 0x801
 8007040:	f04f 0810 	mov.w	r8, #16
 8007044:	e002      	b.n	800704c <_vfprintf_r+0x4fc>
 8007046:	3d10      	subs	r5, #16
 8007048:	2d10      	cmp	r5, #16
 800704a:	dd17      	ble.n	800707c <_vfprintf_r+0x52c>
 800704c:	3301      	adds	r3, #1
 800704e:	3410      	adds	r4, #16
 8007050:	2b07      	cmp	r3, #7
 8007052:	e886 0180 	stmia.w	r6, {r7, r8}
 8007056:	9427      	str	r4, [sp, #156]	; 0x9c
 8007058:	9326      	str	r3, [sp, #152]	; 0x98
 800705a:	bfd8      	it	le
 800705c:	3608      	addle	r6, #8
 800705e:	ddf2      	ble.n	8007046 <_vfprintf_r+0x4f6>
 8007060:	4648      	mov	r0, r9
 8007062:	4659      	mov	r1, fp
 8007064:	aa25      	add	r2, sp, #148	; 0x94
 8007066:	f003 ff33 	bl	800aed0 <__sprint_r>
 800706a:	2800      	cmp	r0, #0
 800706c:	f040 8443 	bne.w	80078f6 <_vfprintf_r+0xda6>
 8007070:	3d10      	subs	r5, #16
 8007072:	2d10      	cmp	r5, #16
 8007074:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007076:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007078:	ae32      	add	r6, sp, #200	; 0xc8
 800707a:	dce7      	bgt.n	800704c <_vfprintf_r+0x4fc>
 800707c:	9f05      	ldr	r7, [sp, #20]
 800707e:	3301      	adds	r3, #1
 8007080:	442c      	add	r4, r5
 8007082:	2b07      	cmp	r3, #7
 8007084:	9427      	str	r4, [sp, #156]	; 0x9c
 8007086:	9326      	str	r3, [sp, #152]	; 0x98
 8007088:	f8c6 a000 	str.w	sl, [r6]
 800708c:	6075      	str	r5, [r6, #4]
 800708e:	dd08      	ble.n	80070a2 <_vfprintf_r+0x552>
 8007090:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007092:	9907      	ldr	r1, [sp, #28]
 8007094:	aa25      	add	r2, sp, #148	; 0x94
 8007096:	f003 ff1b 	bl	800aed0 <__sprint_r>
 800709a:	2800      	cmp	r0, #0
 800709c:	f47f ae80 	bne.w	8006da0 <_vfprintf_r+0x250>
 80070a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80070a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80070a8:	4281      	cmp	r1, r0
 80070aa:	bfac      	ite	ge
 80070ac:	186d      	addge	r5, r5, r1
 80070ae:	182d      	addlt	r5, r5, r0
 80070b0:	950f      	str	r5, [sp, #60]	; 0x3c
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	f47f ae6c 	bne.w	8006d90 <_vfprintf_r+0x240>
 80070b8:	2300      	movs	r3, #0
 80070ba:	9326      	str	r3, [sp, #152]	; 0x98
 80070bc:	ae32      	add	r6, sp, #200	; 0xc8
 80070be:	e5a0      	b.n	8006c02 <_vfprintf_r+0xb2>
 80070c0:	08e3      	lsrs	r3, r4, #3
 80070c2:	4690      	mov	r8, r2
 80070c4:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 80070c8:	08ea      	lsrs	r2, r5, #3
 80070ca:	f004 0107 	and.w	r1, r4, #7
 80070ce:	4615      	mov	r5, r2
 80070d0:	461c      	mov	r4, r3
 80070d2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80070d6:	ea54 0105 	orrs.w	r1, r4, r5
 80070da:	f888 3000 	strb.w	r3, [r8]
 80070de:	f108 32ff 	add.w	r2, r8, #4294967295
 80070e2:	d1ed      	bne.n	80070c0 <_vfprintf_r+0x570>
 80070e4:	9c05      	ldr	r4, [sp, #20]
 80070e6:	07e0      	lsls	r0, r4, #31
 80070e8:	4641      	mov	r1, r8
 80070ea:	f100 84e8 	bmi.w	8007abe <_vfprintf_r+0xf6e>
 80070ee:	9d04      	ldr	r5, [sp, #16]
 80070f0:	ebc8 0505 	rsb	r5, r8, r5
 80070f4:	950b      	str	r5, [sp, #44]	; 0x2c
 80070f6:	e6a8      	b.n	8006e4a <_vfprintf_r+0x2fa>
 80070f8:	9d05      	ldr	r5, [sp, #20]
 80070fa:	9306      	str	r3, [sp, #24]
 80070fc:	f015 0320 	ands.w	r3, r5, #32
 8007100:	f000 80b2 	beq.w	8007268 <_vfprintf_r+0x718>
 8007104:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007106:	1de3      	adds	r3, r4, #7
 8007108:	f023 0307 	bic.w	r3, r3, #7
 800710c:	f103 0508 	add.w	r5, r3, #8
 8007110:	950e      	str	r5, [sp, #56]	; 0x38
 8007112:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007116:	2300      	movs	r3, #0
 8007118:	e661      	b.n	8006dde <_vfprintf_r+0x28e>
 800711a:	f893 9000 	ldrb.w	r9, [r3]
 800711e:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8007122:	f103 0001 	add.w	r0, r3, #1
 8007126:	f000 8784 	beq.w	8008032 <_vfprintf_r+0x14e2>
 800712a:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 800712e:	2909      	cmp	r1, #9
 8007130:	bf82      	ittt	hi
 8007132:	2400      	movhi	r4, #0
 8007134:	4603      	movhi	r3, r0
 8007136:	9408      	strhi	r4, [sp, #32]
 8007138:	f63f ad98 	bhi.w	8006c6c <_vfprintf_r+0x11c>
 800713c:	2300      	movs	r3, #0
 800713e:	f810 9b01 	ldrb.w	r9, [r0], #1
 8007142:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007146:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800714a:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 800714e:	2909      	cmp	r1, #9
 8007150:	d9f5      	bls.n	800713e <_vfprintf_r+0x5ee>
 8007152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007156:	9308      	str	r3, [sp, #32]
 8007158:	4603      	mov	r3, r0
 800715a:	e587      	b.n	8006c6c <_vfprintf_r+0x11c>
 800715c:	9d05      	ldr	r5, [sp, #20]
 800715e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007162:	f045 0510 	orr.w	r5, r5, #16
 8007166:	9505      	str	r5, [sp, #20]
 8007168:	9c05      	ldr	r4, [sp, #20]
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	06a2      	lsls	r2, r4, #26
 800716e:	f140 80e8 	bpl.w	8007342 <_vfprintf_r+0x7f2>
 8007172:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007174:	1de9      	adds	r1, r5, #7
 8007176:	f021 0107 	bic.w	r1, r1, #7
 800717a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800717e:	3108      	adds	r1, #8
 8007180:	910e      	str	r1, [sp, #56]	; 0x38
 8007182:	4614      	mov	r4, r2
 8007184:	461d      	mov	r5, r3
 8007186:	2a00      	cmp	r2, #0
 8007188:	f173 0100 	sbcs.w	r1, r3, #0
 800718c:	f2c0 84a3 	blt.w	8007ad6 <_vfprintf_r+0xf86>
 8007190:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8007194:	2301      	movs	r3, #1
 8007196:	e626      	b.n	8006de6 <_vfprintf_r+0x296>
 8007198:	9c05      	ldr	r4, [sp, #20]
 800719a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800719e:	9405      	str	r4, [sp, #20]
 80071a0:	f893 9000 	ldrb.w	r9, [r3]
 80071a4:	e561      	b.n	8006c6a <_vfprintf_r+0x11a>
 80071a6:	2500      	movs	r5, #0
 80071a8:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 80071ac:	950d      	str	r5, [sp, #52]	; 0x34
 80071ae:	4628      	mov	r0, r5
 80071b0:	f813 9b01 	ldrb.w	r9, [r3], #1
 80071b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80071b8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80071bc:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 80071c0:	2909      	cmp	r1, #9
 80071c2:	d9f5      	bls.n	80071b0 <_vfprintf_r+0x660>
 80071c4:	900d      	str	r0, [sp, #52]	; 0x34
 80071c6:	e551      	b.n	8006c6c <_vfprintf_r+0x11c>
 80071c8:	9c05      	ldr	r4, [sp, #20]
 80071ca:	f044 0408 	orr.w	r4, r4, #8
 80071ce:	9405      	str	r4, [sp, #20]
 80071d0:	f893 9000 	ldrb.w	r9, [r3]
 80071d4:	e549      	b.n	8006c6a <_vfprintf_r+0x11a>
 80071d6:	9c05      	ldr	r4, [sp, #20]
 80071d8:	9306      	str	r3, [sp, #24]
 80071da:	0724      	lsls	r4, r4, #28
 80071dc:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80071e0:	f140 850f 	bpl.w	8007c02 <_vfprintf_r+0x10b2>
 80071e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80071e6:	1deb      	adds	r3, r5, #7
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	f103 0408 	add.w	r4, r3, #8
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	940e      	str	r4, [sp, #56]	; 0x38
 80071f4:	9516      	str	r5, [sp, #88]	; 0x58
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	9318      	str	r3, [sp, #96]	; 0x60
 80071fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80071fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071fe:	ec43 2b10 	vmov	d0, r2, r3
 8007202:	f003 fdbb 	bl	800ad7c <__fpclassifyd>
 8007206:	2801      	cmp	r0, #1
 8007208:	f040 846f 	bne.w	8007aea <_vfprintf_r+0xf9a>
 800720c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800720e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007210:	2200      	movs	r2, #0
 8007212:	2300      	movs	r3, #0
 8007214:	f7f9 fcfe 	bl	8000c14 <__aeabi_dcmplt>
 8007218:	2800      	cmp	r0, #0
 800721a:	f040 8618 	bne.w	8007e4e <_vfprintf_r+0x12fe>
 800721e:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8007222:	2503      	movs	r5, #3
 8007224:	9509      	str	r5, [sp, #36]	; 0x24
 8007226:	9d05      	ldr	r5, [sp, #20]
 8007228:	2400      	movs	r4, #0
 800722a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800722e:	f64b 2864 	movw	r8, #47716	; 0xba64
 8007232:	f64b 2360 	movw	r3, #47712	; 0xba60
 8007236:	f6c0 0801 	movt	r8, #2049	; 0x801
 800723a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800723e:	9408      	str	r4, [sp, #32]
 8007240:	9505      	str	r5, [sp, #20]
 8007242:	2403      	movs	r4, #3
 8007244:	2500      	movs	r5, #0
 8007246:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800724a:	bfd8      	it	le
 800724c:	4698      	movle	r8, r3
 800724e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007250:	9513      	str	r5, [sp, #76]	; 0x4c
 8007252:	e602      	b.n	8006e5a <_vfprintf_r+0x30a>
 8007254:	9c05      	ldr	r4, [sp, #20]
 8007256:	9306      	str	r3, [sp, #24]
 8007258:	f044 0410 	orr.w	r4, r4, #16
 800725c:	9405      	str	r4, [sp, #20]
 800725e:	9d05      	ldr	r5, [sp, #20]
 8007260:	f015 0320 	ands.w	r3, r5, #32
 8007264:	f47f af4e 	bne.w	8007104 <_vfprintf_r+0x5b4>
 8007268:	9c05      	ldr	r4, [sp, #20]
 800726a:	f014 0210 	ands.w	r2, r4, #16
 800726e:	f040 832a 	bne.w	80078c6 <_vfprintf_r+0xd76>
 8007272:	9c05      	ldr	r4, [sp, #20]
 8007274:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 8007278:	f000 8325 	beq.w	80078c6 <_vfprintf_r+0xd76>
 800727c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800727e:	8804      	ldrh	r4, [r0, #0]
 8007280:	3004      	adds	r0, #4
 8007282:	4613      	mov	r3, r2
 8007284:	2500      	movs	r5, #0
 8007286:	900e      	str	r0, [sp, #56]	; 0x38
 8007288:	e5a9      	b.n	8006dde <_vfprintf_r+0x28e>
 800728a:	9d05      	ldr	r5, [sp, #20]
 800728c:	9306      	str	r3, [sp, #24]
 800728e:	f045 0510 	orr.w	r5, r5, #16
 8007292:	9505      	str	r5, [sp, #20]
 8007294:	9c05      	ldr	r4, [sp, #20]
 8007296:	06a3      	lsls	r3, r4, #26
 8007298:	f53f ad97 	bmi.w	8006dca <_vfprintf_r+0x27a>
 800729c:	9d05      	ldr	r5, [sp, #20]
 800729e:	06ed      	lsls	r5, r5, #27
 80072a0:	f100 8318 	bmi.w	80078d4 <_vfprintf_r+0xd84>
 80072a4:	9c05      	ldr	r4, [sp, #20]
 80072a6:	0664      	lsls	r4, r4, #25
 80072a8:	f140 8314 	bpl.w	80078d4 <_vfprintf_r+0xd84>
 80072ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072ae:	8804      	ldrh	r4, [r0, #0]
 80072b0:	3004      	adds	r0, #4
 80072b2:	2500      	movs	r5, #0
 80072b4:	2301      	movs	r3, #1
 80072b6:	900e      	str	r0, [sp, #56]	; 0x38
 80072b8:	e591      	b.n	8006dde <_vfprintf_r+0x28e>
 80072ba:	9d05      	ldr	r5, [sp, #20]
 80072bc:	9306      	str	r3, [sp, #24]
 80072be:	f64b 2470 	movw	r4, #47728	; 0xba70
 80072c2:	f6c0 0401 	movt	r4, #2049	; 0x801
 80072c6:	06a8      	lsls	r0, r5, #26
 80072c8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80072cc:	9415      	str	r4, [sp, #84]	; 0x54
 80072ce:	f140 8091 	bpl.w	80073f4 <_vfprintf_r+0x8a4>
 80072d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80072d4:	1de3      	adds	r3, r4, #7
 80072d6:	f023 0307 	bic.w	r3, r3, #7
 80072da:	f103 0508 	add.w	r5, r3, #8
 80072de:	950e      	str	r5, [sp, #56]	; 0x38
 80072e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	07c3      	lsls	r3, r0, #31
 80072e8:	f140 8242 	bpl.w	8007770 <_vfprintf_r+0xc20>
 80072ec:	ea54 0105 	orrs.w	r1, r4, r5
 80072f0:	f000 823e 	beq.w	8007770 <_vfprintf_r+0xc20>
 80072f4:	2330      	movs	r3, #48	; 0x30
 80072f6:	f040 0002 	orr.w	r0, r0, #2
 80072fa:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80072fe:	f88d 9079 	strb.w	r9, [sp, #121]	; 0x79
 8007302:	9005      	str	r0, [sp, #20]
 8007304:	2302      	movs	r3, #2
 8007306:	e56a      	b.n	8006dde <_vfprintf_r+0x28e>
 8007308:	9306      	str	r3, [sp, #24]
 800730a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800730c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f04f 0a00 	mov.w	sl, #0
 8007314:	2501      	movs	r5, #1
 8007316:	3404      	adds	r4, #4
 8007318:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 800731c:	9509      	str	r5, [sp, #36]	; 0x24
 800731e:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
 8007322:	940e      	str	r4, [sp, #56]	; 0x38
 8007324:	f8cd a020 	str.w	sl, [sp, #32]
 8007328:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800732c:	950b      	str	r5, [sp, #44]	; 0x2c
 800732e:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 8007332:	e598      	b.n	8006e66 <_vfprintf_r+0x316>
 8007334:	9c05      	ldr	r4, [sp, #20]
 8007336:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800733a:	06a2      	lsls	r2, r4, #26
 800733c:	9306      	str	r3, [sp, #24]
 800733e:	f53f af18 	bmi.w	8007172 <_vfprintf_r+0x622>
 8007342:	9c05      	ldr	r4, [sp, #20]
 8007344:	06e3      	lsls	r3, r4, #27
 8007346:	f100 82cd 	bmi.w	80078e4 <_vfprintf_r+0xd94>
 800734a:	9c05      	ldr	r4, [sp, #20]
 800734c:	0665      	lsls	r5, r4, #25
 800734e:	f140 82c9 	bpl.w	80078e4 <_vfprintf_r+0xd94>
 8007352:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007354:	f9b0 4000 	ldrsh.w	r4, [r0]
 8007358:	3004      	adds	r0, #4
 800735a:	17e5      	asrs	r5, r4, #31
 800735c:	4622      	mov	r2, r4
 800735e:	462b      	mov	r3, r5
 8007360:	900e      	str	r0, [sp, #56]	; 0x38
 8007362:	e710      	b.n	8007186 <_vfprintf_r+0x636>
 8007364:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007366:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007368:	6824      	ldr	r4, [r4, #0]
 800736a:	2c00      	cmp	r4, #0
 800736c:	940d      	str	r4, [sp, #52]	; 0x34
 800736e:	f105 0104 	add.w	r1, r5, #4
 8007372:	f6ff acdb 	blt.w	8006d2c <_vfprintf_r+0x1dc>
 8007376:	910e      	str	r1, [sp, #56]	; 0x38
 8007378:	f893 9000 	ldrb.w	r9, [r3]
 800737c:	e475      	b.n	8006c6a <_vfprintf_r+0x11a>
 800737e:	9c05      	ldr	r4, [sp, #20]
 8007380:	f044 0420 	orr.w	r4, r4, #32
 8007384:	9405      	str	r4, [sp, #20]
 8007386:	f893 9000 	ldrb.w	r9, [r3]
 800738a:	e46e      	b.n	8006c6a <_vfprintf_r+0x11a>
 800738c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800738e:	9306      	str	r3, [sp, #24]
 8007390:	f8d4 8000 	ldr.w	r8, [r4]
 8007394:	2500      	movs	r5, #0
 8007396:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
 800739a:	3404      	adds	r4, #4
 800739c:	f1b8 0f00 	cmp.w	r8, #0
 80073a0:	f000 8540 	beq.w	8007e24 <_vfprintf_r+0x12d4>
 80073a4:	9808      	ldr	r0, [sp, #32]
 80073a6:	2800      	cmp	r0, #0
 80073a8:	4640      	mov	r0, r8
 80073aa:	f2c0 850e 	blt.w	8007dca <_vfprintf_r+0x127a>
 80073ae:	4629      	mov	r1, r5
 80073b0:	9a08      	ldr	r2, [sp, #32]
 80073b2:	f002 ff09 	bl	800a1c8 <memchr>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f000 858b 	beq.w	8007ed2 <_vfprintf_r+0x1382>
 80073bc:	9908      	ldr	r1, [sp, #32]
 80073be:	940e      	str	r4, [sp, #56]	; 0x38
 80073c0:	ebc8 0000 	rsb	r0, r8, r0
 80073c4:	4288      	cmp	r0, r1
 80073c6:	bfb8      	it	lt
 80073c8:	4601      	movlt	r1, r0
 80073ca:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 80073ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80073d0:	9508      	str	r5, [sp, #32]
 80073d2:	9409      	str	r4, [sp, #36]	; 0x24
 80073d4:	9513      	str	r5, [sp, #76]	; 0x4c
 80073d6:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 80073da:	e53e      	b.n	8006e5a <_vfprintf_r+0x30a>
 80073dc:	9d05      	ldr	r5, [sp, #20]
 80073de:	9306      	str	r3, [sp, #24]
 80073e0:	f64b 2484 	movw	r4, #47748	; 0xba84
 80073e4:	f6c0 0401 	movt	r4, #2049	; 0x801
 80073e8:	06a8      	lsls	r0, r5, #26
 80073ea:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80073ee:	9415      	str	r4, [sp, #84]	; 0x54
 80073f0:	f53f af6f 	bmi.w	80072d2 <_vfprintf_r+0x782>
 80073f4:	9c05      	ldr	r4, [sp, #20]
 80073f6:	06e1      	lsls	r1, r4, #27
 80073f8:	f100 825f 	bmi.w	80078ba <_vfprintf_r+0xd6a>
 80073fc:	9c05      	ldr	r4, [sp, #20]
 80073fe:	0662      	lsls	r2, r4, #25
 8007400:	f140 825b 	bpl.w	80078ba <_vfprintf_r+0xd6a>
 8007404:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007406:	8804      	ldrh	r4, [r0, #0]
 8007408:	3004      	adds	r0, #4
 800740a:	2500      	movs	r5, #0
 800740c:	900e      	str	r0, [sp, #56]	; 0x38
 800740e:	e769      	b.n	80072e4 <_vfprintf_r+0x794>
 8007410:	f893 9000 	ldrb.w	r9, [r3]
 8007414:	222b      	movs	r2, #43	; 0x2b
 8007416:	e428      	b.n	8006c6a <_vfprintf_r+0x11a>
 8007418:	f893 9000 	ldrb.w	r9, [r3]
 800741c:	2a00      	cmp	r2, #0
 800741e:	f47f ac24 	bne.w	8006c6a <_vfprintf_r+0x11a>
 8007422:	2220      	movs	r2, #32
 8007424:	e421      	b.n	8006c6a <_vfprintf_r+0x11a>
 8007426:	9d05      	ldr	r5, [sp, #20]
 8007428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800742a:	9306      	str	r3, [sp, #24]
 800742c:	f045 0502 	orr.w	r5, r5, #2
 8007430:	f64b 2084 	movw	r0, #47748	; 0xba84
 8007434:	2330      	movs	r3, #48	; 0x30
 8007436:	f04f 0978 	mov.w	r9, #120	; 0x78
 800743a:	9505      	str	r5, [sp, #20]
 800743c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007440:	1d15      	adds	r5, r2, #4
 8007442:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007446:	950e      	str	r5, [sp, #56]	; 0x38
 8007448:	6814      	ldr	r4, [r2, #0]
 800744a:	f88d 9079 	strb.w	r9, [sp, #121]	; 0x79
 800744e:	2500      	movs	r5, #0
 8007450:	9015      	str	r0, [sp, #84]	; 0x54
 8007452:	2302      	movs	r3, #2
 8007454:	e4c3      	b.n	8006dde <_vfprintf_r+0x28e>
 8007456:	9d05      	ldr	r5, [sp, #20]
 8007458:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800745c:	9505      	str	r5, [sp, #20]
 800745e:	f893 9000 	ldrb.w	r9, [r3]
 8007462:	e402      	b.n	8006c6a <_vfprintf_r+0x11a>
 8007464:	f893 9000 	ldrb.w	r9, [r3]
 8007468:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
 800746c:	bf0c      	ite	eq
 800746e:	9c05      	ldreq	r4, [sp, #20]
 8007470:	9d05      	ldrne	r5, [sp, #20]
 8007472:	4619      	mov	r1, r3
 8007474:	bf09      	itett	eq
 8007476:	f044 0420 	orreq.w	r4, r4, #32
 800747a:	f045 0510 	orrne.w	r5, r5, #16
 800747e:	3301      	addeq	r3, #1
 8007480:	9405      	streq	r4, [sp, #20]
 8007482:	bf0c      	ite	eq
 8007484:	f891 9001 	ldrbeq.w	r9, [r1, #1]
 8007488:	9505      	strne	r5, [sp, #20]
 800748a:	f7ff bbee 	b.w	8006c6a <_vfprintf_r+0x11a>
 800748e:	9d05      	ldr	r5, [sp, #20]
 8007490:	9306      	str	r3, [sp, #24]
 8007492:	06a9      	lsls	r1, r5, #26
 8007494:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8007498:	f140 83c0 	bpl.w	8007c1c <_vfprintf_r+0x10cc>
 800749c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800749e:	6821      	ldr	r1, [r4, #0]
 80074a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80074a2:	17e5      	asrs	r5, r4, #31
 80074a4:	462b      	mov	r3, r5
 80074a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80074a8:	4622      	mov	r2, r4
 80074aa:	3504      	adds	r5, #4
 80074ac:	950e      	str	r5, [sp, #56]	; 0x38
 80074ae:	e9c1 2300 	strd	r2, r3, [r1]
 80074b2:	f7ff bba6 	b.w	8006c02 <_vfprintf_r+0xb2>
 80074b6:	9d05      	ldr	r5, [sp, #20]
 80074b8:	f045 0501 	orr.w	r5, r5, #1
 80074bc:	9505      	str	r5, [sp, #20]
 80074be:	f893 9000 	ldrb.w	r9, [r3]
 80074c2:	f7ff bbd2 	b.w	8006c6a <_vfprintf_r+0x11a>
 80074c6:	9306      	str	r3, [sp, #24]
 80074c8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80074cc:	f1b9 0f00 	cmp.w	r9, #0
 80074d0:	f000 8407 	beq.w	8007ce2 <_vfprintf_r+0x1192>
 80074d4:	2300      	movs	r3, #0
 80074d6:	2501      	movs	r5, #1
 80074d8:	469a      	mov	sl, r3
 80074da:	9509      	str	r5, [sp, #36]	; 0x24
 80074dc:	f88d 90a0 	strb.w	r9, [sp, #160]	; 0xa0
 80074e0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80074e4:	9308      	str	r3, [sp, #32]
 80074e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80074e8:	950b      	str	r5, [sp, #44]	; 0x2c
 80074ea:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 80074ee:	e4ba      	b.n	8006e66 <_vfprintf_r+0x316>
 80074f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80074f2:	e508      	b.n	8006f06 <_vfprintf_r+0x3b6>
 80074f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074f6:	9907      	ldr	r1, [sp, #28]
 80074f8:	aa25      	add	r2, sp, #148	; 0x94
 80074fa:	f003 fce9 	bl	800aed0 <__sprint_r>
 80074fe:	2800      	cmp	r0, #0
 8007500:	f47f ac4e 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007504:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007506:	ae32      	add	r6, sp, #200	; 0xc8
 8007508:	e50f      	b.n	8006f2a <_vfprintf_r+0x3da>
 800750a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800750e:	f340 80c2 	ble.w	8007696 <_vfprintf_r+0xb46>
 8007512:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007514:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007516:	2200      	movs	r2, #0
 8007518:	2300      	movs	r3, #0
 800751a:	f7f9 fb71 	bl	8000c00 <__aeabi_dcmpeq>
 800751e:	2800      	cmp	r0, #0
 8007520:	f000 8129 	beq.w	8007776 <_vfprintf_r+0xc26>
 8007524:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007526:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007528:	3301      	adds	r3, #1
 800752a:	3401      	adds	r4, #1
 800752c:	2201      	movs	r2, #1
 800752e:	2b07      	cmp	r3, #7
 8007530:	6035      	str	r5, [r6, #0]
 8007532:	6072      	str	r2, [r6, #4]
 8007534:	9427      	str	r4, [sp, #156]	; 0x9c
 8007536:	9326      	str	r3, [sp, #152]	; 0x98
 8007538:	bfd8      	it	le
 800753a:	3608      	addle	r6, #8
 800753c:	f300 8379 	bgt.w	8007c32 <_vfprintf_r+0x10e2>
 8007540:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007542:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007544:	42ab      	cmp	r3, r5
 8007546:	db03      	blt.n	8007550 <_vfprintf_r+0xa00>
 8007548:	9d05      	ldr	r5, [sp, #20]
 800754a:	07eb      	lsls	r3, r5, #31
 800754c:	f57f ad5f 	bpl.w	800700e <_vfprintf_r+0x4be>
 8007550:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007552:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007554:	6035      	str	r5, [r6, #0]
 8007556:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007558:	3301      	adds	r3, #1
 800755a:	442c      	add	r4, r5
 800755c:	2b07      	cmp	r3, #7
 800755e:	6075      	str	r5, [r6, #4]
 8007560:	9427      	str	r4, [sp, #156]	; 0x9c
 8007562:	9326      	str	r3, [sp, #152]	; 0x98
 8007564:	bfd8      	it	le
 8007566:	3608      	addle	r6, #8
 8007568:	f300 83fe 	bgt.w	8007d68 <_vfprintf_r+0x1218>
 800756c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800756e:	f105 38ff 	add.w	r8, r5, #4294967295
 8007572:	f1b8 0f00 	cmp.w	r8, #0
 8007576:	f77f ad4a 	ble.w	800700e <_vfprintf_r+0x4be>
 800757a:	f1b8 0f10 	cmp.w	r8, #16
 800757e:	f64b 2550 	movw	r5, #47696	; 0xba50
 8007582:	f340 853a 	ble.w	8007ffa <_vfprintf_r+0x14aa>
 8007586:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007588:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800758c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007590:	f6c0 0501 	movt	r5, #2049	; 0x801
 8007594:	f04f 0910 	mov.w	r9, #16
 8007598:	e005      	b.n	80075a6 <_vfprintf_r+0xa56>
 800759a:	f1a8 0810 	sub.w	r8, r8, #16
 800759e:	f1b8 0f10 	cmp.w	r8, #16
 80075a2:	f340 80c0 	ble.w	8007726 <_vfprintf_r+0xbd6>
 80075a6:	3301      	adds	r3, #1
 80075a8:	3410      	adds	r4, #16
 80075aa:	2b07      	cmp	r3, #7
 80075ac:	e886 0280 	stmia.w	r6, {r7, r9}
 80075b0:	9427      	str	r4, [sp, #156]	; 0x9c
 80075b2:	9326      	str	r3, [sp, #152]	; 0x98
 80075b4:	bfd8      	it	le
 80075b6:	3608      	addle	r6, #8
 80075b8:	ddef      	ble.n	800759a <_vfprintf_r+0xa4a>
 80075ba:	4650      	mov	r0, sl
 80075bc:	4659      	mov	r1, fp
 80075be:	aa25      	add	r2, sp, #148	; 0x94
 80075c0:	f003 fc86 	bl	800aed0 <__sprint_r>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f040 8196 	bne.w	80078f6 <_vfprintf_r+0xda6>
 80075ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80075cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075ce:	ae32      	add	r6, sp, #200	; 0xc8
 80075d0:	e7e3      	b.n	800759a <_vfprintf_r+0xa4a>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 80bb 	bne.w	800774e <_vfprintf_r+0xbfe>
 80075d8:	9c05      	ldr	r4, [sp, #20]
 80075da:	07e1      	lsls	r1, r4, #31
 80075dc:	bf5c      	itt	pl
 80075de:	930b      	strpl	r3, [sp, #44]	; 0x2c
 80075e0:	f10d 08c8 	addpl.w	r8, sp, #200	; 0xc8
 80075e4:	f57f ac31 	bpl.w	8006e4a <_vfprintf_r+0x2fa>
 80075e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80075ea:	2330      	movs	r3, #48	; 0x30
 80075ec:	f88d 30c7 	strb.w	r3, [sp, #199]	; 0xc7
 80075f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80075f2:	f10d 08c7 	add.w	r8, sp, #199	; 0xc7
 80075f6:	e428      	b.n	8006e4a <_vfprintf_r+0x2fa>
 80075f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80075fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075fc:	ebc0 0a05 	rsb	sl, r0, r5
 8007600:	f1ba 0f00 	cmp.w	sl, #0
 8007604:	f77f aca6 	ble.w	8006f54 <_vfprintf_r+0x404>
 8007608:	f1ba 0f10 	cmp.w	sl, #16
 800760c:	f64b 2550 	movw	r5, #47696	; 0xba50
 8007610:	bfdc      	itt	le
 8007612:	f6c0 0501 	movtle	r5, #2049	; 0x801
 8007616:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 8007618:	dd27      	ble.n	800766a <_vfprintf_r+0xb1a>
 800761a:	f6c0 0501 	movt	r5, #2049	; 0x801
 800761e:	4622      	mov	r2, r4
 8007620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007622:	4654      	mov	r4, sl
 8007624:	f04f 0b10 	mov.w	fp, #16
 8007628:	46aa      	mov	sl, r5
 800762a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800762c:	e002      	b.n	8007634 <_vfprintf_r+0xae4>
 800762e:	3c10      	subs	r4, #16
 8007630:	2c10      	cmp	r4, #16
 8007632:	dd17      	ble.n	8007664 <_vfprintf_r+0xb14>
 8007634:	3301      	adds	r3, #1
 8007636:	3210      	adds	r2, #16
 8007638:	2b07      	cmp	r3, #7
 800763a:	e886 0880 	stmia.w	r6, {r7, fp}
 800763e:	9227      	str	r2, [sp, #156]	; 0x9c
 8007640:	9326      	str	r3, [sp, #152]	; 0x98
 8007642:	bfd8      	it	le
 8007644:	3608      	addle	r6, #8
 8007646:	ddf2      	ble.n	800762e <_vfprintf_r+0xade>
 8007648:	4628      	mov	r0, r5
 800764a:	9907      	ldr	r1, [sp, #28]
 800764c:	aa25      	add	r2, sp, #148	; 0x94
 800764e:	f003 fc3f 	bl	800aed0 <__sprint_r>
 8007652:	2800      	cmp	r0, #0
 8007654:	f47f aba4 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007658:	3c10      	subs	r4, #16
 800765a:	2c10      	cmp	r4, #16
 800765c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800765e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007660:	ae32      	add	r6, sp, #200	; 0xc8
 8007662:	dce7      	bgt.n	8007634 <_vfprintf_r+0xae4>
 8007664:	4655      	mov	r5, sl
 8007666:	46a2      	mov	sl, r4
 8007668:	4614      	mov	r4, r2
 800766a:	3301      	adds	r3, #1
 800766c:	4454      	add	r4, sl
 800766e:	2b07      	cmp	r3, #7
 8007670:	e886 0420 	stmia.w	r6, {r5, sl}
 8007674:	9427      	str	r4, [sp, #156]	; 0x9c
 8007676:	9326      	str	r3, [sp, #152]	; 0x98
 8007678:	bfd8      	it	le
 800767a:	3608      	addle	r6, #8
 800767c:	f77f ac6a 	ble.w	8006f54 <_vfprintf_r+0x404>
 8007680:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007682:	9907      	ldr	r1, [sp, #28]
 8007684:	aa25      	add	r2, sp, #148	; 0x94
 8007686:	f003 fc23 	bl	800aed0 <__sprint_r>
 800768a:	2800      	cmp	r0, #0
 800768c:	f47f ab88 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007690:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007692:	ae32      	add	r6, sp, #200	; 0xc8
 8007694:	e45e      	b.n	8006f54 <_vfprintf_r+0x404>
 8007696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007698:	2d01      	cmp	r5, #1
 800769a:	f340 81b1 	ble.w	8007a00 <_vfprintf_r+0xeb0>
 800769e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076a0:	f8c6 8000 	str.w	r8, [r6]
 80076a4:	3301      	adds	r3, #1
 80076a6:	1c62      	adds	r2, r4, #1
 80076a8:	2101      	movs	r1, #1
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	6071      	str	r1, [r6, #4]
 80076ae:	9227      	str	r2, [sp, #156]	; 0x9c
 80076b0:	9326      	str	r3, [sp, #152]	; 0x98
 80076b2:	bfd8      	it	le
 80076b4:	3608      	addle	r6, #8
 80076b6:	f300 81ce 	bgt.w	8007a56 <_vfprintf_r+0xf06>
 80076ba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80076bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80076be:	4422      	add	r2, r4
 80076c0:	6035      	str	r5, [r6, #0]
 80076c2:	1c5c      	adds	r4, r3, #1
 80076c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80076c6:	9227      	str	r2, [sp, #156]	; 0x9c
 80076c8:	2c07      	cmp	r4, #7
 80076ca:	9426      	str	r4, [sp, #152]	; 0x98
 80076cc:	6075      	str	r5, [r6, #4]
 80076ce:	f300 81ce 	bgt.w	8007a6e <_vfprintf_r+0xf1e>
 80076d2:	3608      	adds	r6, #8
 80076d4:	4691      	mov	r9, r2
 80076d6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80076d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076da:	2200      	movs	r2, #0
 80076dc:	2300      	movs	r3, #0
 80076de:	f7f9 fa8f 	bl	8000c00 <__aeabi_dcmpeq>
 80076e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f040 80b6 	bne.w	8007856 <_vfprintf_r+0xd06>
 80076ea:	1e6b      	subs	r3, r5, #1
 80076ec:	3401      	adds	r4, #1
 80076ee:	f108 0101 	add.w	r1, r8, #1
 80076f2:	eb03 0209 	add.w	r2, r3, r9
 80076f6:	2c07      	cmp	r4, #7
 80076f8:	6031      	str	r1, [r6, #0]
 80076fa:	9426      	str	r4, [sp, #152]	; 0x98
 80076fc:	9227      	str	r2, [sp, #156]	; 0x9c
 80076fe:	6073      	str	r3, [r6, #4]
 8007700:	f300 819c 	bgt.w	8007a3c <_vfprintf_r+0xeec>
 8007704:	3608      	adds	r6, #8
 8007706:	4691      	mov	r9, r2
 8007708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800770a:	1c63      	adds	r3, r4, #1
 800770c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800770e:	9326      	str	r3, [sp, #152]	; 0x98
 8007710:	444a      	add	r2, r9
 8007712:	a921      	add	r1, sp, #132	; 0x84
 8007714:	2b07      	cmp	r3, #7
 8007716:	9227      	str	r2, [sp, #156]	; 0x9c
 8007718:	e886 0012 	stmia.w	r6, {r1, r4}
 800771c:	dc0c      	bgt.n	8007738 <_vfprintf_r+0xbe8>
 800771e:	3608      	adds	r6, #8
 8007720:	4614      	mov	r4, r2
 8007722:	e474      	b.n	800700e <_vfprintf_r+0x4be>
 8007724:	4614      	mov	r4, r2
 8007726:	3301      	adds	r3, #1
 8007728:	4444      	add	r4, r8
 800772a:	2b07      	cmp	r3, #7
 800772c:	9427      	str	r4, [sp, #156]	; 0x9c
 800772e:	9326      	str	r3, [sp, #152]	; 0x98
 8007730:	e886 0120 	stmia.w	r6, {r5, r8}
 8007734:	f77f ac6a 	ble.w	800700c <_vfprintf_r+0x4bc>
 8007738:	980a      	ldr	r0, [sp, #40]	; 0x28
 800773a:	9907      	ldr	r1, [sp, #28]
 800773c:	aa25      	add	r2, sp, #148	; 0x94
 800773e:	f003 fbc7 	bl	800aed0 <__sprint_r>
 8007742:	2800      	cmp	r0, #0
 8007744:	f47f ab2c 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007748:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800774a:	ae32      	add	r6, sp, #200	; 0xc8
 800774c:	e45f      	b.n	800700e <_vfprintf_r+0x4be>
 800774e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007750:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8007754:	f7ff bb79 	b.w	8006e4a <_vfprintf_r+0x2fa>
 8007758:	980a      	ldr	r0, [sp, #40]	; 0x28
 800775a:	9907      	ldr	r1, [sp, #28]
 800775c:	aa25      	add	r2, sp, #148	; 0x94
 800775e:	f003 fbb7 	bl	800aed0 <__sprint_r>
 8007762:	2800      	cmp	r0, #0
 8007764:	f47f ab1c 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007768:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800776a:	ae32      	add	r6, sp, #200	; 0xc8
 800776c:	f7ff bbee 	b.w	8006f4c <_vfprintf_r+0x3fc>
 8007770:	2302      	movs	r3, #2
 8007772:	f7ff bb34 	b.w	8006dde <_vfprintf_r+0x28e>
 8007776:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007778:	2b00      	cmp	r3, #0
 800777a:	f340 8265 	ble.w	8007c48 <_vfprintf_r+0x10f8>
 800777e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007780:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007782:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8007786:	4285      	cmp	r5, r0
 8007788:	bfa8      	it	ge
 800778a:	4605      	movge	r5, r0
 800778c:	2d00      	cmp	r5, #0
 800778e:	44c3      	add	fp, r8
 8007790:	dd0c      	ble.n	80077ac <_vfprintf_r+0xc5c>
 8007792:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007794:	f8c6 8000 	str.w	r8, [r6]
 8007798:	3301      	adds	r3, #1
 800779a:	442c      	add	r4, r5
 800779c:	2b07      	cmp	r3, #7
 800779e:	6075      	str	r5, [r6, #4]
 80077a0:	9427      	str	r4, [sp, #156]	; 0x9c
 80077a2:	9326      	str	r3, [sp, #152]	; 0x98
 80077a4:	bfd8      	it	le
 80077a6:	3608      	addle	r6, #8
 80077a8:	f300 8323 	bgt.w	8007df2 <_vfprintf_r+0x12a2>
 80077ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80077ae:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80077b2:	ebc5 0901 	rsb	r9, r5, r1
 80077b6:	f1b9 0f00 	cmp.w	r9, #0
 80077ba:	f340 80b5 	ble.w	8007928 <_vfprintf_r+0xdd8>
 80077be:	f1b9 0f10 	cmp.w	r9, #16
 80077c2:	f64b 2550 	movw	r5, #47696	; 0xba50
 80077c6:	bfdc      	itt	le
 80077c8:	f6c0 0501 	movtle	r5, #2049	; 0x801
 80077cc:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 80077ce:	f340 8097 	ble.w	8007900 <_vfprintf_r+0xdb0>
 80077d2:	f6c0 0501 	movt	r5, #2049	; 0x801
 80077d6:	4622      	mov	r2, r4
 80077d8:	9508      	str	r5, [sp, #32]
 80077da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077de:	9d07      	ldr	r5, [sp, #28]
 80077e0:	f04f 0a10 	mov.w	sl, #16
 80077e4:	e005      	b.n	80077f2 <_vfprintf_r+0xca2>
 80077e6:	f1a9 0910 	sub.w	r9, r9, #16
 80077ea:	f1b9 0f10 	cmp.w	r9, #16
 80077ee:	f340 8085 	ble.w	80078fc <_vfprintf_r+0xdac>
 80077f2:	3301      	adds	r3, #1
 80077f4:	3210      	adds	r2, #16
 80077f6:	2b07      	cmp	r3, #7
 80077f8:	e886 0480 	stmia.w	r6, {r7, sl}
 80077fc:	9227      	str	r2, [sp, #156]	; 0x9c
 80077fe:	9326      	str	r3, [sp, #152]	; 0x98
 8007800:	bfd8      	it	le
 8007802:	3608      	addle	r6, #8
 8007804:	ddef      	ble.n	80077e6 <_vfprintf_r+0xc96>
 8007806:	4620      	mov	r0, r4
 8007808:	4629      	mov	r1, r5
 800780a:	aa25      	add	r2, sp, #148	; 0x94
 800780c:	f003 fb60 	bl	800aed0 <__sprint_r>
 8007810:	2800      	cmp	r0, #0
 8007812:	f040 8273 	bne.w	8007cfc <_vfprintf_r+0x11ac>
 8007816:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007818:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800781a:	ae32      	add	r6, sp, #200	; 0xc8
 800781c:	e7e3      	b.n	80077e6 <_vfprintf_r+0xc96>
 800781e:	2d00      	cmp	r5, #0
 8007820:	bf08      	it	eq
 8007822:	2c0a      	cmpeq	r4, #10
 8007824:	f080 8130 	bcs.w	8007a88 <_vfprintf_r+0xf38>
 8007828:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800782a:	3430      	adds	r4, #48	; 0x30
 800782c:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
 8007830:	950b      	str	r5, [sp, #44]	; 0x2c
 8007832:	f10d 08c7 	add.w	r8, sp, #199	; 0xc7
 8007836:	f7ff bb08 	b.w	8006e4a <_vfprintf_r+0x2fa>
 800783a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800783c:	9907      	ldr	r1, [sp, #28]
 800783e:	aa25      	add	r2, sp, #148	; 0x94
 8007840:	f003 fb46 	bl	800aed0 <__sprint_r>
 8007844:	2800      	cmp	r0, #0
 8007846:	f47f aaab 	bne.w	8006da0 <_vfprintf_r+0x250>
 800784a:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 800784e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007850:	ae32      	add	r6, sp, #200	; 0xc8
 8007852:	f7ff bb58 	b.w	8006f06 <_vfprintf_r+0x3b6>
 8007856:	f105 38ff 	add.w	r8, r5, #4294967295
 800785a:	f1b8 0f00 	cmp.w	r8, #0
 800785e:	f77f af53 	ble.w	8007708 <_vfprintf_r+0xbb8>
 8007862:	f64b 2550 	movw	r5, #47696	; 0xba50
 8007866:	f1b8 0f10 	cmp.w	r8, #16
 800786a:	f6c0 0501 	movt	r5, #2049	; 0x801
 800786e:	f340 80dc 	ble.w	8007a2a <_vfprintf_r+0xeda>
 8007872:	464b      	mov	r3, r9
 8007874:	f04f 0a10 	mov.w	sl, #16
 8007878:	46a9      	mov	r9, r5
 800787a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800787e:	9d07      	ldr	r5, [sp, #28]
 8007880:	e005      	b.n	800788e <_vfprintf_r+0xd3e>
 8007882:	f1a8 0810 	sub.w	r8, r8, #16
 8007886:	f1b8 0f10 	cmp.w	r8, #16
 800788a:	f340 80cc 	ble.w	8007a26 <_vfprintf_r+0xed6>
 800788e:	3401      	adds	r4, #1
 8007890:	3310      	adds	r3, #16
 8007892:	2c07      	cmp	r4, #7
 8007894:	e886 0480 	stmia.w	r6, {r7, sl}
 8007898:	9327      	str	r3, [sp, #156]	; 0x9c
 800789a:	9426      	str	r4, [sp, #152]	; 0x98
 800789c:	bfd8      	it	le
 800789e:	3608      	addle	r6, #8
 80078a0:	ddef      	ble.n	8007882 <_vfprintf_r+0xd32>
 80078a2:	4658      	mov	r0, fp
 80078a4:	4629      	mov	r1, r5
 80078a6:	aa25      	add	r2, sp, #148	; 0x94
 80078a8:	f003 fb12 	bl	800aed0 <__sprint_r>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	f040 8225 	bne.w	8007cfc <_vfprintf_r+0x11ac>
 80078b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80078b4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80078b6:	ae32      	add	r6, sp, #200	; 0xc8
 80078b8:	e7e3      	b.n	8007882 <_vfprintf_r+0xd32>
 80078ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80078bc:	682c      	ldr	r4, [r5, #0]
 80078be:	3504      	adds	r5, #4
 80078c0:	950e      	str	r5, [sp, #56]	; 0x38
 80078c2:	2500      	movs	r5, #0
 80078c4:	e50e      	b.n	80072e4 <_vfprintf_r+0x794>
 80078c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80078c8:	682c      	ldr	r4, [r5, #0]
 80078ca:	3504      	adds	r5, #4
 80078cc:	950e      	str	r5, [sp, #56]	; 0x38
 80078ce:	2500      	movs	r5, #0
 80078d0:	f7ff ba85 	b.w	8006dde <_vfprintf_r+0x28e>
 80078d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80078d6:	682c      	ldr	r4, [r5, #0]
 80078d8:	3504      	adds	r5, #4
 80078da:	950e      	str	r5, [sp, #56]	; 0x38
 80078dc:	2301      	movs	r3, #1
 80078de:	2500      	movs	r5, #0
 80078e0:	f7ff ba7d 	b.w	8006dde <_vfprintf_r+0x28e>
 80078e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80078e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078e8:	682c      	ldr	r4, [r5, #0]
 80078ea:	3004      	adds	r0, #4
 80078ec:	17e5      	asrs	r5, r4, #31
 80078ee:	900e      	str	r0, [sp, #56]	; 0x38
 80078f0:	4622      	mov	r2, r4
 80078f2:	462b      	mov	r3, r5
 80078f4:	e447      	b.n	8007186 <_vfprintf_r+0x636>
 80078f6:	46d9      	mov	r9, fp
 80078f8:	f7ff ba54 	b.w	8006da4 <_vfprintf_r+0x254>
 80078fc:	9d08      	ldr	r5, [sp, #32]
 80078fe:	4614      	mov	r4, r2
 8007900:	3301      	adds	r3, #1
 8007902:	444c      	add	r4, r9
 8007904:	2b07      	cmp	r3, #7
 8007906:	e886 0220 	stmia.w	r6, {r5, r9}
 800790a:	9427      	str	r4, [sp, #156]	; 0x9c
 800790c:	9326      	str	r3, [sp, #152]	; 0x98
 800790e:	bfd8      	it	le
 8007910:	3608      	addle	r6, #8
 8007912:	dd09      	ble.n	8007928 <_vfprintf_r+0xdd8>
 8007914:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007916:	9907      	ldr	r1, [sp, #28]
 8007918:	aa25      	add	r2, sp, #148	; 0x94
 800791a:	f003 fad9 	bl	800aed0 <__sprint_r>
 800791e:	2800      	cmp	r0, #0
 8007920:	f47f aa3e 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007924:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007926:	ae32      	add	r6, sp, #200	; 0xc8
 8007928:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800792a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800792c:	44a8      	add	r8, r5
 800792e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007930:	42ab      	cmp	r3, r5
 8007932:	db4c      	blt.n	80079ce <_vfprintf_r+0xe7e>
 8007934:	9d05      	ldr	r5, [sp, #20]
 8007936:	07e8      	lsls	r0, r5, #31
 8007938:	d449      	bmi.n	80079ce <_vfprintf_r+0xe7e>
 800793a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800793c:	ebc8 050b 	rsb	r5, r8, fp
 8007940:	1ac3      	subs	r3, r0, r3
 8007942:	42ab      	cmp	r3, r5
 8007944:	bfb8      	it	lt
 8007946:	461d      	movlt	r5, r3
 8007948:	2d00      	cmp	r5, #0
 800794a:	dd0c      	ble.n	8007966 <_vfprintf_r+0xe16>
 800794c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800794e:	f8c6 8000 	str.w	r8, [r6]
 8007952:	3201      	adds	r2, #1
 8007954:	442c      	add	r4, r5
 8007956:	2a07      	cmp	r2, #7
 8007958:	6075      	str	r5, [r6, #4]
 800795a:	9427      	str	r4, [sp, #156]	; 0x9c
 800795c:	9226      	str	r2, [sp, #152]	; 0x98
 800795e:	bfd8      	it	le
 8007960:	3608      	addle	r6, #8
 8007962:	f300 8251 	bgt.w	8007e08 <_vfprintf_r+0x12b8>
 8007966:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800796a:	ebc5 0803 	rsb	r8, r5, r3
 800796e:	f1b8 0f00 	cmp.w	r8, #0
 8007972:	f77f ab4c 	ble.w	800700e <_vfprintf_r+0x4be>
 8007976:	f1b8 0f10 	cmp.w	r8, #16
 800797a:	f64b 2550 	movw	r5, #47696	; 0xba50
 800797e:	f340 833c 	ble.w	8007ffa <_vfprintf_r+0x14aa>
 8007982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007984:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007988:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800798c:	f6c0 0501 	movt	r5, #2049	; 0x801
 8007990:	f04f 0910 	mov.w	r9, #16
 8007994:	4622      	mov	r2, r4
 8007996:	e005      	b.n	80079a4 <_vfprintf_r+0xe54>
 8007998:	f1a8 0810 	sub.w	r8, r8, #16
 800799c:	f1b8 0f10 	cmp.w	r8, #16
 80079a0:	f77f aec0 	ble.w	8007724 <_vfprintf_r+0xbd4>
 80079a4:	3301      	adds	r3, #1
 80079a6:	3210      	adds	r2, #16
 80079a8:	2b07      	cmp	r3, #7
 80079aa:	e886 0280 	stmia.w	r6, {r7, r9}
 80079ae:	9227      	str	r2, [sp, #156]	; 0x9c
 80079b0:	9326      	str	r3, [sp, #152]	; 0x98
 80079b2:	bfd8      	it	le
 80079b4:	3608      	addle	r6, #8
 80079b6:	ddef      	ble.n	8007998 <_vfprintf_r+0xe48>
 80079b8:	4650      	mov	r0, sl
 80079ba:	4659      	mov	r1, fp
 80079bc:	aa25      	add	r2, sp, #148	; 0x94
 80079be:	f003 fa87 	bl	800aed0 <__sprint_r>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d197      	bne.n	80078f6 <_vfprintf_r+0xda6>
 80079c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80079c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079ca:	ae32      	add	r6, sp, #200	; 0xc8
 80079cc:	e7e4      	b.n	8007998 <_vfprintf_r+0xe48>
 80079ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80079d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80079d2:	6035      	str	r5, [r6, #0]
 80079d4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80079d6:	3201      	adds	r2, #1
 80079d8:	442c      	add	r4, r5
 80079da:	2a07      	cmp	r2, #7
 80079dc:	6075      	str	r5, [r6, #4]
 80079de:	9427      	str	r4, [sp, #156]	; 0x9c
 80079e0:	9226      	str	r2, [sp, #152]	; 0x98
 80079e2:	bfd8      	it	le
 80079e4:	3608      	addle	r6, #8
 80079e6:	dda8      	ble.n	800793a <_vfprintf_r+0xdea>
 80079e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079ea:	9907      	ldr	r1, [sp, #28]
 80079ec:	aa25      	add	r2, sp, #148	; 0x94
 80079ee:	f003 fa6f 	bl	800aed0 <__sprint_r>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f47f a9d4 	bne.w	8006da0 <_vfprintf_r+0x250>
 80079f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80079fc:	ae32      	add	r6, sp, #200	; 0xc8
 80079fe:	e79c      	b.n	800793a <_vfprintf_r+0xdea>
 8007a00:	9d05      	ldr	r5, [sp, #20]
 8007a02:	07e9      	lsls	r1, r5, #31
 8007a04:	f53f ae4b 	bmi.w	800769e <_vfprintf_r+0xb4e>
 8007a08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a0a:	f8c6 8000 	str.w	r8, [r6]
 8007a0e:	1c63      	adds	r3, r4, #1
 8007a10:	1c54      	adds	r4, r2, #1
 8007a12:	2c07      	cmp	r4, #7
 8007a14:	f04f 0201 	mov.w	r2, #1
 8007a18:	9327      	str	r3, [sp, #156]	; 0x9c
 8007a1a:	9426      	str	r4, [sp, #152]	; 0x98
 8007a1c:	6072      	str	r2, [r6, #4]
 8007a1e:	dc0d      	bgt.n	8007a3c <_vfprintf_r+0xeec>
 8007a20:	3608      	adds	r6, #8
 8007a22:	4699      	mov	r9, r3
 8007a24:	e670      	b.n	8007708 <_vfprintf_r+0xbb8>
 8007a26:	464d      	mov	r5, r9
 8007a28:	4699      	mov	r9, r3
 8007a2a:	3401      	adds	r4, #1
 8007a2c:	eb08 0309 	add.w	r3, r8, r9
 8007a30:	2c07      	cmp	r4, #7
 8007a32:	9327      	str	r3, [sp, #156]	; 0x9c
 8007a34:	9426      	str	r4, [sp, #152]	; 0x98
 8007a36:	e886 0120 	stmia.w	r6, {r5, r8}
 8007a3a:	ddf1      	ble.n	8007a20 <_vfprintf_r+0xed0>
 8007a3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a3e:	9907      	ldr	r1, [sp, #28]
 8007a40:	aa25      	add	r2, sp, #148	; 0x94
 8007a42:	f003 fa45 	bl	800aed0 <__sprint_r>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f47f a9aa 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007a4c:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8007a50:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8007a52:	ae32      	add	r6, sp, #200	; 0xc8
 8007a54:	e658      	b.n	8007708 <_vfprintf_r+0xbb8>
 8007a56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a58:	9907      	ldr	r1, [sp, #28]
 8007a5a:	aa25      	add	r2, sp, #148	; 0x94
 8007a5c:	f003 fa38 	bl	800aed0 <__sprint_r>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f47f a99d 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007a66:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007a68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a6a:	ae32      	add	r6, sp, #200	; 0xc8
 8007a6c:	e625      	b.n	80076ba <_vfprintf_r+0xb6a>
 8007a6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a70:	9907      	ldr	r1, [sp, #28]
 8007a72:	aa25      	add	r2, sp, #148	; 0x94
 8007a74:	f003 fa2c 	bl	800aed0 <__sprint_r>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	f47f a991 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007a7e:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8007a82:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8007a84:	ae32      	add	r6, sp, #200	; 0xc8
 8007a86:	e626      	b.n	80076d6 <_vfprintf_r+0xb86>
 8007a88:	f10d 0bc7 	add.w	fp, sp, #199	; 0xc7
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	4629      	mov	r1, r5
 8007a90:	220a      	movs	r2, #10
 8007a92:	2300      	movs	r3, #0
 8007a94:	f7f9 f90e 	bl	8000cb4 <__aeabi_uldivmod>
 8007a98:	3230      	adds	r2, #48	; 0x30
 8007a9a:	f88b 2000 	strb.w	r2, [fp]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f7f9 f905 	bl	8000cb4 <__aeabi_uldivmod>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	ea54 0005 	orrs.w	r0, r4, r5
 8007ab2:	46d8      	mov	r8, fp
 8007ab4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ab8:	d1e8      	bne.n	8007a8c <_vfprintf_r+0xf3c>
 8007aba:	f7ff b9c2 	b.w	8006e42 <_vfprintf_r+0x2f2>
 8007abe:	2b30      	cmp	r3, #48	; 0x30
 8007ac0:	f43f a9bf 	beq.w	8006e42 <_vfprintf_r+0x2f2>
 8007ac4:	9c04      	ldr	r4, [sp, #16]
 8007ac6:	2330      	movs	r3, #48	; 0x30
 8007ac8:	1aa4      	subs	r4, r4, r2
 8007aca:	4690      	mov	r8, r2
 8007acc:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ace:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007ad2:	f7ff b9ba 	b.w	8006e4a <_vfprintf_r+0x2fa>
 8007ad6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8007ada:	4264      	negs	r4, r4
 8007adc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007ae0:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f7ff b97e 	b.w	8006de6 <_vfprintf_r+0x296>
 8007aea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007aec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007aee:	ec43 2b10 	vmov	d0, r2, r3
 8007af2:	f003 f943 	bl	800ad7c <__fpclassifyd>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f000 8111 	beq.w	8007d1e <_vfprintf_r+0x11ce>
 8007afc:	9c08      	ldr	r4, [sp, #32]
 8007afe:	3401      	adds	r4, #1
 8007b00:	bf08      	it	eq
 8007b02:	2406      	moveq	r4, #6
 8007b04:	f029 0520 	bic.w	r5, r9, #32
 8007b08:	bf08      	it	eq
 8007b0a:	9408      	streq	r4, [sp, #32]
 8007b0c:	d006      	beq.n	8007b1c <_vfprintf_r+0xfcc>
 8007b0e:	2d47      	cmp	r5, #71	; 0x47
 8007b10:	d104      	bne.n	8007b1c <_vfprintf_r+0xfcc>
 8007b12:	9c08      	ldr	r4, [sp, #32]
 8007b14:	2c00      	cmp	r4, #0
 8007b16:	bf08      	it	eq
 8007b18:	2401      	moveq	r4, #1
 8007b1a:	9408      	str	r4, [sp, #32]
 8007b1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007b1e:	9c05      	ldr	r4, [sp, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007b26:	9410      	str	r4, [sp, #64]	; 0x40
 8007b28:	bfbd      	ittte	lt
 8007b2a:	461c      	movlt	r4, r3
 8007b2c:	f104 4a00 	addlt.w	sl, r4, #2147483648	; 0x80000000
 8007b30:	f04f 0b2d 	movlt.w	fp, #45	; 0x2d
 8007b34:	f8dd a060 	ldrge.w	sl, [sp, #96]	; 0x60
 8007b38:	bfa8      	it	ge
 8007b3a:	f04f 0b00 	movge.w	fp, #0
 8007b3e:	f1b5 0046 	subs.w	r0, r5, #70	; 0x46
 8007b42:	f1d0 0c00 	rsbs	ip, r0, #0
 8007b46:	eb5c 0c00 	adcs.w	ip, ip, r0
 8007b4a:	f1bc 0f00 	cmp.w	ip, #0
 8007b4e:	f040 818f 	bne.w	8007e70 <_vfprintf_r+0x1320>
 8007b52:	2d45      	cmp	r5, #69	; 0x45
 8007b54:	f040 81ff 	bne.w	8007f56 <_vfprintf_r+0x1406>
 8007b58:	9808      	ldr	r0, [sp, #32]
 8007b5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b5c:	1c44      	adds	r4, r0, #1
 8007b5e:	4653      	mov	r3, sl
 8007b60:	a820      	add	r0, sp, #128	; 0x80
 8007b62:	a923      	add	r1, sp, #140	; 0x8c
 8007b64:	ec43 2b10 	vmov	d0, r2, r3
 8007b68:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b70:	2102      	movs	r1, #2
 8007b72:	ab1f      	add	r3, sp, #124	; 0x7c
 8007b74:	f000 fc28 	bl	80083c8 <_dtoa_r>
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4404      	add	r4, r0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007b80:	4651      	mov	r1, sl
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f9 f83c 	bl	8000c00 <__aeabi_dcmpeq>
 8007b88:	4623      	mov	r3, r4
 8007b8a:	b948      	cbnz	r0, 8007ba0 <_vfprintf_r+0x1050>
 8007b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b8e:	429c      	cmp	r4, r3
 8007b90:	d906      	bls.n	8007ba0 <_vfprintf_r+0x1050>
 8007b92:	2130      	movs	r1, #48	; 0x30
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b98:	7019      	strb	r1, [r3, #0]
 8007b9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	d8f9      	bhi.n	8007b94 <_vfprintf_r+0x1044>
 8007ba0:	ebc8 0303 	rsb	r3, r8, r3
 8007ba4:	2d47      	cmp	r5, #71	; 0x47
 8007ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ba8:	f000 818b 	beq.w	8007ec2 <_vfprintf_r+0x1372>
 8007bac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007bb0:	f340 826a 	ble.w	8008088 <_vfprintf_r+0x1538>
 8007bb4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007bb8:	f000 81dd 	beq.w	8007f76 <_vfprintf_r+0x1426>
 8007bbc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8007bbe:	9513      	str	r5, [sp, #76]	; 0x4c
 8007bc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bc4:	42ac      	cmp	r4, r5
 8007bc6:	f2c0 81c8 	blt.w	8007f5a <_vfprintf_r+0x140a>
 8007bca:	9c05      	ldr	r4, [sp, #20]
 8007bcc:	07e0      	lsls	r0, r4, #31
 8007bce:	bf49      	itett	mi
 8007bd0:	9b13      	ldrmi	r3, [sp, #76]	; 0x4c
 8007bd2:	9d13      	ldrpl	r5, [sp, #76]	; 0x4c
 8007bd4:	3301      	addmi	r3, #1
 8007bd6:	930b      	strmi	r3, [sp, #44]	; 0x2c
 8007bd8:	bf5a      	itte	pl
 8007bda:	ea25 73e5 	bicpl.w	r3, r5, r5, asr #31
 8007bde:	950b      	strpl	r5, [sp, #44]	; 0x2c
 8007be0:	ea23 73e3 	bicmi.w	r3, r3, r3, asr #31
 8007be4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007be8:	f1bb 0f00 	cmp.w	fp, #0
 8007bec:	f040 8135 	bne.w	8007e5a <_vfprintf_r+0x130a>
 8007bf0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf4:	9405      	str	r4, [sp, #20]
 8007bf6:	f8cd b020 	str.w	fp, [sp, #32]
 8007bfa:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8007bfe:	f7ff b92c 	b.w	8006e5a <_vfprintf_r+0x30a>
 8007c02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007c04:	1de3      	adds	r3, r4, #7
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	f103 0508 	add.w	r5, r3, #8
 8007c0e:	681c      	ldr	r4, [r3, #0]
 8007c10:	950e      	str	r5, [sp, #56]	; 0x38
 8007c12:	9416      	str	r4, [sp, #88]	; 0x58
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	9318      	str	r3, [sp, #96]	; 0x60
 8007c18:	f7ff baef 	b.w	80071fa <_vfprintf_r+0x6aa>
 8007c1c:	9c05      	ldr	r4, [sp, #20]
 8007c1e:	06e2      	lsls	r2, r4, #27
 8007c20:	d56f      	bpl.n	8007d02 <_vfprintf_r+0x11b2>
 8007c22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007c24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	3504      	adds	r5, #4
 8007c2a:	950e      	str	r5, [sp, #56]	; 0x38
 8007c2c:	601c      	str	r4, [r3, #0]
 8007c2e:	f7fe bfe8 	b.w	8006c02 <_vfprintf_r+0xb2>
 8007c32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c34:	9907      	ldr	r1, [sp, #28]
 8007c36:	aa25      	add	r2, sp, #148	; 0x94
 8007c38:	f003 f94a 	bl	800aed0 <__sprint_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f47f a8af 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007c42:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007c44:	ae32      	add	r6, sp, #200	; 0xc8
 8007c46:	e47b      	b.n	8007540 <_vfprintf_r+0x9f0>
 8007c48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007c4c:	3201      	adds	r2, #1
 8007c4e:	3401      	adds	r4, #1
 8007c50:	2101      	movs	r1, #1
 8007c52:	2a07      	cmp	r2, #7
 8007c54:	6035      	str	r5, [r6, #0]
 8007c56:	9427      	str	r4, [sp, #156]	; 0x9c
 8007c58:	9226      	str	r2, [sp, #152]	; 0x98
 8007c5a:	6071      	str	r1, [r6, #4]
 8007c5c:	dc78      	bgt.n	8007d50 <_vfprintf_r+0x1200>
 8007c5e:	3608      	adds	r6, #8
 8007c60:	4618      	mov	r0, r3
 8007c62:	b928      	cbnz	r0, 8007c70 <_vfprintf_r+0x1120>
 8007c64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c66:	b91d      	cbnz	r5, 8007c70 <_vfprintf_r+0x1120>
 8007c68:	9d05      	ldr	r5, [sp, #20]
 8007c6a:	07ed      	lsls	r5, r5, #31
 8007c6c:	f57f a9cf 	bpl.w	800700e <_vfprintf_r+0x4be>
 8007c70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c72:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007c74:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007c76:	4421      	add	r1, r4
 8007c78:	3301      	adds	r3, #1
 8007c7a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007c7c:	6035      	str	r5, [r6, #0]
 8007c7e:	2b07      	cmp	r3, #7
 8007c80:	9127      	str	r1, [sp, #156]	; 0x9c
 8007c82:	6074      	str	r4, [r6, #4]
 8007c84:	9326      	str	r3, [sp, #152]	; 0x98
 8007c86:	bfd8      	it	le
 8007c88:	f106 0208 	addle.w	r2, r6, #8
 8007c8c:	f300 8156 	bgt.w	8007f3c <_vfprintf_r+0x13ec>
 8007c90:	4244      	negs	r4, r0
 8007c92:	2c00      	cmp	r4, #0
 8007c94:	f340 8089 	ble.w	8007daa <_vfprintf_r+0x125a>
 8007c98:	f64b 2550 	movw	r5, #47696	; 0xba50
 8007c9c:	2c10      	cmp	r4, #16
 8007c9e:	f6c0 0501 	movt	r5, #2049	; 0x801
 8007ca2:	dd6d      	ble.n	8007d80 <_vfprintf_r+0x1230>
 8007ca4:	2610      	movs	r6, #16
 8007ca6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8007caa:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007cae:	e002      	b.n	8007cb6 <_vfprintf_r+0x1166>
 8007cb0:	3c10      	subs	r4, #16
 8007cb2:	2c10      	cmp	r4, #16
 8007cb4:	dd64      	ble.n	8007d80 <_vfprintf_r+0x1230>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	3110      	adds	r1, #16
 8007cba:	2b07      	cmp	r3, #7
 8007cbc:	6017      	str	r7, [r2, #0]
 8007cbe:	6056      	str	r6, [r2, #4]
 8007cc0:	9127      	str	r1, [sp, #156]	; 0x9c
 8007cc2:	9326      	str	r3, [sp, #152]	; 0x98
 8007cc4:	bfd8      	it	le
 8007cc6:	3208      	addle	r2, #8
 8007cc8:	ddf2      	ble.n	8007cb0 <_vfprintf_r+0x1160>
 8007cca:	4648      	mov	r0, r9
 8007ccc:	4651      	mov	r1, sl
 8007cce:	aa25      	add	r2, sp, #148	; 0x94
 8007cd0:	f003 f8fe 	bl	800aed0 <__sprint_r>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f040 815d 	bne.w	8007f94 <_vfprintf_r+0x1444>
 8007cda:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007cdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cde:	aa32      	add	r2, sp, #200	; 0xc8
 8007ce0:	e7e6      	b.n	8007cb0 <_vfprintf_r+0x1160>
 8007ce2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007ce4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f43f a85b 	beq.w	8006da4 <_vfprintf_r+0x254>
 8007cee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	aa25      	add	r2, sp, #148	; 0x94
 8007cf4:	f003 f8ec 	bl	800aed0 <__sprint_r>
 8007cf8:	f7ff b854 	b.w	8006da4 <_vfprintf_r+0x254>
 8007cfc:	46a9      	mov	r9, r5
 8007cfe:	f7ff b851 	b.w	8006da4 <_vfprintf_r+0x254>
 8007d02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007d04:	9d05      	ldr	r5, [sp, #20]
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d0e:	f104 0404 	add.w	r4, r4, #4
 8007d12:	940e      	str	r4, [sp, #56]	; 0x38
 8007d14:	bf14      	ite	ne
 8007d16:	801d      	strhne	r5, [r3, #0]
 8007d18:	601d      	streq	r5, [r3, #0]
 8007d1a:	f7fe bf72 	b.w	8006c02 <_vfprintf_r+0xb2>
 8007d1e:	9d05      	ldr	r5, [sp, #20]
 8007d20:	9008      	str	r0, [sp, #32]
 8007d22:	f64b 286c 	movw	r8, #47724	; 0xba6c
 8007d26:	f64b 2368 	movw	r3, #47720	; 0xba68
 8007d2a:	2403      	movs	r4, #3
 8007d2c:	f6c0 0801 	movt	r8, #2049	; 0x801
 8007d30:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007d34:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007d38:	9409      	str	r4, [sp, #36]	; 0x24
 8007d3a:	9505      	str	r5, [sp, #20]
 8007d3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d40:	bfd8      	it	le
 8007d42:	4698      	movle	r8, r3
 8007d44:	9013      	str	r0, [sp, #76]	; 0x4c
 8007d46:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d48:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8007d4c:	f7ff b885 	b.w	8006e5a <_vfprintf_r+0x30a>
 8007d50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d52:	9907      	ldr	r1, [sp, #28]
 8007d54:	aa25      	add	r2, sp, #148	; 0x94
 8007d56:	f003 f8bb 	bl	800aed0 <__sprint_r>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f47f a820 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007d60:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007d62:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007d64:	ae32      	add	r6, sp, #200	; 0xc8
 8007d66:	e77c      	b.n	8007c62 <_vfprintf_r+0x1112>
 8007d68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d6a:	9907      	ldr	r1, [sp, #28]
 8007d6c:	aa25      	add	r2, sp, #148	; 0x94
 8007d6e:	f003 f8af 	bl	800aed0 <__sprint_r>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f47f a814 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007d78:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007d7a:	ae32      	add	r6, sp, #200	; 0xc8
 8007d7c:	f7ff bbf6 	b.w	800756c <_vfprintf_r+0xa1c>
 8007d80:	3301      	adds	r3, #1
 8007d82:	4421      	add	r1, r4
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	6015      	str	r5, [r2, #0]
 8007d88:	6054      	str	r4, [r2, #4]
 8007d8a:	9127      	str	r1, [sp, #156]	; 0x9c
 8007d8c:	9326      	str	r3, [sp, #152]	; 0x98
 8007d8e:	bfd8      	it	le
 8007d90:	3208      	addle	r2, #8
 8007d92:	dd0a      	ble.n	8007daa <_vfprintf_r+0x125a>
 8007d94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d96:	9907      	ldr	r1, [sp, #28]
 8007d98:	aa25      	add	r2, sp, #148	; 0x94
 8007d9a:	f003 f899 	bl	800aed0 <__sprint_r>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	f47e affe 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007da4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007da6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007da8:	aa32      	add	r2, sp, #200	; 0xc8
 8007daa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dac:	f8c2 8000 	str.w	r8, [r2]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4429      	add	r1, r5
 8007db4:	2b07      	cmp	r3, #7
 8007db6:	9127      	str	r1, [sp, #156]	; 0x9c
 8007db8:	9326      	str	r3, [sp, #152]	; 0x98
 8007dba:	6055      	str	r5, [r2, #4]
 8007dbc:	f73f acbc 	bgt.w	8007738 <_vfprintf_r+0xbe8>
 8007dc0:	f102 0608 	add.w	r6, r2, #8
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	f7ff b922 	b.w	800700e <_vfprintf_r+0x4be>
 8007dca:	9508      	str	r5, [sp, #32]
 8007dcc:	f7fe fd0a 	bl	80067e4 <strlen>
 8007dd0:	940e      	str	r4, [sp, #56]	; 0x38
 8007dd2:	9c08      	ldr	r4, [sp, #32]
 8007dd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dd6:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8007dda:	9509      	str	r5, [sp, #36]	; 0x24
 8007ddc:	9413      	str	r4, [sp, #76]	; 0x4c
 8007dde:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8007de2:	f7ff b83a 	b.w	8006e5a <_vfprintf_r+0x30a>
 8007de6:	f6c0 0a01 	movt	sl, #2049	; 0x801
 8007dea:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007dec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007dee:	f7ff b87c 	b.w	8006eea <_vfprintf_r+0x39a>
 8007df2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007df4:	9907      	ldr	r1, [sp, #28]
 8007df6:	aa25      	add	r2, sp, #148	; 0x94
 8007df8:	f003 f86a 	bl	800aed0 <__sprint_r>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f47e afcf 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007e02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007e04:	ae32      	add	r6, sp, #200	; 0xc8
 8007e06:	e4d1      	b.n	80077ac <_vfprintf_r+0xc5c>
 8007e08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e0a:	9907      	ldr	r1, [sp, #28]
 8007e0c:	aa25      	add	r2, sp, #148	; 0x94
 8007e0e:	f003 f85f 	bl	800aed0 <__sprint_r>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f47e afc4 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007e18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007e1e:	1acb      	subs	r3, r1, r3
 8007e20:	ae32      	add	r6, sp, #200	; 0xc8
 8007e22:	e5a0      	b.n	8007966 <_vfprintf_r+0xe16>
 8007e24:	9d08      	ldr	r5, [sp, #32]
 8007e26:	940e      	str	r4, [sp, #56]	; 0x38
 8007e28:	2d06      	cmp	r5, #6
 8007e2a:	bf28      	it	cs
 8007e2c:	2506      	movcs	r5, #6
 8007e2e:	46c2      	mov	sl, r8
 8007e30:	950b      	str	r5, [sp, #44]	; 0x2c
 8007e32:	f64b 2898 	movw	r8, #47768	; 0xba98
 8007e36:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8007e3a:	f8cd a020 	str.w	sl, [sp, #32]
 8007e3e:	4654      	mov	r4, sl
 8007e40:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8007e44:	9509      	str	r5, [sp, #36]	; 0x24
 8007e46:	f6c0 0801 	movt	r8, #2049	; 0x801
 8007e4a:	f7ff b806 	b.w	8006e5a <_vfprintf_r+0x30a>
 8007e4e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8007e52:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8007e56:	f7ff b9e4 	b.w	8007222 <_vfprintf_r+0x6d2>
 8007e5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8007e62:	2400      	movs	r4, #0
 8007e64:	9505      	str	r5, [sp, #20]
 8007e66:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8007e6a:	9408      	str	r4, [sp, #32]
 8007e6c:	f7fe bff8 	b.w	8006e60 <_vfprintf_r+0x310>
 8007e70:	2103      	movs	r1, #3
 8007e72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e74:	f8cd c008 	str.w	ip, [sp, #8]
 8007e78:	4653      	mov	r3, sl
 8007e7a:	a823      	add	r0, sp, #140	; 0x8c
 8007e7c:	ac20      	add	r4, sp, #128	; 0x80
 8007e7e:	ec43 2b10 	vmov	d0, r2, r3
 8007e82:	9001      	str	r0, [sp, #4]
 8007e84:	9400      	str	r4, [sp, #0]
 8007e86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e88:	9a08      	ldr	r2, [sp, #32]
 8007e8a:	ab1f      	add	r3, sp, #124	; 0x7c
 8007e8c:	f000 fa9c 	bl	80083c8 <_dtoa_r>
 8007e90:	2d47      	cmp	r5, #71	; 0x47
 8007e92:	4680      	mov	r8, r0
 8007e94:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007e98:	d102      	bne.n	8007ea0 <_vfprintf_r+0x1350>
 8007e9a:	9c05      	ldr	r4, [sp, #20]
 8007e9c:	07e1      	lsls	r1, r4, #31
 8007e9e:	d50d      	bpl.n	8007ebc <_vfprintf_r+0x136c>
 8007ea0:	9c08      	ldr	r4, [sp, #32]
 8007ea2:	4444      	add	r4, r8
 8007ea4:	f1bc 0f00 	cmp.w	ip, #0
 8007ea8:	f43f ae68 	beq.w	8007b7c <_vfprintf_r+0x102c>
 8007eac:	f898 3000 	ldrb.w	r3, [r8]
 8007eb0:	2b30      	cmp	r3, #48	; 0x30
 8007eb2:	f000 80af 	beq.w	8008014 <_vfprintf_r+0x14c4>
 8007eb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007eb8:	441c      	add	r4, r3
 8007eba:	e65f      	b.n	8007b7c <_vfprintf_r+0x102c>
 8007ebc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ebe:	1a1b      	subs	r3, r3, r0
 8007ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ec4:	1cda      	adds	r2, r3, #3
 8007ec6:	db11      	blt.n	8007eec <_vfprintf_r+0x139c>
 8007ec8:	9c08      	ldr	r4, [sp, #32]
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	db0e      	blt.n	8007eec <_vfprintf_r+0x139c>
 8007ece:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ed0:	e676      	b.n	8007bc0 <_vfprintf_r+0x1070>
 8007ed2:	9d08      	ldr	r5, [sp, #32]
 8007ed4:	940e      	str	r4, [sp, #56]	; 0x38
 8007ed6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8007eda:	9509      	str	r5, [sp, #36]	; 0x24
 8007edc:	9d08      	ldr	r5, [sp, #32]
 8007ede:	9013      	str	r0, [sp, #76]	; 0x4c
 8007ee0:	950b      	str	r5, [sp, #44]	; 0x2c
 8007ee2:	9008      	str	r0, [sp, #32]
 8007ee4:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8007ee8:	f7fe bfb7 	b.w	8006e5a <_vfprintf_r+0x30a>
 8007eec:	f1a9 0902 	sub.w	r9, r9, #2
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	931f      	str	r3, [sp, #124]	; 0x7c
 8007ef6:	bfba      	itte	lt
 8007ef8:	425b      	neglt	r3, r3
 8007efa:	222d      	movlt	r2, #45	; 0x2d
 8007efc:	222b      	movge	r2, #43	; 0x2b
 8007efe:	2b09      	cmp	r3, #9
 8007f00:	f88d 9084 	strb.w	r9, [sp, #132]	; 0x84
 8007f04:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8007f08:	dc47      	bgt.n	8007f9a <_vfprintf_r+0x144a>
 8007f0a:	3330      	adds	r3, #48	; 0x30
 8007f0c:	2230      	movs	r2, #48	; 0x30
 8007f0e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8007f12:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 8007f16:	ab22      	add	r3, sp, #136	; 0x88
 8007f18:	aa21      	add	r2, sp, #132	; 0x84
 8007f1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007f1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f1e:	1a9a      	subs	r2, r3, r2
 8007f20:	4414      	add	r4, r2
 8007f22:	2d01      	cmp	r5, #1
 8007f24:	9219      	str	r2, [sp, #100]	; 0x64
 8007f26:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f28:	f340 80a4 	ble.w	8008074 <_vfprintf_r+0x1524>
 8007f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f2e:	2400      	movs	r4, #0
 8007f30:	3301      	adds	r3, #1
 8007f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f34:	9413      	str	r4, [sp, #76]	; 0x4c
 8007f36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f3a:	e655      	b.n	8007be8 <_vfprintf_r+0x1098>
 8007f3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f3e:	9907      	ldr	r1, [sp, #28]
 8007f40:	aa25      	add	r2, sp, #148	; 0x94
 8007f42:	f002 ffc5 	bl	800aed0 <__sprint_r>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f47e af2a 	bne.w	8006da0 <_vfprintf_r+0x250>
 8007f4c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007f4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007f50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f52:	aa32      	add	r2, sp, #200	; 0xc8
 8007f54:	e69c      	b.n	8007c90 <_vfprintf_r+0x1140>
 8007f56:	2102      	movs	r1, #2
 8007f58:	e78b      	b.n	8007e72 <_vfprintf_r+0x1322>
 8007f5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007f5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f5e:	2c00      	cmp	r4, #0
 8007f60:	bfd4      	ite	le
 8007f62:	f1c4 0302 	rsble	r3, r4, #2
 8007f66:	2301      	movgt	r3, #1
 8007f68:	441d      	add	r5, r3
 8007f6a:	950b      	str	r5, [sp, #44]	; 0x2c
 8007f6c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007f70:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f74:	e638      	b.n	8007be8 <_vfprintf_r+0x1098>
 8007f76:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	9413      	str	r4, [sp, #76]	; 0x4c
 8007f7c:	dd6b      	ble.n	8008056 <_vfprintf_r+0x1506>
 8007f7e:	9d08      	ldr	r5, [sp, #32]
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	d13f      	bne.n	8008004 <_vfprintf_r+0x14b4>
 8007f84:	9c05      	ldr	r4, [sp, #20]
 8007f86:	07e5      	lsls	r5, r4, #31
 8007f88:	d43c      	bmi.n	8008004 <_vfprintf_r+0x14b4>
 8007f8a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007f8c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007f90:	950b      	str	r5, [sp, #44]	; 0x2c
 8007f92:	e629      	b.n	8007be8 <_vfprintf_r+0x1098>
 8007f94:	46d1      	mov	r9, sl
 8007f96:	f7fe bf05 	b.w	8006da4 <_vfprintf_r+0x254>
 8007f9a:	f246 6067 	movw	r0, #26215	; 0x6667
 8007f9e:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8007fa2:	f10d 0192 	add.w	r1, sp, #146	; 0x92
 8007fa6:	fb80 5403 	smull	r5, r4, r0, r3
 8007faa:	17da      	asrs	r2, r3, #31
 8007fac:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8007fb0:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8007fb4:	460d      	mov	r5, r1
 8007fb6:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8007fba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fbe:	2a09      	cmp	r2, #9
 8007fc0:	7029      	strb	r1, [r5, #0]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	f105 31ff 	add.w	r1, r5, #4294967295
 8007fc8:	dced      	bgt.n	8007fa6 <_vfprintf_r+0x1456>
 8007fca:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8007fce:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	4288      	cmp	r0, r1
 8007fd6:	f805 2c01 	strb.w	r2, [r5, #-1]
 8007fda:	d957      	bls.n	800808c <_vfprintf_r+0x153c>
 8007fdc:	f10d 0185 	add.w	r1, sp, #133	; 0x85
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	e001      	b.n	8007fe8 <_vfprintf_r+0x1498>
 8007fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe8:	4283      	cmp	r3, r0
 8007fea:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007fee:	d1f9      	bne.n	8007fe4 <_vfprintf_r+0x1494>
 8007ff0:	a842      	add	r0, sp, #264	; 0x108
 8007ff2:	ebc5 0340 	rsb	r3, r5, r0, lsl #1
 8007ff6:	3bf6      	subs	r3, #246	; 0xf6
 8007ff8:	e78e      	b.n	8007f18 <_vfprintf_r+0x13c8>
 8007ffa:	f6c0 0501 	movt	r5, #2049	; 0x801
 8007ffe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008000:	f7ff bb91 	b.w	8007726 <_vfprintf_r+0xbd6>
 8008004:	9c08      	ldr	r4, [sp, #32]
 8008006:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008008:	1c63      	adds	r3, r4, #1
 800800a:	441d      	add	r5, r3
 800800c:	950b      	str	r5, [sp, #44]	; 0x2c
 800800e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8008012:	e5e9      	b.n	8007be8 <_vfprintf_r+0x1098>
 8008014:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008016:	4651      	mov	r1, sl
 8008018:	2200      	movs	r2, #0
 800801a:	2300      	movs	r3, #0
 800801c:	f7f8 fdf0 	bl	8000c00 <__aeabi_dcmpeq>
 8008020:	2800      	cmp	r0, #0
 8008022:	f47f af48 	bne.w	8007eb6 <_vfprintf_r+0x1366>
 8008026:	9808      	ldr	r0, [sp, #32]
 8008028:	f1c0 0301 	rsb	r3, r0, #1
 800802c:	931f      	str	r3, [sp, #124]	; 0x7c
 800802e:	441c      	add	r4, r3
 8008030:	e5a4      	b.n	8007b7c <_vfprintf_r+0x102c>
 8008032:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008034:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008036:	682d      	ldr	r5, [r5, #0]
 8008038:	f893 9001 	ldrb.w	r9, [r3, #1]
 800803c:	9508      	str	r5, [sp, #32]
 800803e:	2d00      	cmp	r5, #0
 8008040:	f104 0104 	add.w	r1, r4, #4
 8008044:	bfb8      	it	lt
 8008046:	f04f 35ff 	movlt.w	r5, #4294967295
 800804a:	910e      	str	r1, [sp, #56]	; 0x38
 800804c:	4603      	mov	r3, r0
 800804e:	bfb8      	it	lt
 8008050:	9508      	strlt	r5, [sp, #32]
 8008052:	f7fe be0a 	b.w	8006c6a <_vfprintf_r+0x11a>
 8008056:	9c08      	ldr	r4, [sp, #32]
 8008058:	b934      	cbnz	r4, 8008068 <_vfprintf_r+0x1518>
 800805a:	9d05      	ldr	r5, [sp, #20]
 800805c:	07ec      	lsls	r4, r5, #31
 800805e:	bf5c      	itt	pl
 8008060:	2301      	movpl	r3, #1
 8008062:	930b      	strpl	r3, [sp, #44]	; 0x2c
 8008064:	f57f adc0 	bpl.w	8007be8 <_vfprintf_r+0x1098>
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	3302      	adds	r3, #2
 800806c:	930b      	str	r3, [sp, #44]	; 0x2c
 800806e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008072:	e5b9      	b.n	8007be8 <_vfprintf_r+0x1098>
 8008074:	9c05      	ldr	r4, [sp, #20]
 8008076:	f014 0301 	ands.w	r3, r4, #1
 800807a:	f47f af57 	bne.w	8007f2c <_vfprintf_r+0x13dc>
 800807e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008080:	9313      	str	r3, [sp, #76]	; 0x4c
 8008082:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8008086:	e5af      	b.n	8007be8 <_vfprintf_r+0x1098>
 8008088:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800808a:	e731      	b.n	8007ef0 <_vfprintf_r+0x13a0>
 800808c:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8008090:	e742      	b.n	8007f18 <_vfprintf_r+0x13c8>
 8008092:	bf00      	nop

08008094 <__sbprintf>:
 8008094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008098:	460c      	mov	r4, r1
 800809a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800809e:	69e7      	ldr	r7, [r4, #28]
 80080a0:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 80080a4:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80080a6:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 80080aa:	9707      	str	r7, [sp, #28]
 80080ac:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80080ae:	9119      	str	r1, [sp, #100]	; 0x64
 80080b0:	ad1a      	add	r5, sp, #104	; 0x68
 80080b2:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80080b6:	f04f 0e00 	mov.w	lr, #0
 80080ba:	f029 0902 	bic.w	r9, r9, #2
 80080be:	4669      	mov	r1, sp
 80080c0:	9500      	str	r5, [sp, #0]
 80080c2:	9504      	str	r5, [sp, #16]
 80080c4:	9602      	str	r6, [sp, #8]
 80080c6:	9605      	str	r6, [sp, #20]
 80080c8:	f8ad 900c 	strh.w	r9, [sp, #12]
 80080cc:	f8ad 800e 	strh.w	r8, [sp, #14]
 80080d0:	9709      	str	r7, [sp, #36]	; 0x24
 80080d2:	f8cd e018 	str.w	lr, [sp, #24]
 80080d6:	4606      	mov	r6, r0
 80080d8:	f7fe fd3a 	bl	8006b50 <_vfprintf_r>
 80080dc:	1e05      	subs	r5, r0, #0
 80080de:	db07      	blt.n	80080f0 <__sbprintf+0x5c>
 80080e0:	4630      	mov	r0, r6
 80080e2:	4669      	mov	r1, sp
 80080e4:	f001 f9c6 	bl	8009474 <_fflush_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	bf18      	it	ne
 80080ec:	f04f 35ff 	movne.w	r5, #4294967295
 80080f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80080f4:	065e      	lsls	r6, r3, #25
 80080f6:	bf48      	it	mi
 80080f8:	89a3      	ldrhmi	r3, [r4, #12]
 80080fa:	4628      	mov	r0, r5
 80080fc:	bf44      	itt	mi
 80080fe:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008102:	81a3      	strhmi	r3, [r4, #12]
 8008104:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800810c <__swsetup_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	f240 6328 	movw	r3, #1576	; 0x628
 8008112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008116:	4605      	mov	r5, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	460c      	mov	r4, r1
 800811c:	b110      	cbz	r0, 8008124 <__swsetup_r+0x18>
 800811e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008120:	2a00      	cmp	r2, #0
 8008122:	d036      	beq.n	8008192 <__swsetup_r+0x86>
 8008124:	89a2      	ldrh	r2, [r4, #12]
 8008126:	b293      	uxth	r3, r2
 8008128:	0718      	lsls	r0, r3, #28
 800812a:	d50c      	bpl.n	8008146 <__swsetup_r+0x3a>
 800812c:	6921      	ldr	r1, [r4, #16]
 800812e:	b1a9      	cbz	r1, 800815c <__swsetup_r+0x50>
 8008130:	f013 0201 	ands.w	r2, r3, #1
 8008134:	d01e      	beq.n	8008174 <__swsetup_r+0x68>
 8008136:	6963      	ldr	r3, [r4, #20]
 8008138:	2200      	movs	r2, #0
 800813a:	425b      	negs	r3, r3
 800813c:	61a3      	str	r3, [r4, #24]
 800813e:	60a2      	str	r2, [r4, #8]
 8008140:	b1f1      	cbz	r1, 8008180 <__swsetup_r+0x74>
 8008142:	2000      	movs	r0, #0
 8008144:	bd38      	pop	{r3, r4, r5, pc}
 8008146:	06d9      	lsls	r1, r3, #27
 8008148:	d53b      	bpl.n	80081c2 <__swsetup_r+0xb6>
 800814a:	075b      	lsls	r3, r3, #29
 800814c:	d424      	bmi.n	8008198 <__swsetup_r+0x8c>
 800814e:	6921      	ldr	r1, [r4, #16]
 8008150:	f042 0308 	orr.w	r3, r2, #8
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	b29b      	uxth	r3, r3
 8008158:	2900      	cmp	r1, #0
 800815a:	d1e9      	bne.n	8008130 <__swsetup_r+0x24>
 800815c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8008160:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008164:	d0e4      	beq.n	8008130 <__swsetup_r+0x24>
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f001 fd01 	bl	8009b70 <__smakebuf_r>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	6921      	ldr	r1, [r4, #16]
 8008172:	e7dd      	b.n	8008130 <__swsetup_r+0x24>
 8008174:	0798      	lsls	r0, r3, #30
 8008176:	bf58      	it	pl
 8008178:	6962      	ldrpl	r2, [r4, #20]
 800817a:	60a2      	str	r2, [r4, #8]
 800817c:	2900      	cmp	r1, #0
 800817e:	d1e0      	bne.n	8008142 <__swsetup_r+0x36>
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	061a      	lsls	r2, r3, #24
 8008184:	d5dd      	bpl.n	8008142 <__swsetup_r+0x36>
 8008186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	f001 f98b 	bl	80094ac <__sinit>
 8008196:	e7c5      	b.n	8008124 <__swsetup_r+0x18>
 8008198:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800819a:	b149      	cbz	r1, 80081b0 <__swsetup_r+0xa4>
 800819c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80081a0:	4299      	cmp	r1, r3
 80081a2:	d003      	beq.n	80081ac <__swsetup_r+0xa0>
 80081a4:	4628      	mov	r0, r5
 80081a6:	f001 fa53 	bl	8009650 <_free_r>
 80081aa:	89a2      	ldrh	r2, [r4, #12]
 80081ac:	2300      	movs	r3, #0
 80081ae:	6323      	str	r3, [r4, #48]	; 0x30
 80081b0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80081b4:	6921      	ldr	r1, [r4, #16]
 80081b6:	0412      	lsls	r2, r2, #16
 80081b8:	2300      	movs	r3, #0
 80081ba:	0c12      	lsrs	r2, r2, #16
 80081bc:	e884 000a 	stmia.w	r4, {r1, r3}
 80081c0:	e7c6      	b.n	8008150 <__swsetup_r+0x44>
 80081c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c6:	2309      	movs	r3, #9
 80081c8:	602b      	str	r3, [r5, #0]
 80081ca:	f04f 30ff 	mov.w	r0, #4294967295
 80081ce:	81a2      	strh	r2, [r4, #12]
 80081d0:	bd38      	pop	{r3, r4, r5, pc}
 80081d2:	bf00      	nop

080081d4 <__register_exitproc>:
 80081d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d6:	f64b 2448 	movw	r4, #47688	; 0xba48
 80081da:	f6c0 0401 	movt	r4, #2049	; 0x801
 80081de:	b085      	sub	sp, #20
 80081e0:	6826      	ldr	r6, [r4, #0]
 80081e2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80081e6:	4607      	mov	r7, r0
 80081e8:	2c00      	cmp	r4, #0
 80081ea:	d044      	beq.n	8008276 <__register_exitproc+0xa2>
 80081ec:	6865      	ldr	r5, [r4, #4]
 80081ee:	2d1f      	cmp	r5, #31
 80081f0:	dd21      	ble.n	8008236 <__register_exitproc+0x62>
 80081f2:	f649 4455 	movw	r4, #40021	; 0x9c55
 80081f6:	f6c0 0400 	movt	r4, #2048	; 0x800
 80081fa:	b91c      	cbnz	r4, 8008204 <__register_exitproc+0x30>
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	b005      	add	sp, #20
 8008202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008204:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008208:	9103      	str	r1, [sp, #12]
 800820a:	9202      	str	r2, [sp, #8]
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	f001 fd21 	bl	8009c54 <malloc>
 8008212:	9903      	ldr	r1, [sp, #12]
 8008214:	9a02      	ldr	r2, [sp, #8]
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	4604      	mov	r4, r0
 800821a:	2800      	cmp	r0, #0
 800821c:	d0ee      	beq.n	80081fc <__register_exitproc+0x28>
 800821e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8008222:	2000      	movs	r0, #0
 8008224:	6025      	str	r5, [r4, #0]
 8008226:	6060      	str	r0, [r4, #4]
 8008228:	4605      	mov	r5, r0
 800822a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800822e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8008232:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8008236:	b93f      	cbnz	r7, 8008248 <__register_exitproc+0x74>
 8008238:	1cab      	adds	r3, r5, #2
 800823a:	2000      	movs	r0, #0
 800823c:	3501      	adds	r5, #1
 800823e:	6065      	str	r5, [r4, #4]
 8008240:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008244:	b005      	add	sp, #20
 8008246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008248:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 800824c:	f04f 0c01 	mov.w	ip, #1
 8008250:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8008254:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8008258:	fa0c f205 	lsl.w	r2, ip, r5
 800825c:	4316      	orrs	r6, r2
 800825e:	2f02      	cmp	r7, #2
 8008260:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8008264:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8008268:	bf02      	ittt	eq
 800826a:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800826e:	431a      	orreq	r2, r3
 8008270:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8008274:	e7e0      	b.n	8008238 <__register_exitproc+0x64>
 8008276:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 800827a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800827e:	e7b5      	b.n	80081ec <__register_exitproc+0x18>

08008280 <register_fini>:
 8008280:	f240 0300 	movw	r3, #0
 8008284:	f2c0 0300 	movt	r3, #0
 8008288:	b12b      	cbz	r3, 8008296 <register_fini+0x16>
 800828a:	f246 30f9 	movw	r0, #25593	; 0x63f9
 800828e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008292:	f7fe b8a5 	b.w	80063e0 <atexit>
 8008296:	4770      	bx	lr

08008298 <quorem>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	6903      	ldr	r3, [r0, #16]
 800829e:	690d      	ldr	r5, [r1, #16]
 80082a0:	429d      	cmp	r5, r3
 80082a2:	4683      	mov	fp, r0
 80082a4:	b083      	sub	sp, #12
 80082a6:	bfc8      	it	gt
 80082a8:	2000      	movgt	r0, #0
 80082aa:	f300 8088 	bgt.w	80083be <quorem+0x126>
 80082ae:	3d01      	subs	r5, #1
 80082b0:	f101 0414 	add.w	r4, r1, #20
 80082b4:	f10b 0a14 	add.w	sl, fp, #20
 80082b8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 80082bc:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80082c0:	3201      	adds	r2, #1
 80082c2:	fbb3 f8f2 	udiv	r8, r3, r2
 80082c6:	00aa      	lsls	r2, r5, #2
 80082c8:	4691      	mov	r9, r2
 80082ca:	9200      	str	r2, [sp, #0]
 80082cc:	4452      	add	r2, sl
 80082ce:	44a1      	add	r9, r4
 80082d0:	9201      	str	r2, [sp, #4]
 80082d2:	f1b8 0f00 	cmp.w	r8, #0
 80082d6:	d03d      	beq.n	8008354 <quorem+0xbc>
 80082d8:	f04f 0e00 	mov.w	lr, #0
 80082dc:	4670      	mov	r0, lr
 80082de:	4622      	mov	r2, r4
 80082e0:	4653      	mov	r3, sl
 80082e2:	468c      	mov	ip, r1
 80082e4:	f852 6b04 	ldr.w	r6, [r2], #4
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	b2b7      	uxth	r7, r6
 80082ec:	0c36      	lsrs	r6, r6, #16
 80082ee:	fb07 ee08 	mla	lr, r7, r8, lr
 80082f2:	fb06 f608 	mul.w	r6, r6, r8
 80082f6:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 80082fa:	fa1f f78e 	uxth.w	r7, lr
 80082fe:	1bc7      	subs	r7, r0, r7
 8008300:	b2b0      	uxth	r0, r6
 8008302:	fa17 f781 	uxtah	r7, r7, r1
 8008306:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 800830a:	eb00 4027 	add.w	r0, r0, r7, asr #16
 800830e:	b2bf      	uxth	r7, r7
 8008310:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8008314:	4591      	cmp	r9, r2
 8008316:	f843 7b04 	str.w	r7, [r3], #4
 800831a:	ea4f 4020 	mov.w	r0, r0, asr #16
 800831e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8008322:	d2df      	bcs.n	80082e4 <quorem+0x4c>
 8008324:	9a00      	ldr	r2, [sp, #0]
 8008326:	f85a 3002 	ldr.w	r3, [sl, r2]
 800832a:	4661      	mov	r1, ip
 800832c:	b993      	cbnz	r3, 8008354 <quorem+0xbc>
 800832e:	9a01      	ldr	r2, [sp, #4]
 8008330:	1f13      	subs	r3, r2, #4
 8008332:	459a      	cmp	sl, r3
 8008334:	d20c      	bcs.n	8008350 <quorem+0xb8>
 8008336:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800833a:	b94b      	cbnz	r3, 8008350 <quorem+0xb8>
 800833c:	f1a2 0308 	sub.w	r3, r2, #8
 8008340:	e002      	b.n	8008348 <quorem+0xb0>
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	3b04      	subs	r3, #4
 8008346:	b91a      	cbnz	r2, 8008350 <quorem+0xb8>
 8008348:	459a      	cmp	sl, r3
 800834a:	f105 35ff 	add.w	r5, r5, #4294967295
 800834e:	d3f8      	bcc.n	8008342 <quorem+0xaa>
 8008350:	f8cb 5010 	str.w	r5, [fp, #16]
 8008354:	4658      	mov	r0, fp
 8008356:	f002 fa0f 	bl	800a778 <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	db2e      	blt.n	80083bc <quorem+0x124>
 800835e:	f108 0801 	add.w	r8, r8, #1
 8008362:	4653      	mov	r3, sl
 8008364:	2200      	movs	r2, #0
 8008366:	f854 6b04 	ldr.w	r6, [r4], #4
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	b2b1      	uxth	r1, r6
 800836e:	1a52      	subs	r2, r2, r1
 8008370:	0c36      	lsrs	r6, r6, #16
 8008372:	fa12 f180 	uxtah	r1, r2, r0
 8008376:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 800837a:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800837e:	b289      	uxth	r1, r1
 8008380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008384:	45a1      	cmp	r9, r4
 8008386:	f843 1b04 	str.w	r1, [r3], #4
 800838a:	ea4f 4222 	mov.w	r2, r2, asr #16
 800838e:	d2ea      	bcs.n	8008366 <quorem+0xce>
 8008390:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 8008394:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 8008398:	b982      	cbnz	r2, 80083bc <quorem+0x124>
 800839a:	1f1a      	subs	r2, r3, #4
 800839c:	4592      	cmp	sl, r2
 800839e:	d20b      	bcs.n	80083b8 <quorem+0x120>
 80083a0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80083a4:	b942      	cbnz	r2, 80083b8 <quorem+0x120>
 80083a6:	3b08      	subs	r3, #8
 80083a8:	e002      	b.n	80083b0 <quorem+0x118>
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	b91a      	cbnz	r2, 80083b8 <quorem+0x120>
 80083b0:	459a      	cmp	sl, r3
 80083b2:	f105 35ff 	add.w	r5, r5, #4294967295
 80083b6:	d3f8      	bcc.n	80083aa <quorem+0x112>
 80083b8:	f8cb 5010 	str.w	r5, [fp, #16]
 80083bc:	4640      	mov	r0, r8
 80083be:	b003      	add	sp, #12
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	0000      	movs	r0, r0
	...

080083c8 <_dtoa_r>:
 80083c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	b09b      	sub	sp, #108	; 0x6c
 80083ce:	4604      	mov	r4, r0
 80083d0:	9102      	str	r1, [sp, #8]
 80083d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80083d4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80083d6:	9205      	str	r2, [sp, #20]
 80083d8:	9306      	str	r3, [sp, #24]
 80083da:	ec5b ab10 	vmov	sl, fp, d0
 80083de:	b141      	cbz	r1, 80083f2 <_dtoa_r+0x2a>
 80083e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80083e2:	2201      	movs	r2, #1
 80083e4:	409a      	lsls	r2, r3
 80083e6:	604b      	str	r3, [r1, #4]
 80083e8:	608a      	str	r2, [r1, #8]
 80083ea:	f001 ffc1 	bl	800a370 <_Bfree>
 80083ee:	2300      	movs	r3, #0
 80083f0:	6423      	str	r3, [r4, #64]	; 0x40
 80083f2:	f1bb 0f00 	cmp.w	fp, #0
 80083f6:	bfb5      	itete	lt
 80083f8:	2301      	movlt	r3, #1
 80083fa:	2300      	movge	r3, #0
 80083fc:	602b      	strlt	r3, [r5, #0]
 80083fe:	602b      	strge	r3, [r5, #0]
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	bfb4      	ite	lt
 8008406:	f02b 4900 	biclt.w	r9, fp, #2147483648	; 0x80000000
 800840a:	46d9      	movge	r9, fp
 800840c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	ea09 0303 	and.w	r3, r9, r3
 8008418:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800841c:	bfb8      	it	lt
 800841e:	46cb      	movlt	fp, r9
 8008420:	4293      	cmp	r3, r2
 8008422:	d016      	beq.n	8008452 <_dtoa_r+0x8a>
 8008424:	2200      	movs	r2, #0
 8008426:	2300      	movs	r3, #0
 8008428:	4650      	mov	r0, sl
 800842a:	4659      	mov	r1, fp
 800842c:	f7f8 fbe8 	bl	8000c00 <__aeabi_dcmpeq>
 8008430:	4656      	mov	r6, sl
 8008432:	465f      	mov	r7, fp
 8008434:	4680      	mov	r8, r0
 8008436:	b328      	cbz	r0, 8008484 <_dtoa_r+0xbc>
 8008438:	9e06      	ldr	r6, [sp, #24]
 800843a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800843c:	2301      	movs	r3, #1
 800843e:	6033      	str	r3, [r6, #0]
 8008440:	2d00      	cmp	r5, #0
 8008442:	f000 80db 	beq.w	80085fc <_dtoa_r+0x234>
 8008446:	48a8      	ldr	r0, [pc, #672]	; (80086e8 <_dtoa_r+0x320>)
 8008448:	6028      	str	r0, [r5, #0]
 800844a:	3801      	subs	r0, #1
 800844c:	b01b      	add	sp, #108	; 0x6c
 800844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008452:	9d06      	ldr	r5, [sp, #24]
 8008454:	f242 730f 	movw	r3, #9999	; 0x270f
 8008458:	f64b 20c0 	movw	r0, #47808	; 0xbac0
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008462:	f1ba 0f00 	cmp.w	sl, #0
 8008466:	f000 80a9 	beq.w	80085bc <_dtoa_r+0x1f4>
 800846a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800846c:	2e00      	cmp	r6, #0
 800846e:	d0ed      	beq.n	800844c <_dtoa_r+0x84>
 8008470:	78c3      	ldrb	r3, [r0, #3]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f040 80b1 	bne.w	80085da <_dtoa_r+0x212>
 8008478:	1cc3      	adds	r3, r0, #3
 800847a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	b01b      	add	sp, #108	; 0x6c
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008484:	4620      	mov	r0, r4
 8008486:	ec47 6b10 	vmov	d0, r6, r7
 800848a:	a919      	add	r1, sp, #100	; 0x64
 800848c:	aa18      	add	r2, sp, #96	; 0x60
 800848e:	f002 f9ff 	bl	800a890 <__d2b>
 8008492:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8008496:	900b      	str	r0, [sp, #44]	; 0x2c
 8008498:	f040 80a2 	bne.w	80085e0 <_dtoa_r+0x218>
 800849c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800849e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80084a0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80084a4:	443d      	add	r5, r7
 80084a6:	429d      	cmp	r5, r3
 80084a8:	f2c0 825c 	blt.w	8008964 <_dtoa_r+0x59c>
 80084ac:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 80084b0:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80084b4:	1b5b      	subs	r3, r3, r5
 80084b6:	f205 4212 	addw	r2, r5, #1042	; 0x412
 80084ba:	fa09 f303 	lsl.w	r3, r9, r3
 80084be:	fa2a f202 	lsr.w	r2, sl, r2
 80084c2:	ea43 0002 	orr.w	r0, r3, r2
 80084c6:	f7f8 f8bd 	bl	8000644 <__aeabi_ui2d>
 80084ca:	2601      	movs	r6, #1
 80084cc:	3d01      	subs	r5, #1
 80084ce:	46b8      	mov	r8, r7
 80084d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80084d4:	9615      	str	r6, [sp, #84]	; 0x54
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 80084de:	f7f7 ff73 	bl	80003c8 <__aeabi_dsub>
 80084e2:	a37b      	add	r3, pc, #492	; (adr r3, 80086d0 <_dtoa_r+0x308>)
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f7f8 f922 	bl	8000730 <__aeabi_dmul>
 80084ec:	a37a      	add	r3, pc, #488	; (adr r3, 80086d8 <_dtoa_r+0x310>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f7 ff6b 	bl	80003cc <__adddf3>
 80084f6:	4606      	mov	r6, r0
 80084f8:	4628      	mov	r0, r5
 80084fa:	460f      	mov	r7, r1
 80084fc:	f7f8 f8b2 	bl	8000664 <__aeabi_i2d>
 8008500:	a377      	add	r3, pc, #476	; (adr r3, 80086e0 <_dtoa_r+0x318>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f8 f913 	bl	8000730 <__aeabi_dmul>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4630      	mov	r0, r6
 8008510:	4639      	mov	r1, r7
 8008512:	f7f7 ff5b 	bl	80003cc <__adddf3>
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	f7f8 fba3 	bl	8000c64 <__aeabi_d2iz>
 800851e:	4639      	mov	r1, r7
 8008520:	9004      	str	r0, [sp, #16]
 8008522:	2200      	movs	r2, #0
 8008524:	4630      	mov	r0, r6
 8008526:	2300      	movs	r3, #0
 8008528:	f7f8 fb74 	bl	8000c14 <__aeabi_dcmplt>
 800852c:	2800      	cmp	r0, #0
 800852e:	f040 8202 	bne.w	8008936 <_dtoa_r+0x56e>
 8008532:	9e04      	ldr	r6, [sp, #16]
 8008534:	2e16      	cmp	r6, #22
 8008536:	bf84      	itt	hi
 8008538:	2601      	movhi	r6, #1
 800853a:	9614      	strhi	r6, [sp, #80]	; 0x50
 800853c:	d812      	bhi.n	8008564 <_dtoa_r+0x19c>
 800853e:	f64b 23d0 	movw	r3, #47824	; 0xbad0
 8008542:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800854a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800854e:	4652      	mov	r2, sl
 8008550:	465b      	mov	r3, fp
 8008552:	f7f8 fb7d 	bl	8000c50 <__aeabi_dcmpgt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f000 820c 	beq.w	8008974 <_dtoa_r+0x5ac>
 800855c:	3e01      	subs	r6, #1
 800855e:	9604      	str	r6, [sp, #16]
 8008560:	2600      	movs	r6, #0
 8008562:	9614      	str	r6, [sp, #80]	; 0x50
 8008564:	ebc5 0508 	rsb	r5, r5, r8
 8008568:	3d01      	subs	r5, #1
 800856a:	bf48      	it	mi
 800856c:	2600      	movmi	r6, #0
 800856e:	9508      	str	r5, [sp, #32]
 8008570:	bf48      	it	mi
 8008572:	9608      	strmi	r6, [sp, #32]
 8008574:	9e04      	ldr	r6, [sp, #16]
 8008576:	bf4b      	itete	mi
 8008578:	426d      	negmi	r5, r5
 800857a:	2500      	movpl	r5, #0
 800857c:	950a      	strmi	r5, [sp, #40]	; 0x28
 800857e:	950a      	strpl	r5, [sp, #40]	; 0x28
 8008580:	2e00      	cmp	r6, #0
 8008582:	f2c0 81e6 	blt.w	8008952 <_dtoa_r+0x58a>
 8008586:	9d08      	ldr	r5, [sp, #32]
 8008588:	960f      	str	r6, [sp, #60]	; 0x3c
 800858a:	4435      	add	r5, r6
 800858c:	2600      	movs	r6, #0
 800858e:	9508      	str	r5, [sp, #32]
 8008590:	960c      	str	r6, [sp, #48]	; 0x30
 8008592:	9d02      	ldr	r5, [sp, #8]
 8008594:	2d09      	cmp	r5, #9
 8008596:	d836      	bhi.n	8008606 <_dtoa_r+0x23e>
 8008598:	2d05      	cmp	r5, #5
 800859a:	bfc4      	itt	gt
 800859c:	3d04      	subgt	r5, #4
 800859e:	9502      	strgt	r5, [sp, #8]
 80085a0:	9e02      	ldr	r6, [sp, #8]
 80085a2:	f1a6 0302 	sub.w	r3, r6, #2
 80085a6:	bfcc      	ite	gt
 80085a8:	2500      	movgt	r5, #0
 80085aa:	2501      	movle	r5, #1
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d82c      	bhi.n	800860a <_dtoa_r+0x242>
 80085b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085b4:	02100342 	.word	0x02100342
 80085b8:	056c0350 	.word	0x056c0350
 80085bc:	f64b 22b4 	movw	r2, #47796	; 0xbab4
 80085c0:	f64b 23c0 	movw	r3, #47808	; 0xbac0
 80085c4:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80085c8:	f6c0 0201 	movt	r2, #2049	; 0x801
 80085cc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80085d0:	2800      	cmp	r0, #0
 80085d2:	bf0c      	ite	eq
 80085d4:	4610      	moveq	r0, r2
 80085d6:	4618      	movne	r0, r3
 80085d8:	e747      	b.n	800846a <_dtoa_r+0xa2>
 80085da:	f100 0308 	add.w	r3, r0, #8
 80085de:	e74c      	b.n	800847a <_dtoa_r+0xb2>
 80085e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085e4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80085e8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 80085ec:	4650      	mov	r0, sl
 80085ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085f2:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 80085f6:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085fa:	e76c      	b.n	80084d6 <_dtoa_r+0x10e>
 80085fc:	f64b 20a0 	movw	r0, #47776	; 0xbaa0
 8008600:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008604:	e722      	b.n	800844c <_dtoa_r+0x84>
 8008606:	2600      	movs	r6, #0
 8008608:	9602      	str	r6, [sp, #8]
 800860a:	2500      	movs	r5, #0
 800860c:	6465      	str	r5, [r4, #68]	; 0x44
 800860e:	4629      	mov	r1, r5
 8008610:	4620      	mov	r0, r4
 8008612:	f001 fe87 	bl	800a324 <_Balloc>
 8008616:	f04f 36ff 	mov.w	r6, #4294967295
 800861a:	9505      	str	r5, [sp, #20]
 800861c:	2501      	movs	r5, #1
 800861e:	9007      	str	r0, [sp, #28]
 8008620:	960e      	str	r6, [sp, #56]	; 0x38
 8008622:	6420      	str	r0, [r4, #64]	; 0x40
 8008624:	9609      	str	r6, [sp, #36]	; 0x24
 8008626:	950d      	str	r5, [sp, #52]	; 0x34
 8008628:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800862a:	2b00      	cmp	r3, #0
 800862c:	f2c0 80bb 	blt.w	80087a6 <_dtoa_r+0x3de>
 8008630:	9e04      	ldr	r6, [sp, #16]
 8008632:	2e0e      	cmp	r6, #14
 8008634:	f300 80b7 	bgt.w	80087a6 <_dtoa_r+0x3de>
 8008638:	f64b 23d0 	movw	r3, #47824	; 0xbad0
 800863c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008640:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008644:	9d05      	ldr	r5, [sp, #20]
 8008646:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008648:	ed93 7b00 	vldr	d7, [r3]
 800864c:	0fea      	lsrs	r2, r5, #31
 800864e:	2e00      	cmp	r6, #0
 8008650:	bfcc      	ite	gt
 8008652:	2200      	movgt	r2, #0
 8008654:	f002 0201 	andle.w	r2, r2, #1
 8008658:	ed8d 7b02 	vstr	d7, [sp, #8]
 800865c:	2a00      	cmp	r2, #0
 800865e:	f040 844c 	bne.w	8008efa <_dtoa_r+0xb32>
 8008662:	ec53 2b17 	vmov	r2, r3, d7
 8008666:	4650      	mov	r0, sl
 8008668:	4659      	mov	r1, fp
 800866a:	f7f8 f98b 	bl	8000984 <__aeabi_ddiv>
 800866e:	f7f8 faf9 	bl	8000c64 <__aeabi_d2iz>
 8008672:	4680      	mov	r8, r0
 8008674:	f7f7 fff6 	bl	8000664 <__aeabi_i2d>
 8008678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800867c:	f7f8 f858 	bl	8000730 <__aeabi_dmul>
 8008680:	460b      	mov	r3, r1
 8008682:	4602      	mov	r2, r0
 8008684:	4659      	mov	r1, fp
 8008686:	4650      	mov	r0, sl
 8008688:	f7f7 fe9e 	bl	80003c8 <__aeabi_dsub>
 800868c:	9d07      	ldr	r5, [sp, #28]
 800868e:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8008692:	702b      	strb	r3, [r5, #0]
 8008694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008696:	2b01      	cmp	r3, #1
 8008698:	4606      	mov	r6, r0
 800869a:	460f      	mov	r7, r1
 800869c:	f105 0501 	add.w	r5, r5, #1
 80086a0:	d054      	beq.n	800874c <_dtoa_r+0x384>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2200      	movs	r2, #0
 80086a6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80086aa:	f7f8 f841 	bl	8000730 <__aeabi_dmul>
 80086ae:	2200      	movs	r2, #0
 80086b0:	2300      	movs	r3, #0
 80086b2:	4606      	mov	r6, r0
 80086b4:	460f      	mov	r7, r1
 80086b6:	f7f8 faa3 	bl	8000c00 <__aeabi_dcmpeq>
 80086ba:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80086be:	2800      	cmp	r0, #0
 80086c0:	f040 84fe 	bne.w	80090c0 <_dtoa_r+0xcf8>
 80086c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086c6:	44a9      	add	r9, r5
 80086c8:	9d07      	ldr	r5, [sp, #28]
 80086ca:	f105 0a02 	add.w	sl, r5, #2
 80086ce:	e018      	b.n	8008702 <_dtoa_r+0x33a>
 80086d0:	636f4361 	.word	0x636f4361
 80086d4:	3fd287a7 	.word	0x3fd287a7
 80086d8:	8b60c8b3 	.word	0x8b60c8b3
 80086dc:	3fc68a28 	.word	0x3fc68a28
 80086e0:	509f79fb 	.word	0x509f79fb
 80086e4:	3fd34413 	.word	0x3fd34413
 80086e8:	0801baa1 	.word	0x0801baa1
 80086ec:	f7f8 f820 	bl	8000730 <__aeabi_dmul>
 80086f0:	2200      	movs	r2, #0
 80086f2:	2300      	movs	r3, #0
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	f7f8 fa82 	bl	8000c00 <__aeabi_dcmpeq>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f040 84dd 	bne.w	80090bc <_dtoa_r+0xcf4>
 8008702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008706:	4630      	mov	r0, r6
 8008708:	4639      	mov	r1, r7
 800870a:	f7f8 f93b 	bl	8000984 <__aeabi_ddiv>
 800870e:	f7f8 faa9 	bl	8000c64 <__aeabi_d2iz>
 8008712:	4680      	mov	r8, r0
 8008714:	f7f7 ffa6 	bl	8000664 <__aeabi_i2d>
 8008718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800871c:	f7f8 f808 	bl	8000730 <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f7 fe4e 	bl	80003c8 <__aeabi_dsub>
 800872c:	f108 0530 	add.w	r5, r8, #48	; 0x30
 8008730:	2300      	movs	r3, #0
 8008732:	45ca      	cmp	sl, r9
 8008734:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8008738:	4606      	mov	r6, r0
 800873a:	4655      	mov	r5, sl
 800873c:	460f      	mov	r7, r1
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008746:	f10a 0a01 	add.w	sl, sl, #1
 800874a:	d1cf      	bne.n	80086ec <_dtoa_r+0x324>
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	4630      	mov	r0, r6
 8008752:	4639      	mov	r1, r7
 8008754:	f7f7 fe3a 	bl	80003cc <__adddf3>
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	4632      	mov	r2, r6
 800875e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008762:	463b      	mov	r3, r7
 8008764:	f7f8 fa56 	bl	8000c14 <__aeabi_dcmplt>
 8008768:	2800      	cmp	r0, #0
 800876a:	f000 8560 	beq.w	800922e <_dtoa_r+0xe66>
 800876e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008772:	9e04      	ldr	r6, [sp, #16]
 8008774:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8008778:	9616      	str	r6, [sp, #88]	; 0x58
 800877a:	9507      	str	r5, [sp, #28]
 800877c:	462a      	mov	r2, r5
 800877e:	e005      	b.n	800878c <_dtoa_r+0x3c4>
 8008780:	4599      	cmp	r9, r3
 8008782:	f000 84cf 	beq.w	8009124 <_dtoa_r+0xd5c>
 8008786:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 800878a:	461a      	mov	r2, r3
 800878c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008790:	f102 33ff 	add.w	r3, r2, #4294967295
 8008794:	d0f4      	beq.n	8008780 <_dtoa_r+0x3b8>
 8008796:	9207      	str	r2, [sp, #28]
 8008798:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800879a:	f108 0201 	add.w	r2, r8, #1
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	9604      	str	r6, [sp, #16]
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	e0b1      	b.n	800890a <_dtoa_r+0x542>
 80087a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80087a8:	2d00      	cmp	r5, #0
 80087aa:	f040 80e5 	bne.w	8008978 <_dtoa_r+0x5b0>
 80087ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087b2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80087b6:	9908      	ldr	r1, [sp, #32]
 80087b8:	2900      	cmp	r1, #0
 80087ba:	bfc8      	it	gt
 80087bc:	2d00      	cmpgt	r5, #0
 80087be:	dd09      	ble.n	80087d4 <_dtoa_r+0x40c>
 80087c0:	460b      	mov	r3, r1
 80087c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c4:	42ab      	cmp	r3, r5
 80087c6:	bfa8      	it	ge
 80087c8:	462b      	movge	r3, r5
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	1ac9      	subs	r1, r1, r3
 80087ce:	920a      	str	r2, [sp, #40]	; 0x28
 80087d0:	1aed      	subs	r5, r5, r3
 80087d2:	9108      	str	r1, [sp, #32]
 80087d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dd1a      	ble.n	8008810 <_dtoa_r+0x448>
 80087da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087dc:	2900      	cmp	r1, #0
 80087de:	f000 8465 	beq.w	80090ac <_dtoa_r+0xce4>
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	dd10      	ble.n	8008808 <_dtoa_r+0x440>
 80087e6:	4641      	mov	r1, r8
 80087e8:	4632      	mov	r2, r6
 80087ea:	4620      	mov	r0, r4
 80087ec:	f001 ff16 	bl	800a61c <__pow5mult>
 80087f0:	4680      	mov	r8, r0
 80087f2:	4641      	mov	r1, r8
 80087f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087f6:	4620      	mov	r0, r4
 80087f8:	f001 fe66 	bl	800a4c8 <__multiply>
 80087fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087fe:	4607      	mov	r7, r0
 8008800:	4620      	mov	r0, r4
 8008802:	f001 fdb5 	bl	800a370 <_Bfree>
 8008806:	970b      	str	r7, [sp, #44]	; 0x2c
 8008808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800880a:	1b9a      	subs	r2, r3, r6
 800880c:	f040 8495 	bne.w	800913a <_dtoa_r+0xd72>
 8008810:	2101      	movs	r1, #1
 8008812:	4620      	mov	r0, r4
 8008814:	f001 fe4e 	bl	800a4b4 <__i2b>
 8008818:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800881a:	2900      	cmp	r1, #0
 800881c:	4606      	mov	r6, r0
 800881e:	dd05      	ble.n	800882c <_dtoa_r+0x464>
 8008820:	4601      	mov	r1, r0
 8008822:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008824:	4620      	mov	r0, r4
 8008826:	f001 fef9 	bl	800a61c <__pow5mult>
 800882a:	4606      	mov	r6, r0
 800882c:	9a02      	ldr	r2, [sp, #8]
 800882e:	2a01      	cmp	r2, #1
 8008830:	f340 8379 	ble.w	8008f26 <_dtoa_r+0xb5e>
 8008834:	2700      	movs	r7, #0
 8008836:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008838:	2001      	movs	r0, #1
 800883a:	2900      	cmp	r1, #0
 800883c:	f040 8333 	bne.w	8008ea6 <_dtoa_r+0xade>
 8008840:	9b08      	ldr	r3, [sp, #32]
 8008842:	4403      	add	r3, r0
 8008844:	f013 031f 	ands.w	r3, r3, #31
 8008848:	f000 8286 	beq.w	8008d58 <_dtoa_r+0x990>
 800884c:	f1c3 0220 	rsb	r2, r3, #32
 8008850:	2a04      	cmp	r2, #4
 8008852:	f340 855b 	ble.w	800930c <_dtoa_r+0xf44>
 8008856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008858:	f8dd e020 	ldr.w	lr, [sp, #32]
 800885c:	f1c3 031c 	rsb	r3, r3, #28
 8008860:	441a      	add	r2, r3
 8008862:	449e      	add	lr, r3
 8008864:	920a      	str	r2, [sp, #40]	; 0x28
 8008866:	441d      	add	r5, r3
 8008868:	f8cd e020 	str.w	lr, [sp, #32]
 800886c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd05      	ble.n	800887e <_dtoa_r+0x4b6>
 8008872:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008874:	461a      	mov	r2, r3
 8008876:	4620      	mov	r0, r4
 8008878:	f001 ff20 	bl	800a6bc <__lshift>
 800887c:	900b      	str	r0, [sp, #44]	; 0x2c
 800887e:	9908      	ldr	r1, [sp, #32]
 8008880:	2900      	cmp	r1, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x4c8>
 8008884:	4631      	mov	r1, r6
 8008886:	9a08      	ldr	r2, [sp, #32]
 8008888:	4620      	mov	r0, r4
 800888a:	f001 ff17 	bl	800a6bc <__lshift>
 800888e:	4606      	mov	r6, r0
 8008890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008892:	2a00      	cmp	r2, #0
 8008894:	f040 8310 	bne.w	8008eb8 <_dtoa_r+0xaf0>
 8008898:	9a02      	ldr	r2, [sp, #8]
 800889a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889c:	2a02      	cmp	r2, #2
 800889e:	bfd4      	ite	le
 80088a0:	2300      	movle	r3, #0
 80088a2:	2301      	movgt	r3, #1
 80088a4:	2900      	cmp	r1, #0
 80088a6:	bfc8      	it	gt
 80088a8:	2300      	movgt	r3, #0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 820a 	beq.w	8008cc4 <_dtoa_r+0x8fc>
 80088b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80088b2:	2d00      	cmp	r5, #0
 80088b4:	f040 81ff 	bne.w	8008cb6 <_dtoa_r+0x8ee>
 80088b8:	4631      	mov	r1, r6
 80088ba:	462b      	mov	r3, r5
 80088bc:	2205      	movs	r2, #5
 80088be:	4620      	mov	r0, r4
 80088c0:	f001 fd60 	bl	800a384 <__multadd>
 80088c4:	4606      	mov	r6, r0
 80088c6:	4631      	mov	r1, r6
 80088c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80088ca:	f001 ff55 	bl	800a778 <__mcmp>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f340 81f1 	ble.w	8008cb6 <_dtoa_r+0x8ee>
 80088d4:	9d04      	ldr	r5, [sp, #16]
 80088d6:	3501      	adds	r5, #1
 80088d8:	9504      	str	r5, [sp, #16]
 80088da:	9d07      	ldr	r5, [sp, #28]
 80088dc:	46a9      	mov	r9, r5
 80088de:	2331      	movs	r3, #49	; 0x31
 80088e0:	f109 0101 	add.w	r1, r9, #1
 80088e4:	702b      	strb	r3, [r5, #0]
 80088e6:	9107      	str	r1, [sp, #28]
 80088e8:	2500      	movs	r5, #0
 80088ea:	4631      	mov	r1, r6
 80088ec:	4620      	mov	r0, r4
 80088ee:	f001 fd3f 	bl	800a370 <_Bfree>
 80088f2:	f1b8 0f00 	cmp.w	r8, #0
 80088f6:	d008      	beq.n	800890a <_dtoa_r+0x542>
 80088f8:	4545      	cmp	r5, r8
 80088fa:	bf18      	it	ne
 80088fc:	2d00      	cmpne	r5, #0
 80088fe:	f040 8239 	bne.w	8008d74 <_dtoa_r+0x9ac>
 8008902:	4641      	mov	r1, r8
 8008904:	4620      	mov	r0, r4
 8008906:	f001 fd33 	bl	800a370 <_Bfree>
 800890a:	4620      	mov	r0, r4
 800890c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800890e:	f001 fd2f 	bl	800a370 <_Bfree>
 8008912:	9e04      	ldr	r6, [sp, #16]
 8008914:	9d07      	ldr	r5, [sp, #28]
 8008916:	2200      	movs	r2, #0
 8008918:	1c73      	adds	r3, r6, #1
 800891a:	702a      	strb	r2, [r5, #0]
 800891c:	9e06      	ldr	r6, [sp, #24]
 800891e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008920:	6033      	str	r3, [r6, #0]
 8008922:	4648      	mov	r0, r9
 8008924:	2d00      	cmp	r5, #0
 8008926:	f43f ad91 	beq.w	800844c <_dtoa_r+0x84>
 800892a:	9e07      	ldr	r6, [sp, #28]
 800892c:	4648      	mov	r0, r9
 800892e:	602e      	str	r6, [r5, #0]
 8008930:	b01b      	add	sp, #108	; 0x6c
 8008932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008936:	9804      	ldr	r0, [sp, #16]
 8008938:	f7f7 fe94 	bl	8000664 <__aeabi_i2d>
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	f7f8 f95e 	bl	8000c00 <__aeabi_dcmpeq>
 8008944:	2800      	cmp	r0, #0
 8008946:	f47f adf4 	bne.w	8008532 <_dtoa_r+0x16a>
 800894a:	9e04      	ldr	r6, [sp, #16]
 800894c:	3e01      	subs	r6, #1
 800894e:	9604      	str	r6, [sp, #16]
 8008950:	e5ef      	b.n	8008532 <_dtoa_r+0x16a>
 8008952:	9e04      	ldr	r6, [sp, #16]
 8008954:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008956:	1bad      	subs	r5, r5, r6
 8008958:	950a      	str	r5, [sp, #40]	; 0x28
 800895a:	4275      	negs	r5, r6
 800895c:	2600      	movs	r6, #0
 800895e:	950c      	str	r5, [sp, #48]	; 0x30
 8008960:	960f      	str	r6, [sp, #60]	; 0x3c
 8008962:	e616      	b.n	8008592 <_dtoa_r+0x1ca>
 8008964:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8008968:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 800896c:	1b40      	subs	r0, r0, r5
 800896e:	fa0a f000 	lsl.w	r0, sl, r0
 8008972:	e5a8      	b.n	80084c6 <_dtoa_r+0xfe>
 8008974:	9014      	str	r0, [sp, #80]	; 0x50
 8008976:	e5f5      	b.n	8008564 <_dtoa_r+0x19c>
 8008978:	9e02      	ldr	r6, [sp, #8]
 800897a:	2e01      	cmp	r6, #1
 800897c:	f340 840f 	ble.w	800919e <_dtoa_r+0xdd6>
 8008980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008982:	1e6e      	subs	r6, r5, #1
 8008984:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008986:	42b5      	cmp	r5, r6
 8008988:	bfbf      	itttt	lt
 800898a:	9d0c      	ldrlt	r5, [sp, #48]	; 0x30
 800898c:	960c      	strlt	r6, [sp, #48]	; 0x30
 800898e:	ebc5 0306 	rsblt	r3, r5, r6
 8008992:	9d0f      	ldrlt	r5, [sp, #60]	; 0x3c
 8008994:	bfb6      	itet	lt
 8008996:	18ed      	addlt	r5, r5, r3
 8008998:	ebc6 0605 	rsbge	r6, r6, r5
 800899c:	950f      	strlt	r5, [sp, #60]	; 0x3c
 800899e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089a0:	bfb8      	it	lt
 80089a2:	2600      	movlt	r6, #0
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	bfb3      	iteet	lt
 80089a8:	f8dd e028 	ldrlt.w	lr, [sp, #40]	; 0x28
 80089ac:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 80089ae:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 80089b0:	ebc5 050e 	rsblt	r5, r5, lr
 80089b4:	bfb8      	it	lt
 80089b6:	2300      	movlt	r3, #0
 80089b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ba:	f8dd e020 	ldr.w	lr, [sp, #32]
 80089be:	441a      	add	r2, r3
 80089c0:	449e      	add	lr, r3
 80089c2:	4620      	mov	r0, r4
 80089c4:	2101      	movs	r1, #1
 80089c6:	920a      	str	r2, [sp, #40]	; 0x28
 80089c8:	f8cd e020 	str.w	lr, [sp, #32]
 80089cc:	f001 fd72 	bl	800a4b4 <__i2b>
 80089d0:	4680      	mov	r8, r0
 80089d2:	e6f0      	b.n	80087b6 <_dtoa_r+0x3ee>
 80089d4:	2600      	movs	r6, #0
 80089d6:	960d      	str	r6, [sp, #52]	; 0x34
 80089d8:	9e05      	ldr	r6, [sp, #20]
 80089da:	f8dd e010 	ldr.w	lr, [sp, #16]
 80089de:	4476      	add	r6, lr
 80089e0:	960e      	str	r6, [sp, #56]	; 0x38
 80089e2:	3601      	adds	r6, #1
 80089e4:	2e00      	cmp	r6, #0
 80089e6:	9609      	str	r6, [sp, #36]	; 0x24
 80089e8:	f340 8353 	ble.w	8009092 <_dtoa_r+0xcca>
 80089ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089ee:	2e0e      	cmp	r6, #14
 80089f0:	bf8c      	ite	hi
 80089f2:	2500      	movhi	r5, #0
 80089f4:	f005 0501 	andls.w	r5, r5, #1
 80089f8:	2100      	movs	r1, #0
 80089fa:	2e17      	cmp	r6, #23
 80089fc:	6461      	str	r1, [r4, #68]	; 0x44
 80089fe:	d90a      	bls.n	8008a16 <_dtoa_r+0x64e>
 8008a00:	2201      	movs	r2, #1
 8008a02:	2304      	movs	r3, #4
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	f103 0014 	add.w	r0, r3, #20
 8008a0a:	42b0      	cmp	r0, r6
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	f102 0201 	add.w	r2, r2, #1
 8008a12:	d9f7      	bls.n	8008a04 <_dtoa_r+0x63c>
 8008a14:	6461      	str	r1, [r4, #68]	; 0x44
 8008a16:	4620      	mov	r0, r4
 8008a18:	f001 fc84 	bl	800a324 <_Balloc>
 8008a1c:	9007      	str	r0, [sp, #28]
 8008a1e:	6420      	str	r0, [r4, #64]	; 0x40
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	f43f ae01 	beq.w	8008628 <_dtoa_r+0x260>
 8008a26:	9d04      	ldr	r5, [sp, #16]
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 8008a2e:	f340 81aa 	ble.w	8008d86 <_dtoa_r+0x9be>
 8008a32:	f64b 23d0 	movw	r3, #47824	; 0xbad0
 8008a36:	f005 020f 	and.w	r2, r5, #15
 8008a3a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a42:	112d      	asrs	r5, r5, #4
 8008a44:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008a48:	06eb      	lsls	r3, r5, #27
 8008a4a:	f140 818e 	bpl.w	8008d6a <_dtoa_r+0x9a2>
 8008a4e:	f64b 3398 	movw	r3, #48024	; 0xbb98
 8008a52:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008a56:	4650      	mov	r0, sl
 8008a58:	4659      	mov	r1, fp
 8008a5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a5e:	f7f7 ff91 	bl	8000984 <__aeabi_ddiv>
 8008a62:	f005 050f 	and.w	r5, r5, #15
 8008a66:	4682      	mov	sl, r0
 8008a68:	468b      	mov	fp, r1
 8008a6a:	f04f 0803 	mov.w	r8, #3
 8008a6e:	b19d      	cbz	r5, 8008a98 <_dtoa_r+0x6d0>
 8008a70:	f64b 3998 	movw	r9, #48024	; 0xbb98
 8008a74:	f6c0 0901 	movt	r9, #2049	; 0x801
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	07ef      	lsls	r7, r5, #31
 8008a7e:	d505      	bpl.n	8008a8c <_dtoa_r+0x6c4>
 8008a80:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008a84:	f7f7 fe54 	bl	8000730 <__aeabi_dmul>
 8008a88:	f108 0801 	add.w	r8, r8, #1
 8008a8c:	106d      	asrs	r5, r5, #1
 8008a8e:	f109 0908 	add.w	r9, r9, #8
 8008a92:	d1f3      	bne.n	8008a7c <_dtoa_r+0x6b4>
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	4632      	mov	r2, r6
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	4659      	mov	r1, fp
 8008aa0:	f7f7 ff70 	bl	8000984 <__aeabi_ddiv>
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008aaa:	b155      	cbz	r5, 8008ac2 <_dtoa_r+0x6fa>
 8008aac:	2300      	movs	r3, #0
 8008aae:	4630      	mov	r0, r6
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8008ab8:	f7f8 f8ac 	bl	8000c14 <__aeabi_dcmplt>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f040 8306 	bne.w	80090ce <_dtoa_r+0xd06>
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7f7 fdce 	bl	8000664 <__aeabi_i2d>
 8008ac8:	4632      	mov	r2, r6
 8008aca:	463b      	mov	r3, r7
 8008acc:	f7f7 fe30 	bl	8000730 <__aeabi_dmul>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8008ad8:	f7f7 fc78 	bl	80003cc <__adddf3>
 8008adc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ade:	4680      	mov	r8, r0
 8008ae0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8008ae4:	2d00      	cmp	r5, #0
 8008ae6:	f000 80ca 	beq.w	8008c7e <_dtoa_r+0x8b6>
 8008aea:	9d04      	ldr	r5, [sp, #16]
 8008aec:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008af0:	9516      	str	r5, [sp, #88]	; 0x58
 8008af2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008af4:	f64b 23d0 	movw	r3, #47824	; 0xbad0
 8008af8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	f000 816f 	beq.w	8008de0 <_dtoa_r+0xa18>
 8008b02:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8008b06:	2100      	movs	r1, #0
 8008b08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8008b12:	f8cd c004 	str.w	ip, [sp, #4]
 8008b16:	f7f7 ff35 	bl	8000984 <__aeabi_ddiv>
 8008b1a:	4642      	mov	r2, r8
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	f7f7 fc53 	bl	80003c8 <__aeabi_dsub>
 8008b22:	4682      	mov	sl, r0
 8008b24:	468b      	mov	fp, r1
 8008b26:	4630      	mov	r0, r6
 8008b28:	4639      	mov	r1, r7
 8008b2a:	f7f8 f89b 	bl	8000c64 <__aeabi_d2iz>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	f7f7 fd98 	bl	8000664 <__aeabi_i2d>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 fc44 	bl	80003c8 <__aeabi_dsub>
 8008b40:	3530      	adds	r5, #48	; 0x30
 8008b42:	fa5f f885 	uxtb.w	r8, r5
 8008b46:	9d07      	ldr	r5, [sp, #28]
 8008b48:	4606      	mov	r6, r0
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	f885 8000 	strb.w	r8, [r5]
 8008b50:	4650      	mov	r0, sl
 8008b52:	3501      	adds	r5, #1
 8008b54:	4659      	mov	r1, fp
 8008b56:	4632      	mov	r2, r6
 8008b58:	463b      	mov	r3, r7
 8008b5a:	9500      	str	r5, [sp, #0]
 8008b5c:	f7f8 f878 	bl	8000c50 <__aeabi_dcmpgt>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d162      	bne.n	8008c2a <_dtoa_r+0x862>
 8008b64:	2100      	movs	r1, #0
 8008b66:	4632      	mov	r2, r6
 8008b68:	463b      	mov	r3, r7
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8008b70:	f7f7 fc2a 	bl	80003c8 <__aeabi_dsub>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4650      	mov	r0, sl
 8008b7a:	4659      	mov	r1, fp
 8008b7c:	f7f8 f868 	bl	8000c50 <__aeabi_dcmpgt>
 8008b80:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f040 83b6 	bne.w	80092f6 <_dtoa_r+0xf2e>
 8008b8a:	f1bc 0f01 	cmp.w	ip, #1
 8008b8e:	f340 80f7 	ble.w	8008d80 <_dtoa_r+0x9b8>
 8008b92:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008b96:	9417      	str	r4, [sp, #92]	; 0x5c
 8008b98:	44e1      	add	r9, ip
 8008b9a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8008b9e:	f8dd 9000 	ldr.w	r9, [sp]
 8008ba2:	e010      	b.n	8008bc6 <_dtoa_r+0x7fe>
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8008bac:	f7f7 fc0c 	bl	80003c8 <__aeabi_dsub>
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	465b      	mov	r3, fp
 8008bb4:	f7f8 f82e 	bl	8000c14 <__aeabi_dcmplt>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f040 831c 	bne.w	80091f6 <_dtoa_r+0xe2e>
 8008bbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008bc0:	45a9      	cmp	r9, r5
 8008bc2:	f000 80dc 	beq.w	8008d7e <_dtoa_r+0x9b6>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	4650      	mov	r0, sl
 8008bca:	4659      	mov	r1, fp
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008bd2:	f7f7 fdad 	bl	8000730 <__aeabi_dmul>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008bde:	4682      	mov	sl, r0
 8008be0:	468b      	mov	fp, r1
 8008be2:	4630      	mov	r0, r6
 8008be4:	4639      	mov	r1, r7
 8008be6:	f7f7 fda3 	bl	8000730 <__aeabi_dmul>
 8008bea:	460d      	mov	r5, r1
 8008bec:	4604      	mov	r4, r0
 8008bee:	f7f8 f839 	bl	8000c64 <__aeabi_d2iz>
 8008bf2:	4680      	mov	r8, r0
 8008bf4:	f7f7 fd36 	bl	8000664 <__aeabi_i2d>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fbe2 	bl	80003c8 <__aeabi_dsub>
 8008c04:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8008c08:	fa5f f888 	uxtb.w	r8, r8
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	465b      	mov	r3, fp
 8008c10:	f809 8b01 	strb.w	r8, [r9], #1
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	f7f7 fffc 	bl	8000c14 <__aeabi_dcmplt>
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	463b      	mov	r3, r7
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d0bf      	beq.n	8008ba4 <_dtoa_r+0x7dc>
 8008c24:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008c26:	f8cd 9000 	str.w	r9, [sp]
 8008c2a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008c2c:	9e00      	ldr	r6, [sp, #0]
 8008c2e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008c32:	9504      	str	r5, [sp, #16]
 8008c34:	9607      	str	r6, [sp, #28]
 8008c36:	e668      	b.n	800890a <_dtoa_r+0x542>
 8008c38:	2600      	movs	r6, #0
 8008c3a:	960d      	str	r6, [sp, #52]	; 0x34
 8008c3c:	9e05      	ldr	r6, [sp, #20]
 8008c3e:	2e00      	cmp	r6, #0
 8008c40:	f340 822f 	ble.w	80090a2 <_dtoa_r+0xcda>
 8008c44:	2e0e      	cmp	r6, #14
 8008c46:	bf8c      	ite	hi
 8008c48:	2500      	movhi	r5, #0
 8008c4a:	f005 0501 	andls.w	r5, r5, #1
 8008c4e:	960e      	str	r6, [sp, #56]	; 0x38
 8008c50:	9609      	str	r6, [sp, #36]	; 0x24
 8008c52:	e6d1      	b.n	80089f8 <_dtoa_r+0x630>
 8008c54:	2601      	movs	r6, #1
 8008c56:	960d      	str	r6, [sp, #52]	; 0x34
 8008c58:	e7f0      	b.n	8008c3c <_dtoa_r+0x874>
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	f7f7 fd02 	bl	8000664 <__aeabi_i2d>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4630      	mov	r0, r6
 8008c66:	4639      	mov	r1, r7
 8008c68:	f7f7 fd62 	bl	8000730 <__aeabi_dmul>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8008c74:	f7f7 fbaa 	bl	80003cc <__adddf3>
 8008c78:	4680      	mov	r8, r0
 8008c7a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4630      	mov	r0, r6
 8008c82:	2200      	movs	r2, #0
 8008c84:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8008c88:	4639      	mov	r1, r7
 8008c8a:	f7f7 fb9d 	bl	80003c8 <__aeabi_dsub>
 8008c8e:	4642      	mov	r2, r8
 8008c90:	464b      	mov	r3, r9
 8008c92:	4682      	mov	sl, r0
 8008c94:	468b      	mov	fp, r1
 8008c96:	f7f7 ffdb 	bl	8000c50 <__aeabi_dcmpgt>
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f040 80ff 	bne.w	8008ea0 <_dtoa_r+0xad8>
 8008ca2:	4642      	mov	r2, r8
 8008ca4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ca8:	4650      	mov	r0, sl
 8008caa:	4659      	mov	r1, fp
 8008cac:	f7f7 ffb2 	bl	8000c14 <__aeabi_dcmplt>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d065      	beq.n	8008d80 <_dtoa_r+0x9b8>
 8008cb4:	46b0      	mov	r8, r6
 8008cb6:	9d05      	ldr	r5, [sp, #20]
 8008cb8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008cbc:	43ed      	mvns	r5, r5
 8008cbe:	9504      	str	r5, [sp, #16]
 8008cc0:	2500      	movs	r5, #0
 8008cc2:	e612      	b.n	80088ea <_dtoa_r+0x522>
 8008cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	f040 815f 	bne.w	8008f8a <_dtoa_r+0xbc2>
 8008ccc:	2500      	movs	r5, #0
 8008cce:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008cd2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008cd6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008cda:	e006      	b.n	8008cea <_dtoa_r+0x922>
 8008cdc:	4649      	mov	r1, r9
 8008cde:	4620      	mov	r0, r4
 8008ce0:	220a      	movs	r2, #10
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f001 fb4e 	bl	800a384 <__multadd>
 8008ce8:	4681      	mov	r9, r0
 8008cea:	4648      	mov	r0, r9
 8008cec:	4631      	mov	r1, r6
 8008cee:	f7ff fad3 	bl	8008298 <quorem>
 8008cf2:	3030      	adds	r0, #48	; 0x30
 8008cf4:	f80b 0005 	strb.w	r0, [fp, r5]
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	4555      	cmp	r5, sl
 8008cfc:	dbee      	blt.n	8008cdc <_dtoa_r+0x914>
 8008cfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d00:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008d04:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8008d08:	2d01      	cmp	r5, #1
 8008d0a:	bfac      	ite	ge
 8008d0c:	44ab      	addge	fp, r5
 8008d0e:	f10b 0b01 	addlt.w	fp, fp, #1
 8008d12:	4607      	mov	r7, r0
 8008d14:	2500      	movs	r5, #0
 8008d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f001 fcce 	bl	800a6bc <__lshift>
 8008d20:	4631      	mov	r1, r6
 8008d22:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d24:	f001 fd28 	bl	800a778 <__mcmp>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	f340 826e 	ble.w	800920a <_dtoa_r+0xe42>
 8008d2e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8008d32:	9907      	ldr	r1, [sp, #28]
 8008d34:	e005      	b.n	8008d42 <_dtoa_r+0x97a>
 8008d36:	4299      	cmp	r1, r3
 8008d38:	f000 8223 	beq.w	8009182 <_dtoa_r+0xdba>
 8008d3c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8008d40:	469b      	mov	fp, r3
 8008d42:	2a39      	cmp	r2, #57	; 0x39
 8008d44:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008d48:	d0f5      	beq.n	8008d36 <_dtoa_r+0x96e>
 8008d4a:	3201      	adds	r2, #1
 8008d4c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	f8cd b01c 	str.w	fp, [sp, #28]
 8008d56:	e5c8      	b.n	80088ea <_dtoa_r+0x522>
 8008d58:	231c      	movs	r3, #28
 8008d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d5c:	9a08      	ldr	r2, [sp, #32]
 8008d5e:	4419      	add	r1, r3
 8008d60:	441a      	add	r2, r3
 8008d62:	910a      	str	r1, [sp, #40]	; 0x28
 8008d64:	441d      	add	r5, r3
 8008d66:	9208      	str	r2, [sp, #32]
 8008d68:	e580      	b.n	800886c <_dtoa_r+0x4a4>
 8008d6a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8008d6e:	f04f 0802 	mov.w	r8, #2
 8008d72:	e67c      	b.n	8008a6e <_dtoa_r+0x6a6>
 8008d74:	4629      	mov	r1, r5
 8008d76:	4620      	mov	r0, r4
 8008d78:	f001 fafa 	bl	800a370 <_Bfree>
 8008d7c:	e5c1      	b.n	8008902 <_dtoa_r+0x53a>
 8008d7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008d80:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8008d84:	e450      	b.n	8008628 <_dtoa_r+0x260>
 8008d86:	9e04      	ldr	r6, [sp, #16]
 8008d88:	4275      	negs	r5, r6
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	f000 819a 	beq.w	80090c4 <_dtoa_r+0xcfc>
 8008d90:	f64b 23d0 	movw	r3, #47824	; 0xbad0
 8008d94:	f005 020f 	and.w	r2, r5, #15
 8008d98:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008da8:	f7f7 fcc2 	bl	8000730 <__aeabi_dmul>
 8008dac:	112d      	asrs	r5, r5, #4
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	f000 829c 	beq.w	80092ee <_dtoa_r+0xf26>
 8008db6:	f64b 3998 	movw	r9, #48024	; 0xbb98
 8008dba:	f6c0 0901 	movt	r9, #2049	; 0x801
 8008dbe:	f04f 0802 	mov.w	r8, #2
 8008dc2:	07ee      	lsls	r6, r5, #31
 8008dc4:	d505      	bpl.n	8008dd2 <_dtoa_r+0xa0a>
 8008dc6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008dca:	f7f7 fcb1 	bl	8000730 <__aeabi_dmul>
 8008dce:	f108 0801 	add.w	r8, r8, #1
 8008dd2:	106d      	asrs	r5, r5, #1
 8008dd4:	f109 0908 	add.w	r9, r9, #8
 8008dd8:	d1f3      	bne.n	8008dc2 <_dtoa_r+0x9fa>
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460f      	mov	r7, r1
 8008dde:	e663      	b.n	8008aa8 <_dtoa_r+0x6e0>
 8008de0:	f10c 3bff 	add.w	fp, ip, #4294967295
 8008de4:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df0:	f8cd c004 	str.w	ip, [sp, #4]
 8008df4:	f7f7 fc9c 	bl	8000730 <__aeabi_dmul>
 8008df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7f7 ff30 	bl	8000c64 <__aeabi_d2iz>
 8008e04:	4605      	mov	r5, r0
 8008e06:	f7f7 fc2d 	bl	8000664 <__aeabi_i2d>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4630      	mov	r0, r6
 8008e10:	4639      	mov	r1, r7
 8008e12:	f7f7 fad9 	bl	80003c8 <__aeabi_dsub>
 8008e16:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008e1a:	3530      	adds	r5, #48	; 0x30
 8008e1c:	f88e 5000 	strb.w	r5, [lr]
 8008e20:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008e24:	f1bc 0f01 	cmp.w	ip, #1
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	f10e 0a01 	add.w	sl, lr, #1
 8008e30:	d01f      	beq.n	8008e72 <_dtoa_r+0xaaa>
 8008e32:	9d07      	ldr	r5, [sp, #28]
 8008e34:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e38:	44e1      	add	r9, ip
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008e42:	f7f7 fc75 	bl	8000730 <__aeabi_dmul>
 8008e46:	460f      	mov	r7, r1
 8008e48:	4606      	mov	r6, r0
 8008e4a:	f7f7 ff0b 	bl	8000c64 <__aeabi_d2iz>
 8008e4e:	4680      	mov	r8, r0
 8008e50:	f7f7 fc08 	bl	8000664 <__aeabi_i2d>
 8008e54:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fab2 	bl	80003c8 <__aeabi_dsub>
 8008e64:	f805 8f01 	strb.w	r8, [r5, #1]!
 8008e68:	454d      	cmp	r5, r9
 8008e6a:	d1e6      	bne.n	8008e3a <_dtoa_r+0xa72>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	44da      	add	sl, fp
 8008e72:	2300      	movs	r3, #0
 8008e74:	2200      	movs	r2, #0
 8008e76:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8008e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e7e:	f7f7 faa5 	bl	80003cc <__adddf3>
 8008e82:	4632      	mov	r2, r6
 8008e84:	463b      	mov	r3, r7
 8008e86:	f7f7 fec5 	bl	8000c14 <__aeabi_dcmplt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f000 815c 	beq.w	8009148 <_dtoa_r+0xd80>
 8008e90:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008e94:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
 8008e98:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	e475      	b.n	800878c <_dtoa_r+0x3c4>
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	46b0      	mov	r8, r6
 8008ea4:	e516      	b.n	80088d4 <_dtoa_r+0x50c>
 8008ea6:	6933      	ldr	r3, [r6, #16]
 8008ea8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008eac:	6918      	ldr	r0, [r3, #16]
 8008eae:	f001 fab5 	bl	800a41c <__hi0bits>
 8008eb2:	f1c0 0020 	rsb	r0, r0, #32
 8008eb6:	e4c3      	b.n	8008840 <_dtoa_r+0x478>
 8008eb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008eba:	4631      	mov	r1, r6
 8008ebc:	f001 fc5c 	bl	800a778 <__mcmp>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f6bf ace9 	bge.w	8008898 <_dtoa_r+0x4d0>
 8008ec6:	f8dd e010 	ldr.w	lr, [sp, #16]
 8008eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ecc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	220a      	movs	r2, #10
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f8cd e010 	str.w	lr, [sp, #16]
 8008eda:	f001 fa53 	bl	800a384 <__multadd>
 8008ede:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ee0:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ee2:	2900      	cmp	r1, #0
 8008ee4:	d13b      	bne.n	8008f5e <_dtoa_r+0xb96>
 8008ee6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	dc03      	bgt.n	8008ef4 <_dtoa_r+0xb2c>
 8008eec:	9d02      	ldr	r5, [sp, #8]
 8008eee:	2d02      	cmp	r5, #2
 8008ef0:	f300 8208 	bgt.w	8009304 <_dtoa_r+0xf3c>
 8008ef4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008ef6:	9509      	str	r5, [sp, #36]	; 0x24
 8008ef8:	e6e8      	b.n	8008ccc <_dtoa_r+0x904>
 8008efa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008efc:	2d00      	cmp	r5, #0
 8008efe:	f040 8194 	bne.w	800922a <_dtoa_r+0xe62>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2200      	movs	r2, #0
 8008f06:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8008f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f0e:	f7f7 fc0f 	bl	8000730 <__aeabi_dmul>
 8008f12:	4652      	mov	r2, sl
 8008f14:	465b      	mov	r3, fp
 8008f16:	f7f7 fe91 	bl	8000c3c <__aeabi_dcmpge>
 8008f1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f1c:	46b0      	mov	r8, r6
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f47f aec9 	bne.w	8008cb6 <_dtoa_r+0x8ee>
 8008f24:	e4d6      	b.n	80088d4 <_dtoa_r+0x50c>
 8008f26:	f1ba 0f00 	cmp.w	sl, #0
 8008f2a:	f47f ac83 	bne.w	8008834 <_dtoa_r+0x46c>
 8008f2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f32:	4657      	mov	r7, sl
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f ac7e 	bne.w	8008836 <_dtoa_r+0x46e>
 8008f3a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8008f3e:	0d3f      	lsrs	r7, r7, #20
 8008f40:	053f      	lsls	r7, r7, #20
 8008f42:	2f00      	cmp	r7, #0
 8008f44:	f43f ac77 	beq.w	8008836 <_dtoa_r+0x46e>
 8008f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4a:	f8dd e020 	ldr.w	lr, [sp, #32]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	f10e 0e01 	add.w	lr, lr, #1
 8008f54:	930a      	str	r3, [sp, #40]	; 0x28
 8008f56:	f8cd e020 	str.w	lr, [sp, #32]
 8008f5a:	2701      	movs	r7, #1
 8008f5c:	e46b      	b.n	8008836 <_dtoa_r+0x46e>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4641      	mov	r1, r8
 8008f62:	220a      	movs	r2, #10
 8008f64:	4620      	mov	r0, r4
 8008f66:	f001 fa0d 	bl	800a384 <__multadd>
 8008f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f6c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	bfcc      	ite	gt
 8008f74:	2300      	movgt	r3, #0
 8008f76:	2301      	movle	r3, #1
 8008f78:	f1be 0f02 	cmp.w	lr, #2
 8008f7c:	bfd8      	it	le
 8008f7e:	2300      	movle	r3, #0
 8008f80:	4680      	mov	r8, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f040 81be 	bne.w	8009304 <_dtoa_r+0xf3c>
 8008f88:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	dd05      	ble.n	8008f9a <_dtoa_r+0xbd2>
 8008f8e:	4641      	mov	r1, r8
 8008f90:	462a      	mov	r2, r5
 8008f92:	4620      	mov	r0, r4
 8008f94:	f001 fb92 	bl	800a6bc <__lshift>
 8008f98:	4680      	mov	r8, r0
 8008f9a:	46c4      	mov	ip, r8
 8008f9c:	2f00      	cmp	r7, #0
 8008f9e:	f040 8157 	bne.w	8009250 <_dtoa_r+0xe88>
 8008fa2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fa4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008fa8:	9907      	ldr	r1, [sp, #28]
 8008faa:	44ae      	add	lr, r5
 8008fac:	f00a 0501 	and.w	r5, sl, #1
 8008fb0:	9509      	str	r5, [sp, #36]	; 0x24
 8008fb2:	4637      	mov	r7, r6
 8008fb4:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8008fb8:	1c4d      	adds	r5, r1, #1
 8008fba:	46e1      	mov	r9, ip
 8008fbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008fbe:	e00a      	b.n	8008fd6 <_dtoa_r+0xc0e>
 8008fc0:	f001 f9e0 	bl	800a384 <__multadd>
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	4680      	mov	r8, r0
 8008fc8:	220a      	movs	r2, #10
 8008fca:	4620      	mov	r0, r4
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f001 f9d9 	bl	800a384 <__multadd>
 8008fd2:	4681      	mov	r9, r0
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff f95d 	bl	8008298 <quorem>
 8008fde:	4641      	mov	r1, r8
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f001 fbc8 	bl	800a778 <__mcmp>
 8008fe8:	464a      	mov	r2, r9
 8008fea:	4683      	mov	fp, r0
 8008fec:	4639      	mov	r1, r7
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f001 fbe4 	bl	800a7bc <__mdiff>
 8008ff4:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 8008ff8:	9205      	str	r2, [sp, #20]
 8008ffa:	68c2      	ldr	r2, [r0, #12]
 8008ffc:	f105 3eff 	add.w	lr, r5, #4294967295
 8009000:	4603      	mov	r3, r0
 8009002:	f8cd e020 	str.w	lr, [sp, #32]
 8009006:	2a00      	cmp	r2, #0
 8009008:	d13e      	bne.n	8009088 <_dtoa_r+0xcc0>
 800900a:	4619      	mov	r1, r3
 800900c:	4630      	mov	r0, r6
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	f001 fbb2 	bl	800a778 <__mcmp>
 8009014:	9b01      	ldr	r3, [sp, #4]
 8009016:	4602      	mov	r2, r0
 8009018:	4619      	mov	r1, r3
 800901a:	4620      	mov	r0, r4
 800901c:	9201      	str	r2, [sp, #4]
 800901e:	f001 f9a7 	bl	800a370 <_Bfree>
 8009022:	9a01      	ldr	r2, [sp, #4]
 8009024:	9902      	ldr	r1, [sp, #8]
 8009026:	4311      	orrs	r1, r2
 8009028:	d103      	bne.n	8009032 <_dtoa_r+0xc6a>
 800902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 814d 	beq.w	80092cc <_dtoa_r+0xf04>
 8009032:	f1bb 0f00 	cmp.w	fp, #0
 8009036:	f2c0 80ba 	blt.w	80091ae <_dtoa_r+0xde6>
 800903a:	9b02      	ldr	r3, [sp, #8]
 800903c:	ea5b 0303 	orrs.w	r3, fp, r3
 8009040:	d103      	bne.n	800904a <_dtoa_r+0xc82>
 8009042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009044:	2900      	cmp	r1, #0
 8009046:	f000 80b2 	beq.w	80091ae <_dtoa_r+0xde6>
 800904a:	2a00      	cmp	r2, #0
 800904c:	f300 811d 	bgt.w	800928a <_dtoa_r+0xec2>
 8009050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	429d      	cmp	r5, r3
 8009056:	f805 2c01 	strb.w	r2, [r5, #-1]
 800905a:	46ab      	mov	fp, r5
 800905c:	f000 8127 	beq.w	80092ae <_dtoa_r+0xee6>
 8009060:	4631      	mov	r1, r6
 8009062:	220a      	movs	r2, #10
 8009064:	2300      	movs	r3, #0
 8009066:	4620      	mov	r0, r4
 8009068:	f001 f98c 	bl	800a384 <__multadd>
 800906c:	45c8      	cmp	r8, r9
 800906e:	4606      	mov	r6, r0
 8009070:	4641      	mov	r1, r8
 8009072:	4620      	mov	r0, r4
 8009074:	f04f 020a 	mov.w	r2, #10
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	d1a0      	bne.n	8008fc0 <_dtoa_r+0xbf8>
 800907e:	f001 f981 	bl	800a384 <__multadd>
 8009082:	4680      	mov	r8, r0
 8009084:	4681      	mov	r9, r0
 8009086:	e7a5      	b.n	8008fd4 <_dtoa_r+0xc0c>
 8009088:	2201      	movs	r2, #1
 800908a:	e7c5      	b.n	8009018 <_dtoa_r+0xc50>
 800908c:	2601      	movs	r6, #1
 800908e:	960d      	str	r6, [sp, #52]	; 0x34
 8009090:	e4a2      	b.n	80089d8 <_dtoa_r+0x610>
 8009092:	2e0e      	cmp	r6, #14
 8009094:	bf8c      	ite	hi
 8009096:	2300      	movhi	r3, #0
 8009098:	2301      	movls	r3, #1
 800909a:	2100      	movs	r1, #0
 800909c:	401d      	ands	r5, r3
 800909e:	6461      	str	r1, [r4, #68]	; 0x44
 80090a0:	e4b9      	b.n	8008a16 <_dtoa_r+0x64e>
 80090a2:	2301      	movs	r3, #1
 80090a4:	930e      	str	r3, [sp, #56]	; 0x38
 80090a6:	9309      	str	r3, [sp, #36]	; 0x24
 80090a8:	9305      	str	r3, [sp, #20]
 80090aa:	e7f6      	b.n	800909a <_dtoa_r+0xcd2>
 80090ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 fab3 	bl	800a61c <__pow5mult>
 80090b6:	900b      	str	r0, [sp, #44]	; 0x2c
 80090b8:	f7ff bbaa 	b.w	8008810 <_dtoa_r+0x448>
 80090bc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80090c0:	9507      	str	r5, [sp, #28]
 80090c2:	e422      	b.n	800890a <_dtoa_r+0x542>
 80090c4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80090c8:	f04f 0802 	mov.w	r8, #2
 80090cc:	e4ec      	b.n	8008aa8 <_dtoa_r+0x6e0>
 80090ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	f43f adc2 	beq.w	8008c5a <_dtoa_r+0x892>
 80090d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80090d8:	2d00      	cmp	r5, #0
 80090da:	f77f ae51 	ble.w	8008d80 <_dtoa_r+0x9b8>
 80090de:	2300      	movs	r3, #0
 80090e0:	2200      	movs	r2, #0
 80090e2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fb21 	bl	8000730 <__aeabi_dmul>
 80090ee:	4606      	mov	r6, r0
 80090f0:	f108 0001 	add.w	r0, r8, #1
 80090f4:	460f      	mov	r7, r1
 80090f6:	f7f7 fab5 	bl	8000664 <__aeabi_i2d>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 fb15 	bl	8000730 <__aeabi_dmul>
 8009106:	2300      	movs	r3, #0
 8009108:	2200      	movs	r2, #0
 800910a:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800910e:	f7f7 f95d 	bl	80003cc <__adddf3>
 8009112:	9d04      	ldr	r5, [sp, #16]
 8009114:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8009118:	3d01      	subs	r5, #1
 800911a:	4680      	mov	r8, r0
 800911c:	9516      	str	r5, [sp, #88]	; 0x58
 800911e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8009122:	e4e6      	b.n	8008af2 <_dtoa_r+0x72a>
 8009124:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8009126:	9207      	str	r2, [sp, #28]
 8009128:	2230      	movs	r2, #48	; 0x30
 800912a:	f889 2000 	strb.w	r2, [r9]
 800912e:	3501      	adds	r5, #1
 8009130:	2231      	movs	r2, #49	; 0x31
 8009132:	9504      	str	r5, [sp, #16]
 8009134:	701a      	strb	r2, [r3, #0]
 8009136:	f7ff bbe8 	b.w	800890a <_dtoa_r+0x542>
 800913a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800913c:	4620      	mov	r0, r4
 800913e:	f001 fa6d 	bl	800a61c <__pow5mult>
 8009142:	900b      	str	r0, [sp, #44]	; 0x2c
 8009144:	f7ff bb64 	b.w	8008810 <_dtoa_r+0x448>
 8009148:	2100      	movs	r1, #0
 800914a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800914e:	2000      	movs	r0, #0
 8009150:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8009154:	f7f7 f938 	bl	80003c8 <__aeabi_dsub>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	f7f7 fd78 	bl	8000c50 <__aeabi_dcmpgt>
 8009160:	2800      	cmp	r0, #0
 8009162:	f43f ae0d 	beq.w	8008d80 <_dtoa_r+0x9b8>
 8009166:	4653      	mov	r3, sl
 8009168:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8009170:	2a30      	cmp	r2, #48	; 0x30
 8009172:	d0f8      	beq.n	8009166 <_dtoa_r+0xd9e>
 8009174:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8009176:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800917a:	9504      	str	r5, [sp, #16]
 800917c:	9307      	str	r3, [sp, #28]
 800917e:	f7ff bbc4 	b.w	800890a <_dtoa_r+0x542>
 8009182:	f8dd e010 	ldr.w	lr, [sp, #16]
 8009186:	9907      	ldr	r1, [sp, #28]
 8009188:	f8cd b01c 	str.w	fp, [sp, #28]
 800918c:	2331      	movs	r3, #49	; 0x31
 800918e:	f10e 0e01 	add.w	lr, lr, #1
 8009192:	f8cd e010 	str.w	lr, [sp, #16]
 8009196:	700b      	strb	r3, [r1, #0]
 8009198:	4689      	mov	r9, r1
 800919a:	f7ff bba6 	b.w	80088ea <_dtoa_r+0x522>
 800919e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80091a0:	2d00      	cmp	r5, #0
 80091a2:	d06b      	beq.n	800927c <_dtoa_r+0xeb4>
 80091a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80091ac:	e404      	b.n	80089b8 <_dtoa_r+0x5f0>
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80091b2:	46cc      	mov	ip, r9
 80091b4:	463e      	mov	r6, r7
 80091b6:	9f05      	ldr	r7, [sp, #20]
 80091b8:	dd13      	ble.n	80091e2 <_dtoa_r+0xe1a>
 80091ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	4620      	mov	r0, r4
 80091c4:	f001 fa7a 	bl	800a6bc <__lshift>
 80091c8:	4631      	mov	r1, r6
 80091ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80091cc:	f001 fad4 	bl	800a778 <__mcmp>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80091d6:	f340 8084 	ble.w	80092e2 <_dtoa_r+0xf1a>
 80091da:	2f39      	cmp	r7, #57	; 0x39
 80091dc:	d06d      	beq.n	80092ba <_dtoa_r+0xef2>
 80091de:	f10a 0731 	add.w	r7, sl, #49	; 0x31
 80091e2:	9b08      	ldr	r3, [sp, #32]
 80091e4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80091e8:	701f      	strb	r7, [r3, #0]
 80091ea:	1c59      	adds	r1, r3, #1
 80091ec:	4645      	mov	r5, r8
 80091ee:	9107      	str	r1, [sp, #28]
 80091f0:	46e0      	mov	r8, ip
 80091f2:	f7ff bb7a 	b.w	80088ea <_dtoa_r+0x522>
 80091f6:	f8cd 9000 	str.w	r9, [sp]
 80091fa:	9d00      	ldr	r5, [sp, #0]
 80091fc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8009200:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8009202:	9507      	str	r5, [sp, #28]
 8009204:	462a      	mov	r2, r5
 8009206:	f7ff bac1 	b.w	800878c <_dtoa_r+0x3c4>
 800920a:	d102      	bne.n	8009212 <_dtoa_r+0xe4a>
 800920c:	07fb      	lsls	r3, r7, #31
 800920e:	f53f ad8e 	bmi.w	8008d2e <_dtoa_r+0x966>
 8009212:	465b      	mov	r3, fp
 8009214:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009218:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800921c:	2a30      	cmp	r2, #48	; 0x30
 800921e:	d0f8      	beq.n	8009212 <_dtoa_r+0xe4a>
 8009220:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	f7ff bb60 	b.w	80088ea <_dtoa_r+0x522>
 800922a:	2600      	movs	r6, #0
 800922c:	e542      	b.n	8008cb4 <_dtoa_r+0x8ec>
 800922e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009232:	4632      	mov	r2, r6
 8009234:	463b      	mov	r3, r7
 8009236:	f7f7 fce3 	bl	8000c00 <__aeabi_dcmpeq>
 800923a:	2800      	cmp	r0, #0
 800923c:	f43f af3e 	beq.w	80090bc <_dtoa_r+0xcf4>
 8009240:	f018 0f01 	tst.w	r8, #1
 8009244:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8009248:	f43f af3a 	beq.w	80090c0 <_dtoa_r+0xcf8>
 800924c:	f7ff ba91 	b.w	8008772 <_dtoa_r+0x3aa>
 8009250:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009254:	4620      	mov	r0, r4
 8009256:	f001 f865 	bl	800a324 <_Balloc>
 800925a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800925e:	1c9a      	adds	r2, r3, #2
 8009260:	4605      	mov	r5, r0
 8009262:	0092      	lsls	r2, r2, #2
 8009264:	f108 010c 	add.w	r1, r8, #12
 8009268:	300c      	adds	r0, #12
 800926a:	f7f7 f80f 	bl	800028c <memcpy>
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	2201      	movs	r2, #1
 8009274:	f001 fa22 	bl	800a6bc <__lshift>
 8009278:	4684      	mov	ip, r0
 800927a:	e692      	b.n	8008fa2 <_dtoa_r+0xbda>
 800927c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800927e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009280:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009282:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009286:	f7ff bb97 	b.w	80089b8 <_dtoa_r+0x5f0>
 800928a:	960b      	str	r6, [sp, #44]	; 0x2c
 800928c:	463e      	mov	r6, r7
 800928e:	9f05      	ldr	r7, [sp, #20]
 8009290:	2f39      	cmp	r7, #57	; 0x39
 8009292:	46cc      	mov	ip, r9
 8009294:	d011      	beq.n	80092ba <_dtoa_r+0xef2>
 8009296:	9908      	ldr	r1, [sp, #32]
 8009298:	9d08      	ldr	r5, [sp, #32]
 800929a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800929e:	3701      	adds	r7, #1
 80092a0:	3101      	adds	r1, #1
 80092a2:	702f      	strb	r7, [r5, #0]
 80092a4:	9107      	str	r1, [sp, #28]
 80092a6:	4645      	mov	r5, r8
 80092a8:	46e0      	mov	r8, ip
 80092aa:	f7ff bb1e 	b.w	80088ea <_dtoa_r+0x522>
 80092ae:	960b      	str	r6, [sp, #44]	; 0x2c
 80092b0:	4645      	mov	r5, r8
 80092b2:	463e      	mov	r6, r7
 80092b4:	46c8      	mov	r8, r9
 80092b6:	9f05      	ldr	r7, [sp, #20]
 80092b8:	e52d      	b.n	8008d16 <_dtoa_r+0x94e>
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	9907      	ldr	r1, [sp, #28]
 80092be:	2239      	movs	r2, #57	; 0x39
 80092c0:	4645      	mov	r5, r8
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	46e0      	mov	r8, ip
 80092c6:	f103 0b01 	add.w	fp, r3, #1
 80092ca:	e53a      	b.n	8008d42 <_dtoa_r+0x97a>
 80092cc:	960b      	str	r6, [sp, #44]	; 0x2c
 80092ce:	463e      	mov	r6, r7
 80092d0:	9f05      	ldr	r7, [sp, #20]
 80092d2:	2f39      	cmp	r7, #57	; 0x39
 80092d4:	46cc      	mov	ip, r9
 80092d6:	d0f0      	beq.n	80092ba <_dtoa_r+0xef2>
 80092d8:	f1bb 0f00 	cmp.w	fp, #0
 80092dc:	f73f af7f 	bgt.w	80091de <_dtoa_r+0xe16>
 80092e0:	e77f      	b.n	80091e2 <_dtoa_r+0xe1a>
 80092e2:	f47f af7e 	bne.w	80091e2 <_dtoa_r+0xe1a>
 80092e6:	07fa      	lsls	r2, r7, #31
 80092e8:	f57f af7b 	bpl.w	80091e2 <_dtoa_r+0xe1a>
 80092ec:	e775      	b.n	80091da <_dtoa_r+0xe12>
 80092ee:	f04f 0802 	mov.w	r8, #2
 80092f2:	f7ff bbd9 	b.w	8008aa8 <_dtoa_r+0x6e0>
 80092f6:	9e00      	ldr	r6, [sp, #0]
 80092f8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80092fc:	9607      	str	r6, [sp, #28]
 80092fe:	4632      	mov	r2, r6
 8009300:	f7ff ba44 	b.w	800878c <_dtoa_r+0x3c4>
 8009304:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009306:	9509      	str	r5, [sp, #36]	; 0x24
 8009308:	f7ff bad2 	b.w	80088b0 <_dtoa_r+0x4e8>
 800930c:	f43f aaae 	beq.w	800886c <_dtoa_r+0x4a4>
 8009310:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8009314:	e521      	b.n	8008d5a <_dtoa_r+0x992>
 8009316:	bf00      	nop

08009318 <__sflush_r>:
 8009318:	898b      	ldrh	r3, [r1, #12]
 800931a:	b29a      	uxth	r2, r3
 800931c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009320:	460d      	mov	r5, r1
 8009322:	0711      	lsls	r1, r2, #28
 8009324:	4680      	mov	r8, r0
 8009326:	d43c      	bmi.n	80093a2 <__sflush_r+0x8a>
 8009328:	686a      	ldr	r2, [r5, #4]
 800932a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800932e:	2a00      	cmp	r2, #0
 8009330:	81ab      	strh	r3, [r5, #12]
 8009332:	dd5a      	ble.n	80093ea <__sflush_r+0xd2>
 8009334:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8009336:	2c00      	cmp	r4, #0
 8009338:	d04c      	beq.n	80093d4 <__sflush_r+0xbc>
 800933a:	b29b      	uxth	r3, r3
 800933c:	f403 5680 	and.w	r6, r3, #4096	; 0x1000
 8009340:	2200      	movs	r2, #0
 8009342:	b2b6      	uxth	r6, r6
 8009344:	f8d8 7000 	ldr.w	r7, [r8]
 8009348:	f8c8 2000 	str.w	r2, [r8]
 800934c:	2e00      	cmp	r6, #0
 800934e:	d050      	beq.n	80093f2 <__sflush_r+0xda>
 8009350:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009352:	075e      	lsls	r6, r3, #29
 8009354:	d505      	bpl.n	8009362 <__sflush_r+0x4a>
 8009356:	6869      	ldr	r1, [r5, #4]
 8009358:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800935a:	1a52      	subs	r2, r2, r1
 800935c:	b10b      	cbz	r3, 8009362 <__sflush_r+0x4a>
 800935e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009360:	1ad2      	subs	r2, r2, r3
 8009362:	4640      	mov	r0, r8
 8009364:	69e9      	ldr	r1, [r5, #28]
 8009366:	2300      	movs	r3, #0
 8009368:	47a0      	blx	r4
 800936a:	1c44      	adds	r4, r0, #1
 800936c:	d04c      	beq.n	8009408 <__sflush_r+0xf0>
 800936e:	89ab      	ldrh	r3, [r5, #12]
 8009370:	692a      	ldr	r2, [r5, #16]
 8009372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009376:	b29b      	uxth	r3, r3
 8009378:	2100      	movs	r1, #0
 800937a:	602a      	str	r2, [r5, #0]
 800937c:	04da      	lsls	r2, r3, #19
 800937e:	81ab      	strh	r3, [r5, #12]
 8009380:	6069      	str	r1, [r5, #4]
 8009382:	d44e      	bmi.n	8009422 <__sflush_r+0x10a>
 8009384:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009386:	f8c8 7000 	str.w	r7, [r8]
 800938a:	b319      	cbz	r1, 80093d4 <__sflush_r+0xbc>
 800938c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8009390:	4299      	cmp	r1, r3
 8009392:	d002      	beq.n	800939a <__sflush_r+0x82>
 8009394:	4640      	mov	r0, r8
 8009396:	f000 f95b 	bl	8009650 <_free_r>
 800939a:	2000      	movs	r0, #0
 800939c:	6328      	str	r0, [r5, #48]	; 0x30
 800939e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a2:	692e      	ldr	r6, [r5, #16]
 80093a4:	b1b6      	cbz	r6, 80093d4 <__sflush_r+0xbc>
 80093a6:	0791      	lsls	r1, r2, #30
 80093a8:	682c      	ldr	r4, [r5, #0]
 80093aa:	bf08      	it	eq
 80093ac:	696b      	ldreq	r3, [r5, #20]
 80093ae:	602e      	str	r6, [r5, #0]
 80093b0:	bf18      	it	ne
 80093b2:	2300      	movne	r3, #0
 80093b4:	1ba4      	subs	r4, r4, r6
 80093b6:	60ab      	str	r3, [r5, #8]
 80093b8:	e00a      	b.n	80093d0 <__sflush_r+0xb8>
 80093ba:	4632      	mov	r2, r6
 80093bc:	4623      	mov	r3, r4
 80093be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80093c0:	69e9      	ldr	r1, [r5, #28]
 80093c2:	4640      	mov	r0, r8
 80093c4:	47b8      	blx	r7
 80093c6:	2800      	cmp	r0, #0
 80093c8:	ebc0 0404 	rsb	r4, r0, r4
 80093cc:	4406      	add	r6, r0
 80093ce:	dd04      	ble.n	80093da <__sflush_r+0xc2>
 80093d0:	2c00      	cmp	r4, #0
 80093d2:	dcf2      	bgt.n	80093ba <__sflush_r+0xa2>
 80093d4:	2000      	movs	r0, #0
 80093d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093da:	89ab      	ldrh	r3, [r5, #12]
 80093dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e0:	81ab      	strh	r3, [r5, #12]
 80093e2:	f04f 30ff 	mov.w	r0, #4294967295
 80093e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80093ec:	2a00      	cmp	r2, #0
 80093ee:	dca1      	bgt.n	8009334 <__sflush_r+0x1c>
 80093f0:	e7f0      	b.n	80093d4 <__sflush_r+0xbc>
 80093f2:	4632      	mov	r2, r6
 80093f4:	2301      	movs	r3, #1
 80093f6:	4640      	mov	r0, r8
 80093f8:	69e9      	ldr	r1, [r5, #28]
 80093fa:	47a0      	blx	r4
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	4602      	mov	r2, r0
 8009400:	d01e      	beq.n	8009440 <__sflush_r+0x128>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8009406:	e7a4      	b.n	8009352 <__sflush_r+0x3a>
 8009408:	f8d8 3000 	ldr.w	r3, [r8]
 800940c:	b95b      	cbnz	r3, 8009426 <__sflush_r+0x10e>
 800940e:	89a9      	ldrh	r1, [r5, #12]
 8009410:	606b      	str	r3, [r5, #4]
 8009412:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8009416:	b29b      	uxth	r3, r3
 8009418:	692a      	ldr	r2, [r5, #16]
 800941a:	81ab      	strh	r3, [r5, #12]
 800941c:	04db      	lsls	r3, r3, #19
 800941e:	602a      	str	r2, [r5, #0]
 8009420:	d5b0      	bpl.n	8009384 <__sflush_r+0x6c>
 8009422:	6528      	str	r0, [r5, #80]	; 0x50
 8009424:	e7ae      	b.n	8009384 <__sflush_r+0x6c>
 8009426:	2b1d      	cmp	r3, #29
 8009428:	d001      	beq.n	800942e <__sflush_r+0x116>
 800942a:	2b16      	cmp	r3, #22
 800942c:	d11b      	bne.n	8009466 <__sflush_r+0x14e>
 800942e:	89a9      	ldrh	r1, [r5, #12]
 8009430:	692b      	ldr	r3, [r5, #16]
 8009432:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8009436:	2200      	movs	r2, #0
 8009438:	81a9      	strh	r1, [r5, #12]
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	606a      	str	r2, [r5, #4]
 800943e:	e7a1      	b.n	8009384 <__sflush_r+0x6c>
 8009440:	f8d8 3000 	ldr.w	r3, [r8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0dc      	beq.n	8009402 <__sflush_r+0xea>
 8009448:	2b1d      	cmp	r3, #29
 800944a:	bf18      	it	ne
 800944c:	2b16      	cmpne	r3, #22
 800944e:	bf15      	itete	ne
 8009450:	89ab      	ldrhne	r3, [r5, #12]
 8009452:	f8c8 7000 	streq.w	r7, [r8]
 8009456:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800945a:	4630      	moveq	r0, r6
 800945c:	bf1c      	itt	ne
 800945e:	81ab      	strhne	r3, [r5, #12]
 8009460:	4610      	movne	r0, r2
 8009462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800946c:	81ab      	strh	r3, [r5, #12]
 800946e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009472:	bf00      	nop

08009474 <_fflush_r>:
 8009474:	b510      	push	{r4, lr}
 8009476:	4604      	mov	r4, r0
 8009478:	b082      	sub	sp, #8
 800947a:	b108      	cbz	r0, 8009480 <_fflush_r+0xc>
 800947c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800947e:	b153      	cbz	r3, 8009496 <_fflush_r+0x22>
 8009480:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8009484:	b908      	cbnz	r0, 800948a <_fflush_r+0x16>
 8009486:	b002      	add	sp, #8
 8009488:	bd10      	pop	{r4, pc}
 800948a:	4620      	mov	r0, r4
 800948c:	b002      	add	sp, #8
 800948e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009492:	f7ff bf41 	b.w	8009318 <__sflush_r>
 8009496:	9101      	str	r1, [sp, #4]
 8009498:	f000 f808 	bl	80094ac <__sinit>
 800949c:	9901      	ldr	r1, [sp, #4]
 800949e:	e7ef      	b.n	8009480 <_fflush_r+0xc>

080094a0 <_cleanup_r>:
 80094a0:	f24b 0171 	movw	r1, #45169	; 0xb071
 80094a4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80094a8:	f000 bb2a 	b.w	8009b00 <_fwalk>

080094ac <__sinit>:
 80094ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80094b2:	b083      	sub	sp, #12
 80094b4:	4607      	mov	r7, r0
 80094b6:	2c00      	cmp	r4, #0
 80094b8:	d170      	bne.n	800959c <__sinit+0xf0>
 80094ba:	6845      	ldr	r5, [r0, #4]
 80094bc:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80094c0:	f249 43a1 	movw	r3, #38049	; 0x94a1
 80094c4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80094c8:	2003      	movs	r0, #3
 80094ca:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 80094ce:	2204      	movs	r2, #4
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d2:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
 80094d6:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 80094da:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80094de:	81aa      	strh	r2, [r5, #12]
 80094e0:	602c      	str	r4, [r5, #0]
 80094e2:	606c      	str	r4, [r5, #4]
 80094e4:	60ac      	str	r4, [r5, #8]
 80094e6:	666c      	str	r4, [r5, #100]	; 0x64
 80094e8:	81ec      	strh	r4, [r5, #14]
 80094ea:	612c      	str	r4, [r5, #16]
 80094ec:	616c      	str	r4, [r5, #20]
 80094ee:	61ac      	str	r4, [r5, #24]
 80094f0:	4621      	mov	r1, r4
 80094f2:	2208      	movs	r2, #8
 80094f4:	f7fc ffc8 	bl	8006488 <memset>
 80094f8:	f64a 5bd1 	movw	fp, #44497	; 0xadd1
 80094fc:	68be      	ldr	r6, [r7, #8]
 80094fe:	61ed      	str	r5, [r5, #28]
 8009500:	f64a 5af5 	movw	sl, #44533	; 0xadf5
 8009504:	f64a 692d 	movw	r9, #44589	; 0xae2d
 8009508:	f64a 684d 	movw	r8, #44621	; 0xae4d
 800950c:	2301      	movs	r3, #1
 800950e:	f6c0 0b00 	movt	fp, #2048	; 0x800
 8009512:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8009516:	f6c0 0900 	movt	r9, #2048	; 0x800
 800951a:	f6c0 0800 	movt	r8, #2048	; 0x800
 800951e:	2209      	movs	r2, #9
 8009520:	f8c5 b020 	str.w	fp, [r5, #32]
 8009524:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8009528:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800952c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8009530:	4621      	mov	r1, r4
 8009532:	81f3      	strh	r3, [r6, #14]
 8009534:	81b2      	strh	r2, [r6, #12]
 8009536:	6034      	str	r4, [r6, #0]
 8009538:	6074      	str	r4, [r6, #4]
 800953a:	60b4      	str	r4, [r6, #8]
 800953c:	6674      	str	r4, [r6, #100]	; 0x64
 800953e:	6134      	str	r4, [r6, #16]
 8009540:	6174      	str	r4, [r6, #20]
 8009542:	61b4      	str	r4, [r6, #24]
 8009544:	2208      	movs	r2, #8
 8009546:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	f7fc ff9c 	bl	8006488 <memset>
 8009550:	68fd      	ldr	r5, [r7, #12]
 8009552:	f8c6 b020 	str.w	fp, [r6, #32]
 8009556:	2012      	movs	r0, #18
 8009558:	2202      	movs	r2, #2
 800955a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800955e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8009562:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8009566:	61f6      	str	r6, [r6, #28]
 8009568:	4621      	mov	r1, r4
 800956a:	81a8      	strh	r0, [r5, #12]
 800956c:	81ea      	strh	r2, [r5, #14]
 800956e:	602c      	str	r4, [r5, #0]
 8009570:	606c      	str	r4, [r5, #4]
 8009572:	60ac      	str	r4, [r5, #8]
 8009574:	666c      	str	r4, [r5, #100]	; 0x64
 8009576:	612c      	str	r4, [r5, #16]
 8009578:	616c      	str	r4, [r5, #20]
 800957a:	61ac      	str	r4, [r5, #24]
 800957c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009580:	2208      	movs	r2, #8
 8009582:	f7fc ff81 	bl	8006488 <memset>
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	f8c5 b020 	str.w	fp, [r5, #32]
 800958c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8009590:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8009594:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8009598:	61ed      	str	r5, [r5, #28]
 800959a:	63bb      	str	r3, [r7, #56]	; 0x38
 800959c:	b003      	add	sp, #12
 800959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a2:	bf00      	nop

080095a4 <__sfp_lock_acquire>:
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop

080095a8 <__sfp_lock_release>:
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <_malloc_trim_r>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	f240 6488 	movw	r4, #1672	; 0x688
 80095b2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80095b6:	460f      	mov	r7, r1
 80095b8:	4605      	mov	r5, r0
 80095ba:	f000 feaf 	bl	800a31c <__malloc_lock>
 80095be:	68a3      	ldr	r3, [r4, #8]
 80095c0:	685e      	ldr	r6, [r3, #4]
 80095c2:	f026 0603 	bic.w	r6, r6, #3
 80095c6:	1bf7      	subs	r7, r6, r7
 80095c8:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 80095cc:	0b3f      	lsrs	r7, r7, #12
 80095ce:	3f01      	subs	r7, #1
 80095d0:	033f      	lsls	r7, r7, #12
 80095d2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80095d6:	db07      	blt.n	80095e8 <_malloc_trim_r+0x3c>
 80095d8:	4628      	mov	r0, r5
 80095da:	2100      	movs	r1, #0
 80095dc:	f7f8 fb4e 	bl	8001c7c <_sbrk_r>
 80095e0:	68a3      	ldr	r3, [r4, #8]
 80095e2:	4433      	add	r3, r6
 80095e4:	4298      	cmp	r0, r3
 80095e6:	d004      	beq.n	80095f2 <_malloc_trim_r+0x46>
 80095e8:	4628      	mov	r0, r5
 80095ea:	f000 fe99 	bl	800a320 <__malloc_unlock>
 80095ee:	2000      	movs	r0, #0
 80095f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f2:	4628      	mov	r0, r5
 80095f4:	4279      	negs	r1, r7
 80095f6:	f7f8 fb41 	bl	8001c7c <_sbrk_r>
 80095fa:	3001      	adds	r0, #1
 80095fc:	d010      	beq.n	8009620 <_malloc_trim_r+0x74>
 80095fe:	f640 63d4 	movw	r3, #3796	; 0xed4
 8009602:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009606:	68a1      	ldr	r1, [r4, #8]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	1bf6      	subs	r6, r6, r7
 800960c:	f046 0601 	orr.w	r6, r6, #1
 8009610:	4628      	mov	r0, r5
 8009612:	1bd7      	subs	r7, r2, r7
 8009614:	604e      	str	r6, [r1, #4]
 8009616:	601f      	str	r7, [r3, #0]
 8009618:	f000 fe82 	bl	800a320 <__malloc_unlock>
 800961c:	2001      	movs	r0, #1
 800961e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009620:	4628      	mov	r0, r5
 8009622:	2100      	movs	r1, #0
 8009624:	f7f8 fb2a 	bl	8001c7c <_sbrk_r>
 8009628:	68a3      	ldr	r3, [r4, #8]
 800962a:	1ac2      	subs	r2, r0, r3
 800962c:	2a0f      	cmp	r2, #15
 800962e:	dddb      	ble.n	80095e8 <_malloc_trim_r+0x3c>
 8009630:	f640 2494 	movw	r4, #2708	; 0xa94
 8009634:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009638:	f640 61d4 	movw	r1, #3796	; 0xed4
 800963c:	6824      	ldr	r4, [r4, #0]
 800963e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009642:	f042 0201 	orr.w	r2, r2, #1
 8009646:	1b00      	subs	r0, r0, r4
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	6008      	str	r0, [r1, #0]
 800964c:	e7cc      	b.n	80095e8 <_malloc_trim_r+0x3c>
 800964e:	bf00      	nop

08009650 <_free_r>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	460e      	mov	r6, r1
 8009656:	4681      	mov	r9, r0
 8009658:	2900      	cmp	r1, #0
 800965a:	d060      	beq.n	800971e <_free_r+0xce>
 800965c:	f000 fe5e 	bl	800a31c <__malloc_lock>
 8009660:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8009664:	f1a6 0408 	sub.w	r4, r6, #8
 8009668:	f021 0301 	bic.w	r3, r1, #1
 800966c:	18e2      	adds	r2, r4, r3
 800966e:	f240 6588 	movw	r5, #1672	; 0x688
 8009672:	6857      	ldr	r7, [r2, #4]
 8009674:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8009678:	f027 0003 	bic.w	r0, r7, #3
 800967c:	68af      	ldr	r7, [r5, #8]
 800967e:	4297      	cmp	r7, r2
 8009680:	d063      	beq.n	800974a <_free_r+0xfa>
 8009682:	f011 0c01 	ands.w	ip, r1, #1
 8009686:	6050      	str	r0, [r2, #4]
 8009688:	bf18      	it	ne
 800968a:	2100      	movne	r1, #0
 800968c:	d111      	bne.n	80096b2 <_free_r+0x62>
 800968e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8009692:	1a64      	subs	r4, r4, r1
 8009694:	f105 0808 	add.w	r8, r5, #8
 8009698:	68a6      	ldr	r6, [r4, #8]
 800969a:	4546      	cmp	r6, r8
 800969c:	bf18      	it	ne
 800969e:	f8d4 800c 	ldrne.w	r8, [r4, #12]
 80096a2:	440b      	add	r3, r1
 80096a4:	bf1d      	ittte	ne
 80096a6:	f8c6 800c 	strne.w	r8, [r6, #12]
 80096aa:	4661      	movne	r1, ip
 80096ac:	f8c8 6008 	strne.w	r6, [r8, #8]
 80096b0:	2101      	moveq	r1, #1
 80096b2:	1816      	adds	r6, r2, r0
 80096b4:	6876      	ldr	r6, [r6, #4]
 80096b6:	07f6      	lsls	r6, r6, #31
 80096b8:	d408      	bmi.n	80096cc <_free_r+0x7c>
 80096ba:	4403      	add	r3, r0
 80096bc:	6890      	ldr	r0, [r2, #8]
 80096be:	b911      	cbnz	r1, 80096c6 <_free_r+0x76>
 80096c0:	4e49      	ldr	r6, [pc, #292]	; (80097e8 <_free_r+0x198>)
 80096c2:	42b0      	cmp	r0, r6
 80096c4:	d060      	beq.n	8009788 <_free_r+0x138>
 80096c6:	68d2      	ldr	r2, [r2, #12]
 80096c8:	60c2      	str	r2, [r0, #12]
 80096ca:	6090      	str	r0, [r2, #8]
 80096cc:	f043 0201 	orr.w	r2, r3, #1
 80096d0:	6062      	str	r2, [r4, #4]
 80096d2:	50e3      	str	r3, [r4, r3]
 80096d4:	b9f1      	cbnz	r1, 8009714 <_free_r+0xc4>
 80096d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096da:	d322      	bcc.n	8009722 <_free_r+0xd2>
 80096dc:	0a5a      	lsrs	r2, r3, #9
 80096de:	2a04      	cmp	r2, #4
 80096e0:	d85b      	bhi.n	800979a <_free_r+0x14a>
 80096e2:	0998      	lsrs	r0, r3, #6
 80096e4:	3038      	adds	r0, #56	; 0x38
 80096e6:	0041      	lsls	r1, r0, #1
 80096e8:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80096ec:	f240 6188 	movw	r1, #1672	; 0x688
 80096f0:	68aa      	ldr	r2, [r5, #8]
 80096f2:	42aa      	cmp	r2, r5
 80096f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80096f8:	d05b      	beq.n	80097b2 <_free_r+0x162>
 80096fa:	6851      	ldr	r1, [r2, #4]
 80096fc:	f021 0103 	bic.w	r1, r1, #3
 8009700:	428b      	cmp	r3, r1
 8009702:	d202      	bcs.n	800970a <_free_r+0xba>
 8009704:	6892      	ldr	r2, [r2, #8]
 8009706:	4295      	cmp	r5, r2
 8009708:	d1f7      	bne.n	80096fa <_free_r+0xaa>
 800970a:	68d3      	ldr	r3, [r2, #12]
 800970c:	60e3      	str	r3, [r4, #12]
 800970e:	60a2      	str	r2, [r4, #8]
 8009710:	609c      	str	r4, [r3, #8]
 8009712:	60d4      	str	r4, [r2, #12]
 8009714:	4648      	mov	r0, r9
 8009716:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800971a:	f000 be01 	b.w	800a320 <__malloc_unlock>
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	08db      	lsrs	r3, r3, #3
 8009724:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8009728:	6868      	ldr	r0, [r5, #4]
 800972a:	6891      	ldr	r1, [r2, #8]
 800972c:	60e2      	str	r2, [r4, #12]
 800972e:	2601      	movs	r6, #1
 8009730:	109b      	asrs	r3, r3, #2
 8009732:	fa06 f303 	lsl.w	r3, r6, r3
 8009736:	4318      	orrs	r0, r3
 8009738:	60a1      	str	r1, [r4, #8]
 800973a:	6068      	str	r0, [r5, #4]
 800973c:	6094      	str	r4, [r2, #8]
 800973e:	4648      	mov	r0, r9
 8009740:	60cc      	str	r4, [r1, #12]
 8009742:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009746:	f000 bdeb 	b.w	800a320 <__malloc_unlock>
 800974a:	07cf      	lsls	r7, r1, #31
 800974c:	4418      	add	r0, r3
 800974e:	d407      	bmi.n	8009760 <_free_r+0x110>
 8009750:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009754:	1ae4      	subs	r4, r4, r3
 8009756:	4418      	add	r0, r3
 8009758:	68a2      	ldr	r2, [r4, #8]
 800975a:	68e3      	ldr	r3, [r4, #12]
 800975c:	60d3      	str	r3, [r2, #12]
 800975e:	609a      	str	r2, [r3, #8]
 8009760:	f640 2290 	movw	r2, #2704	; 0xa90
 8009764:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009768:	f040 0101 	orr.w	r1, r0, #1
 800976c:	6813      	ldr	r3, [r2, #0]
 800976e:	6061      	str	r1, [r4, #4]
 8009770:	4298      	cmp	r0, r3
 8009772:	60ac      	str	r4, [r5, #8]
 8009774:	d3ce      	bcc.n	8009714 <_free_r+0xc4>
 8009776:	f640 63d0 	movw	r3, #3792	; 0xed0
 800977a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800977e:	4648      	mov	r0, r9
 8009780:	6819      	ldr	r1, [r3, #0]
 8009782:	f7ff ff13 	bl	80095ac <_malloc_trim_r>
 8009786:	e7c5      	b.n	8009714 <_free_r+0xc4>
 8009788:	f043 0201 	orr.w	r2, r3, #1
 800978c:	616c      	str	r4, [r5, #20]
 800978e:	612c      	str	r4, [r5, #16]
 8009790:	60e0      	str	r0, [r4, #12]
 8009792:	60a0      	str	r0, [r4, #8]
 8009794:	6062      	str	r2, [r4, #4]
 8009796:	50e3      	str	r3, [r4, r3]
 8009798:	e7bc      	b.n	8009714 <_free_r+0xc4>
 800979a:	2a14      	cmp	r2, #20
 800979c:	bf9c      	itt	ls
 800979e:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 80097a2:	0041      	lslls	r1, r0, #1
 80097a4:	d9a0      	bls.n	80096e8 <_free_r+0x98>
 80097a6:	2a54      	cmp	r2, #84	; 0x54
 80097a8:	d80c      	bhi.n	80097c4 <_free_r+0x174>
 80097aa:	0b18      	lsrs	r0, r3, #12
 80097ac:	306e      	adds	r0, #110	; 0x6e
 80097ae:	0041      	lsls	r1, r0, #1
 80097b0:	e79a      	b.n	80096e8 <_free_r+0x98>
 80097b2:	684b      	ldr	r3, [r1, #4]
 80097b4:	1080      	asrs	r0, r0, #2
 80097b6:	2501      	movs	r5, #1
 80097b8:	fa05 f000 	lsl.w	r0, r5, r0
 80097bc:	4303      	orrs	r3, r0
 80097be:	604b      	str	r3, [r1, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	e7a3      	b.n	800970c <_free_r+0xbc>
 80097c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80097c8:	d803      	bhi.n	80097d2 <_free_r+0x182>
 80097ca:	0bd8      	lsrs	r0, r3, #15
 80097cc:	3077      	adds	r0, #119	; 0x77
 80097ce:	0041      	lsls	r1, r0, #1
 80097d0:	e78a      	b.n	80096e8 <_free_r+0x98>
 80097d2:	f240 5154 	movw	r1, #1364	; 0x554
 80097d6:	428a      	cmp	r2, r1
 80097d8:	bf9d      	ittte	ls
 80097da:	0c98      	lsrls	r0, r3, #18
 80097dc:	307c      	addls	r0, #124	; 0x7c
 80097de:	0041      	lslls	r1, r0, #1
 80097e0:	21fc      	movhi	r1, #252	; 0xfc
 80097e2:	bf88      	it	hi
 80097e4:	207e      	movhi	r0, #126	; 0x7e
 80097e6:	e77f      	b.n	80096e8 <_free_r+0x98>
 80097e8:	20000690 	.word	0x20000690

080097ec <__sfvwrite_r>:
 80097ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f0:	6893      	ldr	r3, [r2, #8]
 80097f2:	b083      	sub	sp, #12
 80097f4:	4616      	mov	r6, r2
 80097f6:	4681      	mov	r9, r0
 80097f8:	460c      	mov	r4, r1
 80097fa:	b33b      	cbz	r3, 800984c <__sfvwrite_r+0x60>
 80097fc:	898b      	ldrh	r3, [r1, #12]
 80097fe:	0719      	lsls	r1, r3, #28
 8009800:	d528      	bpl.n	8009854 <__sfvwrite_r+0x68>
 8009802:	6922      	ldr	r2, [r4, #16]
 8009804:	b332      	cbz	r2, 8009854 <__sfvwrite_r+0x68>
 8009806:	f003 0202 	and.w	r2, r3, #2
 800980a:	b292      	uxth	r2, r2
 800980c:	6835      	ldr	r5, [r6, #0]
 800980e:	2a00      	cmp	r2, #0
 8009810:	d02e      	beq.n	8009870 <__sfvwrite_r+0x84>
 8009812:	f04f 0a00 	mov.w	sl, #0
 8009816:	f44f 4b7c 	mov.w	fp, #64512	; 0xfc00
 800981a:	46d0      	mov	r8, sl
 800981c:	f6c7 7bff 	movt	fp, #32767	; 0x7fff
 8009820:	45d8      	cmp	r8, fp
 8009822:	bf34      	ite	cc
 8009824:	4643      	movcc	r3, r8
 8009826:	465b      	movcs	r3, fp
 8009828:	4652      	mov	r2, sl
 800982a:	4648      	mov	r0, r9
 800982c:	f1b8 0f00 	cmp.w	r8, #0
 8009830:	d04f      	beq.n	80098d2 <__sfvwrite_r+0xe6>
 8009832:	69e1      	ldr	r1, [r4, #28]
 8009834:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8009836:	47b8      	blx	r7
 8009838:	2800      	cmp	r0, #0
 800983a:	dd56      	ble.n	80098ea <__sfvwrite_r+0xfe>
 800983c:	68b3      	ldr	r3, [r6, #8]
 800983e:	1a1b      	subs	r3, r3, r0
 8009840:	4482      	add	sl, r0
 8009842:	ebc0 0808 	rsb	r8, r0, r8
 8009846:	60b3      	str	r3, [r6, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e9      	bne.n	8009820 <__sfvwrite_r+0x34>
 800984c:	2000      	movs	r0, #0
 800984e:	b003      	add	sp, #12
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	4648      	mov	r0, r9
 8009856:	4621      	mov	r1, r4
 8009858:	f7fe fc58 	bl	800810c <__swsetup_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	f040 8147 	bne.w	8009af0 <__sfvwrite_r+0x304>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	6835      	ldr	r5, [r6, #0]
 8009866:	f003 0202 	and.w	r2, r3, #2
 800986a:	b292      	uxth	r2, r2
 800986c:	2a00      	cmp	r2, #0
 800986e:	d1d0      	bne.n	8009812 <__sfvwrite_r+0x26>
 8009870:	f013 0a01 	ands.w	sl, r3, #1
 8009874:	d142      	bne.n	80098fc <__sfvwrite_r+0x110>
 8009876:	46d0      	mov	r8, sl
 8009878:	f1b8 0f00 	cmp.w	r8, #0
 800987c:	d023      	beq.n	80098c6 <__sfvwrite_r+0xda>
 800987e:	059a      	lsls	r2, r3, #22
 8009880:	68a7      	ldr	r7, [r4, #8]
 8009882:	d576      	bpl.n	8009972 <__sfvwrite_r+0x186>
 8009884:	45b8      	cmp	r8, r7
 8009886:	f0c0 80a4 	bcc.w	80099d2 <__sfvwrite_r+0x1e6>
 800988a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800988e:	f040 80b2 	bne.w	80099f6 <__sfvwrite_r+0x20a>
 8009892:	6820      	ldr	r0, [r4, #0]
 8009894:	46bb      	mov	fp, r7
 8009896:	4651      	mov	r1, sl
 8009898:	465a      	mov	r2, fp
 800989a:	f000 fcdd 	bl	800a258 <memmove>
 800989e:	68a2      	ldr	r2, [r4, #8]
 80098a0:	6821      	ldr	r1, [r4, #0]
 80098a2:	1bd2      	subs	r2, r2, r7
 80098a4:	eb01 030b 	add.w	r3, r1, fp
 80098a8:	60a2      	str	r2, [r4, #8]
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	4642      	mov	r2, r8
 80098ae:	68b3      	ldr	r3, [r6, #8]
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	4492      	add	sl, r2
 80098b4:	ebc2 0808 	rsb	r8, r2, r8
 80098b8:	60b3      	str	r3, [r6, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c6      	beq.n	800984c <__sfvwrite_r+0x60>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	d1db      	bne.n	800987e <__sfvwrite_r+0x92>
 80098c6:	f8d5 a000 	ldr.w	sl, [r5]
 80098ca:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80098ce:	3508      	adds	r5, #8
 80098d0:	e7d2      	b.n	8009878 <__sfvwrite_r+0x8c>
 80098d2:	f8d5 a000 	ldr.w	sl, [r5]
 80098d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80098da:	3508      	adds	r5, #8
 80098dc:	e7a0      	b.n	8009820 <__sfvwrite_r+0x34>
 80098de:	4648      	mov	r0, r9
 80098e0:	4621      	mov	r1, r4
 80098e2:	f7ff fdc7 	bl	8009474 <_fflush_r>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d059      	beq.n	800999e <__sfvwrite_r+0x1b2>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	b003      	add	sp, #12
 80098f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fc:	4692      	mov	sl, r2
 80098fe:	9201      	str	r2, [sp, #4]
 8009900:	4693      	mov	fp, r2
 8009902:	4690      	mov	r8, r2
 8009904:	f1b8 0f00 	cmp.w	r8, #0
 8009908:	d02b      	beq.n	8009962 <__sfvwrite_r+0x176>
 800990a:	9f01      	ldr	r7, [sp, #4]
 800990c:	2f00      	cmp	r7, #0
 800990e:	d064      	beq.n	80099da <__sfvwrite_r+0x1ee>
 8009910:	6820      	ldr	r0, [r4, #0]
 8009912:	6921      	ldr	r1, [r4, #16]
 8009914:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009918:	6962      	ldr	r2, [r4, #20]
 800991a:	45c2      	cmp	sl, r8
 800991c:	bf34      	ite	cc
 800991e:	4653      	movcc	r3, sl
 8009920:	4643      	movcs	r3, r8
 8009922:	4288      	cmp	r0, r1
 8009924:	461f      	mov	r7, r3
 8009926:	d903      	bls.n	8009930 <__sfvwrite_r+0x144>
 8009928:	4494      	add	ip, r2
 800992a:	4563      	cmp	r3, ip
 800992c:	f300 80ae 	bgt.w	8009a8c <__sfvwrite_r+0x2a0>
 8009930:	4293      	cmp	r3, r2
 8009932:	db36      	blt.n	80099a2 <__sfvwrite_r+0x1b6>
 8009934:	4613      	mov	r3, r2
 8009936:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8009938:	69e1      	ldr	r1, [r4, #28]
 800993a:	4648      	mov	r0, r9
 800993c:	465a      	mov	r2, fp
 800993e:	47b8      	blx	r7
 8009940:	1e07      	subs	r7, r0, #0
 8009942:	ddd2      	ble.n	80098ea <__sfvwrite_r+0xfe>
 8009944:	ebba 0a07 	subs.w	sl, sl, r7
 8009948:	d03a      	beq.n	80099c0 <__sfvwrite_r+0x1d4>
 800994a:	68b3      	ldr	r3, [r6, #8]
 800994c:	1bdb      	subs	r3, r3, r7
 800994e:	44bb      	add	fp, r7
 8009950:	ebc7 0808 	rsb	r8, r7, r8
 8009954:	60b3      	str	r3, [r6, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	f43f af78 	beq.w	800984c <__sfvwrite_r+0x60>
 800995c:	f1b8 0f00 	cmp.w	r8, #0
 8009960:	d1d3      	bne.n	800990a <__sfvwrite_r+0x11e>
 8009962:	2700      	movs	r7, #0
 8009964:	f8d5 b000 	ldr.w	fp, [r5]
 8009968:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800996c:	9701      	str	r7, [sp, #4]
 800996e:	3508      	adds	r5, #8
 8009970:	e7c8      	b.n	8009904 <__sfvwrite_r+0x118>
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	4298      	cmp	r0, r3
 8009978:	d802      	bhi.n	8009980 <__sfvwrite_r+0x194>
 800997a:	6963      	ldr	r3, [r4, #20]
 800997c:	4598      	cmp	r8, r3
 800997e:	d272      	bcs.n	8009a66 <__sfvwrite_r+0x27a>
 8009980:	45b8      	cmp	r8, r7
 8009982:	bf38      	it	cc
 8009984:	4647      	movcc	r7, r8
 8009986:	463a      	mov	r2, r7
 8009988:	4651      	mov	r1, sl
 800998a:	f000 fc65 	bl	800a258 <memmove>
 800998e:	68a3      	ldr	r3, [r4, #8]
 8009990:	6822      	ldr	r2, [r4, #0]
 8009992:	1bdb      	subs	r3, r3, r7
 8009994:	443a      	add	r2, r7
 8009996:	60a3      	str	r3, [r4, #8]
 8009998:	6022      	str	r2, [r4, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d09f      	beq.n	80098de <__sfvwrite_r+0xf2>
 800999e:	463a      	mov	r2, r7
 80099a0:	e785      	b.n	80098ae <__sfvwrite_r+0xc2>
 80099a2:	461a      	mov	r2, r3
 80099a4:	4659      	mov	r1, fp
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	f000 fc56 	bl	800a258 <memmove>
 80099ac:	9b00      	ldr	r3, [sp, #0]
 80099ae:	68a1      	ldr	r1, [r4, #8]
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	1ac9      	subs	r1, r1, r3
 80099b4:	ebba 0a07 	subs.w	sl, sl, r7
 80099b8:	4413      	add	r3, r2
 80099ba:	60a1      	str	r1, [r4, #8]
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	d1c4      	bne.n	800994a <__sfvwrite_r+0x15e>
 80099c0:	4648      	mov	r0, r9
 80099c2:	4621      	mov	r1, r4
 80099c4:	f7ff fd56 	bl	8009474 <_fflush_r>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d18e      	bne.n	80098ea <__sfvwrite_r+0xfe>
 80099cc:	f8cd a004 	str.w	sl, [sp, #4]
 80099d0:	e7bb      	b.n	800994a <__sfvwrite_r+0x15e>
 80099d2:	6820      	ldr	r0, [r4, #0]
 80099d4:	4647      	mov	r7, r8
 80099d6:	46c3      	mov	fp, r8
 80099d8:	e75d      	b.n	8009896 <__sfvwrite_r+0xaa>
 80099da:	4658      	mov	r0, fp
 80099dc:	210a      	movs	r1, #10
 80099de:	4642      	mov	r2, r8
 80099e0:	f000 fbf2 	bl	800a1c8 <memchr>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d07e      	beq.n	8009ae6 <__sfvwrite_r+0x2fa>
 80099e8:	f100 0a01 	add.w	sl, r0, #1
 80099ec:	2701      	movs	r7, #1
 80099ee:	ebcb 0a0a 	rsb	sl, fp, sl
 80099f2:	9701      	str	r7, [sp, #4]
 80099f4:	e78c      	b.n	8009910 <__sfvwrite_r+0x124>
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	6921      	ldr	r1, [r4, #16]
 80099fa:	6967      	ldr	r7, [r4, #20]
 80099fc:	ebc1 0c02 	rsb	ip, r1, r2
 8009a00:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8009a04:	f10c 0201 	add.w	r2, ip, #1
 8009a08:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8009a0c:	4442      	add	r2, r8
 8009a0e:	107f      	asrs	r7, r7, #1
 8009a10:	4297      	cmp	r7, r2
 8009a12:	bf34      	ite	cc
 8009a14:	4617      	movcc	r7, r2
 8009a16:	463a      	movcs	r2, r7
 8009a18:	055b      	lsls	r3, r3, #21
 8009a1a:	d54d      	bpl.n	8009ab8 <__sfvwrite_r+0x2cc>
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4648      	mov	r0, r9
 8009a20:	f8cd c000 	str.w	ip, [sp]
 8009a24:	f000 f91e 	bl	8009c64 <_malloc_r>
 8009a28:	f8dd c000 	ldr.w	ip, [sp]
 8009a2c:	4683      	mov	fp, r0
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d061      	beq.n	8009af6 <__sfvwrite_r+0x30a>
 8009a32:	4662      	mov	r2, ip
 8009a34:	6921      	ldr	r1, [r4, #16]
 8009a36:	f8cd c000 	str.w	ip, [sp]
 8009a3a:	f7f6 fc27 	bl	800028c <memcpy>
 8009a3e:	89a2      	ldrh	r2, [r4, #12]
 8009a40:	f8dd c000 	ldr.w	ip, [sp]
 8009a44:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009a48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a4c:	81a2      	strh	r2, [r4, #12]
 8009a4e:	eb0b 000c 	add.w	r0, fp, ip
 8009a52:	ebcc 0207 	rsb	r2, ip, r7
 8009a56:	f8c4 b010 	str.w	fp, [r4, #16]
 8009a5a:	6167      	str	r7, [r4, #20]
 8009a5c:	6020      	str	r0, [r4, #0]
 8009a5e:	60a2      	str	r2, [r4, #8]
 8009a60:	4647      	mov	r7, r8
 8009a62:	46c3      	mov	fp, r8
 8009a64:	e717      	b.n	8009896 <__sfvwrite_r+0xaa>
 8009a66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009a6a:	4590      	cmp	r8, r2
 8009a6c:	bf38      	it	cc
 8009a6e:	4642      	movcc	r2, r8
 8009a70:	fb92 f2f3 	sdiv	r2, r2, r3
 8009a74:	fb02 f303 	mul.w	r3, r2, r3
 8009a78:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8009a7a:	69e1      	ldr	r1, [r4, #28]
 8009a7c:	4648      	mov	r0, r9
 8009a7e:	4652      	mov	r2, sl
 8009a80:	47b8      	blx	r7
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f77f af31 	ble.w	80098ea <__sfvwrite_r+0xfe>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	e710      	b.n	80098ae <__sfvwrite_r+0xc2>
 8009a8c:	4662      	mov	r2, ip
 8009a8e:	4659      	mov	r1, fp
 8009a90:	f8cd c000 	str.w	ip, [sp]
 8009a94:	f000 fbe0 	bl	800a258 <memmove>
 8009a98:	f8dd c000 	ldr.w	ip, [sp]
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	4463      	add	r3, ip
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	4648      	mov	r0, r9
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f7ff fce5 	bl	8009474 <_fflush_r>
 8009aaa:	f8dd c000 	ldr.w	ip, [sp]
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f47f af1b 	bne.w	80098ea <__sfvwrite_r+0xfe>
 8009ab4:	4667      	mov	r7, ip
 8009ab6:	e745      	b.n	8009944 <__sfvwrite_r+0x158>
 8009ab8:	4648      	mov	r0, r9
 8009aba:	f8cd c000 	str.w	ip, [sp]
 8009abe:	f000 ff6d 	bl	800a99c <_realloc_r>
 8009ac2:	f8dd c000 	ldr.w	ip, [sp]
 8009ac6:	4683      	mov	fp, r0
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d1c0      	bne.n	8009a4e <__sfvwrite_r+0x262>
 8009acc:	4648      	mov	r0, r9
 8009ace:	6921      	ldr	r1, [r4, #16]
 8009ad0:	f7ff fdbe 	bl	8009650 <_free_r>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	220c      	movs	r2, #12
 8009ade:	0c1b      	lsrs	r3, r3, #16
 8009ae0:	f8c9 2000 	str.w	r2, [r9]
 8009ae4:	e702      	b.n	80098ec <__sfvwrite_r+0x100>
 8009ae6:	2701      	movs	r7, #1
 8009ae8:	f108 0a01 	add.w	sl, r8, #1
 8009aec:	9701      	str	r7, [sp, #4]
 8009aee:	e70f      	b.n	8009910 <__sfvwrite_r+0x124>
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e6ab      	b.n	800984e <__sfvwrite_r+0x62>
 8009af6:	230c      	movs	r3, #12
 8009af8:	f8c9 3000 	str.w	r3, [r9]
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	e6f5      	b.n	80098ec <__sfvwrite_r+0x100>

08009b00 <_fwalk>:
 8009b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8009b08:	4688      	mov	r8, r1
 8009b0a:	d01a      	beq.n	8009b42 <_fwalk+0x42>
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	687d      	ldr	r5, [r7, #4]
 8009b10:	68bc      	ldr	r4, [r7, #8]
 8009b12:	3d01      	subs	r5, #1
 8009b14:	d40f      	bmi.n	8009b36 <_fwalk+0x36>
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	f105 35ff 	add.w	r5, r5, #4294967295
 8009b1e:	d906      	bls.n	8009b2e <_fwalk+0x2e>
 8009b20:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8009b24:	3301      	adds	r3, #1
 8009b26:	4620      	mov	r0, r4
 8009b28:	d001      	beq.n	8009b2e <_fwalk+0x2e>
 8009b2a:	47c0      	blx	r8
 8009b2c:	4306      	orrs	r6, r0
 8009b2e:	1c6b      	adds	r3, r5, #1
 8009b30:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8009b34:	d1ef      	bne.n	8009b16 <_fwalk+0x16>
 8009b36:	683f      	ldr	r7, [r7, #0]
 8009b38:	2f00      	cmp	r7, #0
 8009b3a:	d1e8      	bne.n	8009b0e <_fwalk+0xe>
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b42:	463e      	mov	r6, r7
 8009b44:	4630      	mov	r0, r6
 8009b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b4a:	bf00      	nop

08009b4c <__locale_charset>:
 8009b4c:	f240 6064 	movw	r0, #1636	; 0x664
 8009b50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop

08009b58 <__locale_mb_cur_max>:
 8009b58:	f240 6384 	movw	r3, #1668	; 0x684
 8009b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	4770      	bx	lr

08009b64 <_localeconv_r>:
 8009b64:	f240 602c 	movw	r0, #1580	; 0x62c
 8009b68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop

08009b70 <__smakebuf_r>:
 8009b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b72:	898b      	ldrh	r3, [r1, #12]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	0796      	lsls	r6, r2, #30
 8009b78:	b091      	sub	sp, #68	; 0x44
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	d43a      	bmi.n	8009bf6 <__smakebuf_r+0x86>
 8009b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b84:	2900      	cmp	r1, #0
 8009b86:	db17      	blt.n	8009bb8 <__smakebuf_r+0x48>
 8009b88:	aa01      	add	r2, sp, #4
 8009b8a:	f7f8 f894 	bl	8001cb6 <_fstat_r>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	db10      	blt.n	8009bb4 <__smakebuf_r+0x44>
 8009b92:	9b02      	ldr	r3, [sp, #8]
 8009b94:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009b98:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 8009b9c:	424f      	negs	r7, r1
 8009b9e:	414f      	adcs	r7, r1
 8009ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba4:	d02f      	beq.n	8009c06 <__smakebuf_r+0x96>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8009bb2:	e00b      	b.n	8009bcc <__smakebuf_r+0x5c>
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	bf14      	ite	ne
 8009bc4:	2640      	movne	r6, #64	; 0x40
 8009bc6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8009bca:	2700      	movs	r7, #0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	4631      	mov	r1, r6
 8009bd0:	f000 f848 	bl	8009c64 <_malloc_r>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d030      	beq.n	8009c3a <__smakebuf_r+0xca>
 8009bd8:	89a2      	ldrh	r2, [r4, #12]
 8009bda:	f249 43a1 	movw	r3, #38049	; 0x94a1
 8009bde:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009be6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8009be8:	6020      	str	r0, [r4, #0]
 8009bea:	6120      	str	r0, [r4, #16]
 8009bec:	6166      	str	r6, [r4, #20]
 8009bee:	81a2      	strh	r2, [r4, #12]
 8009bf0:	b9bf      	cbnz	r7, 8009c22 <__smakebuf_r+0xb2>
 8009bf2:	b011      	add	sp, #68	; 0x44
 8009bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bf6:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	600b      	str	r3, [r1, #0]
 8009bfe:	610b      	str	r3, [r1, #16]
 8009c00:	614a      	str	r2, [r1, #20]
 8009c02:	b011      	add	sp, #68	; 0x44
 8009c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c06:	f64a 632d 	movw	r3, #44589	; 0xae2d
 8009c0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009c0c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d1c8      	bne.n	8009ba6 <__smakebuf_r+0x36>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8009c1a:	4333      	orrs	r3, r6
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	64e6      	str	r6, [r4, #76]	; 0x4c
 8009c20:	e7d4      	b.n	8009bcc <__smakebuf_r+0x5c>
 8009c22:	4628      	mov	r0, r5
 8009c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c28:	f7f8 f84a 	bl	8001cc0 <_isatty_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d0e0      	beq.n	8009bf2 <__smakebuf_r+0x82>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f043 0301 	orr.w	r3, r3, #1
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	e7db      	b.n	8009bf2 <__smakebuf_r+0x82>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	059a      	lsls	r2, r3, #22
 8009c3e:	d4d8      	bmi.n	8009bf2 <__smakebuf_r+0x82>
 8009c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c44:	f043 0302 	orr.w	r3, r3, #2
 8009c48:	2101      	movs	r1, #1
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	6122      	str	r2, [r4, #16]
 8009c50:	6161      	str	r1, [r4, #20]
 8009c52:	e7ce      	b.n	8009bf2 <__smakebuf_r+0x82>

08009c54 <malloc>:
 8009c54:	f240 6328 	movw	r3, #1576	; 0x628
 8009c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	f000 b800 	b.w	8009c64 <_malloc_r>

08009c64 <_malloc_r>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	f101 050b 	add.w	r5, r1, #11
 8009c6c:	2d16      	cmp	r5, #22
 8009c6e:	bf87      	ittee	hi
 8009c70:	f025 0507 	bichi.w	r5, r5, #7
 8009c74:	0feb      	lsrhi	r3, r5, #31
 8009c76:	2300      	movls	r3, #0
 8009c78:	2510      	movls	r5, #16
 8009c7a:	428d      	cmp	r5, r1
 8009c7c:	bf2c      	ite	cs
 8009c7e:	4619      	movcs	r1, r3
 8009c80:	f043 0101 	orrcc.w	r1, r3, #1
 8009c84:	b083      	sub	sp, #12
 8009c86:	4607      	mov	r7, r0
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	f040 80b5 	bne.w	8009df8 <_malloc_r+0x194>
 8009c8e:	f000 fb45 	bl	800a31c <__malloc_lock>
 8009c92:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009c96:	d21f      	bcs.n	8009cd8 <_malloc_r+0x74>
 8009c98:	f240 6688 	movw	r6, #1672	; 0x688
 8009c9c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8009ca0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8009ca4:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 8009ca8:	68dc      	ldr	r4, [r3, #12]
 8009caa:	429c      	cmp	r4, r3
 8009cac:	f000 81f4 	beq.w	800a098 <_malloc_r+0x434>
 8009cb0:	6863      	ldr	r3, [r4, #4]
 8009cb2:	68e2      	ldr	r2, [r4, #12]
 8009cb4:	68a1      	ldr	r1, [r4, #8]
 8009cb6:	f023 0303 	bic.w	r3, r3, #3
 8009cba:	4423      	add	r3, r4
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	685d      	ldr	r5, [r3, #4]
 8009cc0:	60ca      	str	r2, [r1, #12]
 8009cc2:	f045 0501 	orr.w	r5, r5, #1
 8009cc6:	6091      	str	r1, [r2, #8]
 8009cc8:	605d      	str	r5, [r3, #4]
 8009cca:	f000 fb29 	bl	800a320 <__malloc_unlock>
 8009cce:	3408      	adds	r4, #8
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	b003      	add	sp, #12
 8009cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8009cdc:	bf04      	itt	eq
 8009cde:	217e      	moveq	r1, #126	; 0x7e
 8009ce0:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 8009ce4:	f040 808f 	bne.w	8009e06 <_malloc_r+0x1a2>
 8009ce8:	f240 6688 	movw	r6, #1672	; 0x688
 8009cec:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8009cf0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8009cf4:	68cc      	ldr	r4, [r1, #12]
 8009cf6:	42a1      	cmp	r1, r4
 8009cf8:	d106      	bne.n	8009d08 <_malloc_r+0xa4>
 8009cfa:	e00d      	b.n	8009d18 <_malloc_r+0xb4>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f280 8163 	bge.w	8009fc8 <_malloc_r+0x364>
 8009d02:	68e4      	ldr	r4, [r4, #12]
 8009d04:	42a1      	cmp	r1, r4
 8009d06:	d007      	beq.n	8009d18 <_malloc_r+0xb4>
 8009d08:	6862      	ldr	r2, [r4, #4]
 8009d0a:	f022 0203 	bic.w	r2, r2, #3
 8009d0e:	1b53      	subs	r3, r2, r5
 8009d10:	2b0f      	cmp	r3, #15
 8009d12:	ddf3      	ble.n	8009cfc <_malloc_r+0x98>
 8009d14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d18:	f10c 0c01 	add.w	ip, ip, #1
 8009d1c:	f240 6388 	movw	r3, #1672	; 0x688
 8009d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d24:	6934      	ldr	r4, [r6, #16]
 8009d26:	f103 0e08 	add.w	lr, r3, #8
 8009d2a:	4574      	cmp	r4, lr
 8009d2c:	bf08      	it	eq
 8009d2e:	685a      	ldreq	r2, [r3, #4]
 8009d30:	d022      	beq.n	8009d78 <_malloc_r+0x114>
 8009d32:	6861      	ldr	r1, [r4, #4]
 8009d34:	f021 0103 	bic.w	r1, r1, #3
 8009d38:	1b4a      	subs	r2, r1, r5
 8009d3a:	2a0f      	cmp	r2, #15
 8009d3c:	f300 8190 	bgt.w	800a060 <_malloc_r+0x3fc>
 8009d40:	2a00      	cmp	r2, #0
 8009d42:	f8c3 e014 	str.w	lr, [r3, #20]
 8009d46:	f8c3 e010 	str.w	lr, [r3, #16]
 8009d4a:	da67      	bge.n	8009e1c <_malloc_r+0x1b8>
 8009d4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009d50:	f080 815f 	bcs.w	800a012 <_malloc_r+0x3ae>
 8009d54:	08c9      	lsrs	r1, r1, #3
 8009d56:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8009d5a:	ea4f 08a1 	mov.w	r8, r1, asr #2
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	6881      	ldr	r1, [r0, #8]
 8009d62:	60e0      	str	r0, [r4, #12]
 8009d64:	f04f 0901 	mov.w	r9, #1
 8009d68:	fa09 f808 	lsl.w	r8, r9, r8
 8009d6c:	ea48 0202 	orr.w	r2, r8, r2
 8009d70:	60a1      	str	r1, [r4, #8]
 8009d72:	605a      	str	r2, [r3, #4]
 8009d74:	6084      	str	r4, [r0, #8]
 8009d76:	60cc      	str	r4, [r1, #12]
 8009d78:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	4098      	lsls	r0, r3
 8009d80:	4290      	cmp	r0, r2
 8009d82:	d858      	bhi.n	8009e36 <_malloc_r+0x1d2>
 8009d84:	4202      	tst	r2, r0
 8009d86:	d106      	bne.n	8009d96 <_malloc_r+0x132>
 8009d88:	f02c 0c03 	bic.w	ip, ip, #3
 8009d8c:	0040      	lsls	r0, r0, #1
 8009d8e:	4202      	tst	r2, r0
 8009d90:	f10c 0c04 	add.w	ip, ip, #4
 8009d94:	d0fa      	beq.n	8009d8c <_malloc_r+0x128>
 8009d96:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 8009d9a:	4644      	mov	r4, r8
 8009d9c:	46e1      	mov	r9, ip
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	429c      	cmp	r4, r3
 8009da2:	d107      	bne.n	8009db4 <_malloc_r+0x150>
 8009da4:	e16f      	b.n	800a086 <_malloc_r+0x422>
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	f280 8180 	bge.w	800a0ac <_malloc_r+0x448>
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	429c      	cmp	r4, r3
 8009db0:	f000 8169 	beq.w	800a086 <_malloc_r+0x422>
 8009db4:	6859      	ldr	r1, [r3, #4]
 8009db6:	f021 0103 	bic.w	r1, r1, #3
 8009dba:	1b4a      	subs	r2, r1, r5
 8009dbc:	2a0f      	cmp	r2, #15
 8009dbe:	ddf2      	ble.n	8009da6 <_malloc_r+0x142>
 8009dc0:	461c      	mov	r4, r3
 8009dc2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8009dc6:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8009dca:	1959      	adds	r1, r3, r5
 8009dcc:	f045 0901 	orr.w	r9, r5, #1
 8009dd0:	f042 0501 	orr.w	r5, r2, #1
 8009dd4:	f8c3 9004 	str.w	r9, [r3, #4]
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f8c8 c00c 	str.w	ip, [r8, #12]
 8009dde:	f8cc 8008 	str.w	r8, [ip, #8]
 8009de2:	6171      	str	r1, [r6, #20]
 8009de4:	6131      	str	r1, [r6, #16]
 8009de6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8009dea:	f8c1 e008 	str.w	lr, [r1, #8]
 8009dee:	604d      	str	r5, [r1, #4]
 8009df0:	508a      	str	r2, [r1, r2]
 8009df2:	f000 fa95 	bl	800a320 <__malloc_unlock>
 8009df6:	e76b      	b.n	8009cd0 <_malloc_r+0x6c>
 8009df8:	230c      	movs	r3, #12
 8009dfa:	2400      	movs	r4, #0
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	4620      	mov	r0, r4
 8009e00:	b003      	add	sp, #12
 8009e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e06:	f1bc 0f04 	cmp.w	ip, #4
 8009e0a:	f200 80ee 	bhi.w	8009fea <_malloc_r+0x386>
 8009e0e:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8009e12:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8009e16:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8009e1a:	e765      	b.n	8009ce8 <_malloc_r+0x84>
 8009e1c:	4421      	add	r1, r4
 8009e1e:	4638      	mov	r0, r7
 8009e20:	684b      	ldr	r3, [r1, #4]
 8009e22:	f043 0301 	orr.w	r3, r3, #1
 8009e26:	604b      	str	r3, [r1, #4]
 8009e28:	f000 fa7a 	bl	800a320 <__malloc_unlock>
 8009e2c:	3408      	adds	r4, #8
 8009e2e:	4620      	mov	r0, r4
 8009e30:	b003      	add	sp, #12
 8009e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e36:	68b4      	ldr	r4, [r6, #8]
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	f023 0903 	bic.w	r9, r3, #3
 8009e3e:	454d      	cmp	r5, r9
 8009e40:	d804      	bhi.n	8009e4c <_malloc_r+0x1e8>
 8009e42:	ebc5 0309 	rsb	r3, r5, r9
 8009e46:	2b0f      	cmp	r3, #15
 8009e48:	f300 80ae 	bgt.w	8009fa8 <_malloc_r+0x344>
 8009e4c:	f640 63d0 	movw	r3, #3792	; 0xed0
 8009e50:	f640 2a94 	movw	sl, #2708	; 0xa94
 8009e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e58:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f8da 1000 	ldr.w	r1, [sl]
 8009e62:	442b      	add	r3, r5
 8009e64:	3101      	adds	r1, #1
 8009e66:	bf1d      	ittte	ne
 8009e68:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 8009e6c:	330f      	addne	r3, #15
 8009e6e:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 8009e72:	f103 0c10 	addeq.w	ip, r3, #16
 8009e76:	bf18      	it	ne
 8009e78:	f023 0c0f 	bicne.w	ip, r3, #15
 8009e7c:	eb04 0209 	add.w	r2, r4, r9
 8009e80:	4661      	mov	r1, ip
 8009e82:	4638      	mov	r0, r7
 8009e84:	9201      	str	r2, [sp, #4]
 8009e86:	f8cd c000 	str.w	ip, [sp]
 8009e8a:	f7f7 fef7 	bl	8001c7c <_sbrk_r>
 8009e8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e92:	4680      	mov	r8, r0
 8009e94:	9a01      	ldr	r2, [sp, #4]
 8009e96:	f8dd c000 	ldr.w	ip, [sp]
 8009e9a:	f000 811d 	beq.w	800a0d8 <_malloc_r+0x474>
 8009e9e:	4282      	cmp	r2, r0
 8009ea0:	f200 8117 	bhi.w	800a0d2 <_malloc_r+0x46e>
 8009ea4:	f640 6bd4 	movw	fp, #3796	; 0xed4
 8009ea8:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8009eac:	4542      	cmp	r2, r8
 8009eae:	f8db 3000 	ldr.w	r3, [fp]
 8009eb2:	4463      	add	r3, ip
 8009eb4:	f8cb 3000 	str.w	r3, [fp]
 8009eb8:	f000 815d 	beq.w	800a176 <_malloc_r+0x512>
 8009ebc:	f8da 0000 	ldr.w	r0, [sl]
 8009ec0:	f640 2194 	movw	r1, #2708	; 0xa94
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	bf18      	it	ne
 8009ec8:	ebc2 0208 	rsbne	r2, r2, r8
 8009ecc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009ed0:	bf16      	itet	ne
 8009ed2:	189b      	addne	r3, r3, r2
 8009ed4:	f8c1 8000 	streq.w	r8, [r1]
 8009ed8:	f8cb 3000 	strne.w	r3, [fp]
 8009edc:	f018 0307 	ands.w	r3, r8, #7
 8009ee0:	bf1f      	itttt	ne
 8009ee2:	f1c3 0208 	rsbne	r2, r3, #8
 8009ee6:	4490      	addne	r8, r2
 8009ee8:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8009eec:	f103 0a08 	addne.w	sl, r3, #8
 8009ef0:	eb08 030c 	add.w	r3, r8, ip
 8009ef4:	bf08      	it	eq
 8009ef6:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
 8009efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009efe:	ebc3 0a0a 	rsb	sl, r3, sl
 8009f02:	4651      	mov	r1, sl
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7f7 feb9 	bl	8001c7c <_sbrk_r>
 8009f0a:	1c43      	adds	r3, r0, #1
 8009f0c:	bf18      	it	ne
 8009f0e:	ebc8 0200 	rsbne	r2, r8, r0
 8009f12:	f8db 3000 	ldr.w	r3, [fp]
 8009f16:	f8c6 8008 	str.w	r8, [r6, #8]
 8009f1a:	bf15      	itete	ne
 8009f1c:	4452      	addne	r2, sl
 8009f1e:	f04f 0a00 	moveq.w	sl, #0
 8009f22:	f042 0201 	orrne.w	r2, r2, #1
 8009f26:	2201      	moveq	r2, #1
 8009f28:	4453      	add	r3, sl
 8009f2a:	42b4      	cmp	r4, r6
 8009f2c:	f640 6ad4 	movw	sl, #3796	; 0xed4
 8009f30:	f8c8 2004 	str.w	r2, [r8, #4]
 8009f34:	f8cb 3000 	str.w	r3, [fp]
 8009f38:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8009f3c:	d015      	beq.n	8009f6a <_malloc_r+0x306>
 8009f3e:	f1b9 0f0f 	cmp.w	r9, #15
 8009f42:	f240 80f8 	bls.w	800a136 <_malloc_r+0x4d2>
 8009f46:	6861      	ldr	r1, [r4, #4]
 8009f48:	f1a9 020c 	sub.w	r2, r9, #12
 8009f4c:	f022 0207 	bic.w	r2, r2, #7
 8009f50:	f001 0e01 	and.w	lr, r1, #1
 8009f54:	18a1      	adds	r1, r4, r2
 8009f56:	2005      	movs	r0, #5
 8009f58:	ea42 0e0e 	orr.w	lr, r2, lr
 8009f5c:	2a0f      	cmp	r2, #15
 8009f5e:	f8c4 e004 	str.w	lr, [r4, #4]
 8009f62:	6048      	str	r0, [r1, #4]
 8009f64:	6088      	str	r0, [r1, #8]
 8009f66:	f200 8112 	bhi.w	800a18e <_malloc_r+0x52a>
 8009f6a:	f640 62cc 	movw	r2, #3788	; 0xecc
 8009f6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009f72:	68b4      	ldr	r4, [r6, #8]
 8009f74:	6811      	ldr	r1, [r2, #0]
 8009f76:	428b      	cmp	r3, r1
 8009f78:	bf88      	it	hi
 8009f7a:	6013      	strhi	r3, [r2, #0]
 8009f7c:	f640 62c8 	movw	r2, #3784	; 0xec8
 8009f80:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009f84:	6811      	ldr	r1, [r2, #0]
 8009f86:	428b      	cmp	r3, r1
 8009f88:	bf88      	it	hi
 8009f8a:	6013      	strhi	r3, [r2, #0]
 8009f8c:	6862      	ldr	r2, [r4, #4]
 8009f8e:	f022 0203 	bic.w	r2, r2, #3
 8009f92:	4295      	cmp	r5, r2
 8009f94:	ebc5 0302 	rsb	r3, r5, r2
 8009f98:	d801      	bhi.n	8009f9e <_malloc_r+0x33a>
 8009f9a:	2b0f      	cmp	r3, #15
 8009f9c:	dc04      	bgt.n	8009fa8 <_malloc_r+0x344>
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f000 f9be 	bl	800a320 <__malloc_unlock>
 8009fa4:	2400      	movs	r4, #0
 8009fa6:	e693      	b.n	8009cd0 <_malloc_r+0x6c>
 8009fa8:	1962      	adds	r2, r4, r5
 8009faa:	f043 0301 	orr.w	r3, r3, #1
 8009fae:	f045 0501 	orr.w	r5, r5, #1
 8009fb2:	6065      	str	r5, [r4, #4]
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	60b2      	str	r2, [r6, #8]
 8009fb8:	6053      	str	r3, [r2, #4]
 8009fba:	f000 f9b1 	bl	800a320 <__malloc_unlock>
 8009fbe:	3408      	adds	r4, #8
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	b003      	add	sp, #12
 8009fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc8:	4422      	add	r2, r4
 8009fca:	68e3      	ldr	r3, [r4, #12]
 8009fcc:	6850      	ldr	r0, [r2, #4]
 8009fce:	68a1      	ldr	r1, [r4, #8]
 8009fd0:	f040 0501 	orr.w	r5, r0, #1
 8009fd4:	60cb      	str	r3, [r1, #12]
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	6099      	str	r1, [r3, #8]
 8009fda:	6055      	str	r5, [r2, #4]
 8009fdc:	f000 f9a0 	bl	800a320 <__malloc_unlock>
 8009fe0:	3408      	adds	r4, #8
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fea:	f1bc 0f14 	cmp.w	ip, #20
 8009fee:	bf9c      	itt	ls
 8009ff0:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8009ff4:	ea4f 014c 	movls.w	r1, ip, lsl #1
 8009ff8:	f67f ae76 	bls.w	8009ce8 <_malloc_r+0x84>
 8009ffc:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800a000:	f200 808f 	bhi.w	800a122 <_malloc_r+0x4be>
 800a004:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 800a008:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 800a00c:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800a010:	e66a      	b.n	8009ce8 <_malloc_r+0x84>
 800a012:	0a4b      	lsrs	r3, r1, #9
 800a014:	2b04      	cmp	r3, #4
 800a016:	d958      	bls.n	800a0ca <_malloc_r+0x466>
 800a018:	2b14      	cmp	r3, #20
 800a01a:	bf9c      	itt	ls
 800a01c:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
 800a020:	0050      	lslls	r0, r2, #1
 800a022:	d905      	bls.n	800a030 <_malloc_r+0x3cc>
 800a024:	2b54      	cmp	r3, #84	; 0x54
 800a026:	f200 80ba 	bhi.w	800a19e <_malloc_r+0x53a>
 800a02a:	0b0a      	lsrs	r2, r1, #12
 800a02c:	326e      	adds	r2, #110	; 0x6e
 800a02e:	0050      	lsls	r0, r2, #1
 800a030:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800a034:	f240 6888 	movw	r8, #1672	; 0x688
 800a038:	6883      	ldr	r3, [r0, #8]
 800a03a:	4283      	cmp	r3, r0
 800a03c:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800a040:	d07f      	beq.n	800a142 <_malloc_r+0x4de>
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	f022 0203 	bic.w	r2, r2, #3
 800a048:	4291      	cmp	r1, r2
 800a04a:	d202      	bcs.n	800a052 <_malloc_r+0x3ee>
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	4298      	cmp	r0, r3
 800a050:	d1f7      	bne.n	800a042 <_malloc_r+0x3de>
 800a052:	68d9      	ldr	r1, [r3, #12]
 800a054:	6872      	ldr	r2, [r6, #4]
 800a056:	60e1      	str	r1, [r4, #12]
 800a058:	60a3      	str	r3, [r4, #8]
 800a05a:	608c      	str	r4, [r1, #8]
 800a05c:	60dc      	str	r4, [r3, #12]
 800a05e:	e68b      	b.n	8009d78 <_malloc_r+0x114>
 800a060:	1961      	adds	r1, r4, r5
 800a062:	f042 0601 	orr.w	r6, r2, #1
 800a066:	f045 0501 	orr.w	r5, r5, #1
 800a06a:	6065      	str	r5, [r4, #4]
 800a06c:	4638      	mov	r0, r7
 800a06e:	6159      	str	r1, [r3, #20]
 800a070:	6119      	str	r1, [r3, #16]
 800a072:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a076:	f8c1 e008 	str.w	lr, [r1, #8]
 800a07a:	604e      	str	r6, [r1, #4]
 800a07c:	508a      	str	r2, [r1, r2]
 800a07e:	3408      	adds	r4, #8
 800a080:	f000 f94e 	bl	800a320 <__malloc_unlock>
 800a084:	e624      	b.n	8009cd0 <_malloc_r+0x6c>
 800a086:	f109 0901 	add.w	r9, r9, #1
 800a08a:	f019 0f03 	tst.w	r9, #3
 800a08e:	f104 0408 	add.w	r4, r4, #8
 800a092:	f47f ae84 	bne.w	8009d9e <_malloc_r+0x13a>
 800a096:	e028      	b.n	800a0ea <_malloc_r+0x486>
 800a098:	f104 0308 	add.w	r3, r4, #8
 800a09c:	6964      	ldr	r4, [r4, #20]
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	bf08      	it	eq
 800a0a2:	f10c 0c02 	addeq.w	ip, ip, #2
 800a0a6:	f43f ae39 	beq.w	8009d1c <_malloc_r+0xb8>
 800a0aa:	e601      	b.n	8009cb0 <_malloc_r+0x4c>
 800a0ac:	4419      	add	r1, r3
 800a0ae:	461c      	mov	r4, r3
 800a0b0:	6848      	ldr	r0, [r1, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800a0b8:	f040 0501 	orr.w	r5, r0, #1
 800a0bc:	604d      	str	r5, [r1, #4]
 800a0be:	4638      	mov	r0, r7
 800a0c0:	60d3      	str	r3, [r2, #12]
 800a0c2:	609a      	str	r2, [r3, #8]
 800a0c4:	f000 f92c 	bl	800a320 <__malloc_unlock>
 800a0c8:	e602      	b.n	8009cd0 <_malloc_r+0x6c>
 800a0ca:	098a      	lsrs	r2, r1, #6
 800a0cc:	3238      	adds	r2, #56	; 0x38
 800a0ce:	0050      	lsls	r0, r2, #1
 800a0d0:	e7ae      	b.n	800a030 <_malloc_r+0x3cc>
 800a0d2:	42b4      	cmp	r4, r6
 800a0d4:	f43f aee6 	beq.w	8009ea4 <_malloc_r+0x240>
 800a0d8:	68b4      	ldr	r4, [r6, #8]
 800a0da:	6862      	ldr	r2, [r4, #4]
 800a0dc:	f022 0203 	bic.w	r2, r2, #3
 800a0e0:	e757      	b.n	8009f92 <_malloc_r+0x32e>
 800a0e2:	f8d8 8000 	ldr.w	r8, [r8]
 800a0e6:	4598      	cmp	r8, r3
 800a0e8:	d16b      	bne.n	800a1c2 <_malloc_r+0x55e>
 800a0ea:	f01c 0f03 	tst.w	ip, #3
 800a0ee:	f1a8 0308 	sub.w	r3, r8, #8
 800a0f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0f6:	d1f4      	bne.n	800a0e2 <_malloc_r+0x47e>
 800a0f8:	6873      	ldr	r3, [r6, #4]
 800a0fa:	ea23 0300 	bic.w	r3, r3, r0
 800a0fe:	6073      	str	r3, [r6, #4]
 800a100:	0040      	lsls	r0, r0, #1
 800a102:	4298      	cmp	r0, r3
 800a104:	f63f ae97 	bhi.w	8009e36 <_malloc_r+0x1d2>
 800a108:	2800      	cmp	r0, #0
 800a10a:	f43f ae94 	beq.w	8009e36 <_malloc_r+0x1d2>
 800a10e:	4203      	tst	r3, r0
 800a110:	46cc      	mov	ip, r9
 800a112:	f47f ae40 	bne.w	8009d96 <_malloc_r+0x132>
 800a116:	0040      	lsls	r0, r0, #1
 800a118:	4203      	tst	r3, r0
 800a11a:	f10c 0c04 	add.w	ip, ip, #4
 800a11e:	d0fa      	beq.n	800a116 <_malloc_r+0x4b2>
 800a120:	e639      	b.n	8009d96 <_malloc_r+0x132>
 800a122:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800a126:	d817      	bhi.n	800a158 <_malloc_r+0x4f4>
 800a128:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 800a12c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 800a130:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800a134:	e5d8      	b.n	8009ce8 <_malloc_r+0x84>
 800a136:	2301      	movs	r3, #1
 800a138:	f8c8 3004 	str.w	r3, [r8, #4]
 800a13c:	4644      	mov	r4, r8
 800a13e:	2200      	movs	r2, #0
 800a140:	e727      	b.n	8009f92 <_malloc_r+0x32e>
 800a142:	1091      	asrs	r1, r2, #2
 800a144:	2001      	movs	r0, #1
 800a146:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a14a:	fa00 f101 	lsl.w	r1, r0, r1
 800a14e:	430a      	orrs	r2, r1
 800a150:	f8c8 2004 	str.w	r2, [r8, #4]
 800a154:	4619      	mov	r1, r3
 800a156:	e77e      	b.n	800a056 <_malloc_r+0x3f2>
 800a158:	f240 5354 	movw	r3, #1364	; 0x554
 800a15c:	459c      	cmp	ip, r3
 800a15e:	bf9d      	ittte	ls
 800a160:	ea4f 4c95 	movls.w	ip, r5, lsr #18
 800a164:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 800a168:	ea4f 014c 	movls.w	r1, ip, lsl #1
 800a16c:	21fc      	movhi	r1, #252	; 0xfc
 800a16e:	bf88      	it	hi
 800a170:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 800a174:	e5b8      	b.n	8009ce8 <_malloc_r+0x84>
 800a176:	f3c2 010b 	ubfx	r1, r2, #0, #12
 800a17a:	2900      	cmp	r1, #0
 800a17c:	f47f ae9e 	bne.w	8009ebc <_malloc_r+0x258>
 800a180:	eb0c 0109 	add.w	r1, ip, r9
 800a184:	68b2      	ldr	r2, [r6, #8]
 800a186:	f041 0101 	orr.w	r1, r1, #1
 800a18a:	6051      	str	r1, [r2, #4]
 800a18c:	e6ed      	b.n	8009f6a <_malloc_r+0x306>
 800a18e:	f104 0108 	add.w	r1, r4, #8
 800a192:	4638      	mov	r0, r7
 800a194:	f7ff fa5c 	bl	8009650 <_free_r>
 800a198:	f8da 3000 	ldr.w	r3, [sl]
 800a19c:	e6e5      	b.n	8009f6a <_malloc_r+0x306>
 800a19e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a1a2:	d803      	bhi.n	800a1ac <_malloc_r+0x548>
 800a1a4:	0bca      	lsrs	r2, r1, #15
 800a1a6:	3277      	adds	r2, #119	; 0x77
 800a1a8:	0050      	lsls	r0, r2, #1
 800a1aa:	e741      	b.n	800a030 <_malloc_r+0x3cc>
 800a1ac:	f240 5254 	movw	r2, #1364	; 0x554
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	bf9d      	ittte	ls
 800a1b4:	0c8a      	lsrls	r2, r1, #18
 800a1b6:	327c      	addls	r2, #124	; 0x7c
 800a1b8:	0050      	lslls	r0, r2, #1
 800a1ba:	20fc      	movhi	r0, #252	; 0xfc
 800a1bc:	bf88      	it	hi
 800a1be:	227e      	movhi	r2, #126	; 0x7e
 800a1c0:	e736      	b.n	800a030 <_malloc_r+0x3cc>
 800a1c2:	6873      	ldr	r3, [r6, #4]
 800a1c4:	e79c      	b.n	800a100 <_malloc_r+0x49c>
 800a1c6:	bf00      	nop

0800a1c8 <memchr>:
 800a1c8:	0783      	lsls	r3, r0, #30
 800a1ca:	b470      	push	{r4, r5, r6}
 800a1cc:	b2c9      	uxtb	r1, r1
 800a1ce:	d03f      	beq.n	800a250 <memchr+0x88>
 800a1d0:	1e54      	subs	r4, r2, #1
 800a1d2:	b32a      	cbz	r2, 800a220 <memchr+0x58>
 800a1d4:	7803      	ldrb	r3, [r0, #0]
 800a1d6:	428b      	cmp	r3, r1
 800a1d8:	d023      	beq.n	800a222 <memchr+0x5a>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	e004      	b.n	800a1e8 <memchr+0x20>
 800a1de:	b1fc      	cbz	r4, 800a220 <memchr+0x58>
 800a1e0:	7804      	ldrb	r4, [r0, #0]
 800a1e2:	428c      	cmp	r4, r1
 800a1e4:	d01d      	beq.n	800a222 <memchr+0x5a>
 800a1e6:	4614      	mov	r4, r2
 800a1e8:	f013 0f03 	tst.w	r3, #3
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f104 32ff 	add.w	r2, r4, #4294967295
 800a1f2:	f103 0301 	add.w	r3, r3, #1
 800a1f6:	d1f2      	bne.n	800a1de <memchr+0x16>
 800a1f8:	2c03      	cmp	r4, #3
 800a1fa:	d814      	bhi.n	800a226 <memchr+0x5e>
 800a1fc:	1e65      	subs	r5, r4, #1
 800a1fe:	b34c      	cbz	r4, 800a254 <memchr+0x8c>
 800a200:	7803      	ldrb	r3, [r0, #0]
 800a202:	428b      	cmp	r3, r1
 800a204:	d00d      	beq.n	800a222 <memchr+0x5a>
 800a206:	1c42      	adds	r2, r0, #1
 800a208:	2300      	movs	r3, #0
 800a20a:	e002      	b.n	800a212 <memchr+0x4a>
 800a20c:	7804      	ldrb	r4, [r0, #0]
 800a20e:	428c      	cmp	r4, r1
 800a210:	d007      	beq.n	800a222 <memchr+0x5a>
 800a212:	42ab      	cmp	r3, r5
 800a214:	4610      	mov	r0, r2
 800a216:	f103 0301 	add.w	r3, r3, #1
 800a21a:	f102 0201 	add.w	r2, r2, #1
 800a21e:	d1f5      	bne.n	800a20c <memchr+0x44>
 800a220:	2000      	movs	r0, #0
 800a222:	bc70      	pop	{r4, r5, r6}
 800a224:	4770      	bx	lr
 800a226:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800a22a:	4603      	mov	r3, r0
 800a22c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800a230:	4618      	mov	r0, r3
 800a232:	3304      	adds	r3, #4
 800a234:	6802      	ldr	r2, [r0, #0]
 800a236:	4072      	eors	r2, r6
 800a238:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 800a23c:	ea25 0202 	bic.w	r2, r5, r2
 800a240:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800a244:	d1da      	bne.n	800a1fc <memchr+0x34>
 800a246:	3c04      	subs	r4, #4
 800a248:	2c03      	cmp	r4, #3
 800a24a:	4618      	mov	r0, r3
 800a24c:	d8f0      	bhi.n	800a230 <memchr+0x68>
 800a24e:	e7d5      	b.n	800a1fc <memchr+0x34>
 800a250:	4614      	mov	r4, r2
 800a252:	e7d1      	b.n	800a1f8 <memchr+0x30>
 800a254:	4620      	mov	r0, r4
 800a256:	e7e4      	b.n	800a222 <memchr+0x5a>

0800a258 <memmove>:
 800a258:	4288      	cmp	r0, r1
 800a25a:	b4f0      	push	{r4, r5, r6, r7}
 800a25c:	d910      	bls.n	800a280 <memmove+0x28>
 800a25e:	188c      	adds	r4, r1, r2
 800a260:	42a0      	cmp	r0, r4
 800a262:	d20d      	bcs.n	800a280 <memmove+0x28>
 800a264:	1885      	adds	r5, r0, r2
 800a266:	1e53      	subs	r3, r2, #1
 800a268:	b142      	cbz	r2, 800a27c <memmove+0x24>
 800a26a:	4621      	mov	r1, r4
 800a26c:	462a      	mov	r2, r5
 800a26e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800a272:	3b01      	subs	r3, #1
 800a274:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a278:	1c5c      	adds	r4, r3, #1
 800a27a:	d1f8      	bne.n	800a26e <memmove+0x16>
 800a27c:	bcf0      	pop	{r4, r5, r6, r7}
 800a27e:	4770      	bx	lr
 800a280:	2a0f      	cmp	r2, #15
 800a282:	d940      	bls.n	800a306 <memmove+0xae>
 800a284:	ea40 0301 	orr.w	r3, r0, r1
 800a288:	079b      	lsls	r3, r3, #30
 800a28a:	d140      	bne.n	800a30e <memmove+0xb6>
 800a28c:	f1a2 0710 	sub.w	r7, r2, #16
 800a290:	093f      	lsrs	r7, r7, #4
 800a292:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800a296:	3610      	adds	r6, #16
 800a298:	460c      	mov	r4, r1
 800a29a:	4603      	mov	r3, r0
 800a29c:	6825      	ldr	r5, [r4, #0]
 800a29e:	601d      	str	r5, [r3, #0]
 800a2a0:	6865      	ldr	r5, [r4, #4]
 800a2a2:	605d      	str	r5, [r3, #4]
 800a2a4:	68a5      	ldr	r5, [r4, #8]
 800a2a6:	609d      	str	r5, [r3, #8]
 800a2a8:	68e5      	ldr	r5, [r4, #12]
 800a2aa:	3310      	adds	r3, #16
 800a2ac:	f843 5c04 	str.w	r5, [r3, #-4]
 800a2b0:	42b3      	cmp	r3, r6
 800a2b2:	f104 0410 	add.w	r4, r4, #16
 800a2b6:	d1f1      	bne.n	800a29c <memmove+0x44>
 800a2b8:	1c7b      	adds	r3, r7, #1
 800a2ba:	f002 0c0f 	and.w	ip, r2, #15
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	f1bc 0f03 	cmp.w	ip, #3
 800a2c4:	4419      	add	r1, r3
 800a2c6:	4403      	add	r3, r0
 800a2c8:	d923      	bls.n	800a312 <memmove+0xba>
 800a2ca:	460e      	mov	r6, r1
 800a2cc:	461d      	mov	r5, r3
 800a2ce:	4664      	mov	r4, ip
 800a2d0:	f856 7b04 	ldr.w	r7, [r6], #4
 800a2d4:	3c04      	subs	r4, #4
 800a2d6:	2c03      	cmp	r4, #3
 800a2d8:	f845 7b04 	str.w	r7, [r5], #4
 800a2dc:	d8f8      	bhi.n	800a2d0 <memmove+0x78>
 800a2de:	f1ac 0404 	sub.w	r4, ip, #4
 800a2e2:	f024 0403 	bic.w	r4, r4, #3
 800a2e6:	3404      	adds	r4, #4
 800a2e8:	f002 0203 	and.w	r2, r2, #3
 800a2ec:	4423      	add	r3, r4
 800a2ee:	4421      	add	r1, r4
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	d0c3      	beq.n	800a27c <memmove+0x24>
 800a2f4:	441a      	add	r2, r3
 800a2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2fa:	f803 4b01 	strb.w	r4, [r3], #1
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d1f9      	bne.n	800a2f6 <memmove+0x9e>
 800a302:	bcf0      	pop	{r4, r5, r6, r7}
 800a304:	4770      	bx	lr
 800a306:	4603      	mov	r3, r0
 800a308:	2a00      	cmp	r2, #0
 800a30a:	d1f3      	bne.n	800a2f4 <memmove+0x9c>
 800a30c:	e7b6      	b.n	800a27c <memmove+0x24>
 800a30e:	4603      	mov	r3, r0
 800a310:	e7f0      	b.n	800a2f4 <memmove+0x9c>
 800a312:	4662      	mov	r2, ip
 800a314:	2a00      	cmp	r2, #0
 800a316:	d1ed      	bne.n	800a2f4 <memmove+0x9c>
 800a318:	e7b0      	b.n	800a27c <memmove+0x24>
 800a31a:	bf00      	nop

0800a31c <__malloc_lock>:
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <__malloc_unlock>:
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop

0800a324 <_Balloc>:
 800a324:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a326:	b570      	push	{r4, r5, r6, lr}
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b14a      	cbz	r2, 800a342 <_Balloc+0x1e>
 800a32e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800a332:	b180      	cbz	r0, 800a356 <_Balloc+0x32>
 800a334:	6801      	ldr	r1, [r0, #0]
 800a336:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a33a:	2200      	movs	r2, #0
 800a33c:	6102      	str	r2, [r0, #16]
 800a33e:	60c2      	str	r2, [r0, #12]
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	2221      	movs	r2, #33	; 0x21
 800a344:	2104      	movs	r1, #4
 800a346:	f000 fe21 	bl	800af8c <_calloc_r>
 800a34a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a34c:	4602      	mov	r2, r0
 800a34e:	2800      	cmp	r0, #0
 800a350:	d1ed      	bne.n	800a32e <_Balloc+0xa>
 800a352:	2000      	movs	r0, #0
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	2101      	movs	r1, #1
 800a358:	fa01 f604 	lsl.w	r6, r1, r4
 800a35c:	1d72      	adds	r2, r6, #5
 800a35e:	4628      	mov	r0, r5
 800a360:	0092      	lsls	r2, r2, #2
 800a362:	f000 fe13 	bl	800af8c <_calloc_r>
 800a366:	2800      	cmp	r0, #0
 800a368:	d0f3      	beq.n	800a352 <_Balloc+0x2e>
 800a36a:	6044      	str	r4, [r0, #4]
 800a36c:	6086      	str	r6, [r0, #8]
 800a36e:	e7e4      	b.n	800a33a <_Balloc+0x16>

0800a370 <_Bfree>:
 800a370:	b131      	cbz	r1, 800a380 <_Bfree+0x10>
 800a372:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a374:	684a      	ldr	r2, [r1, #4]
 800a376:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a37a:	6008      	str	r0, [r1, #0]
 800a37c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop

0800a384 <__multadd>:
 800a384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a388:	f8d1 8010 	ldr.w	r8, [r1, #16]
 800a38c:	b082      	sub	sp, #8
 800a38e:	4689      	mov	r9, r1
 800a390:	4682      	mov	sl, r0
 800a392:	f101 0514 	add.w	r5, r1, #20
 800a396:	2400      	movs	r4, #0
 800a398:	682f      	ldr	r7, [r5, #0]
 800a39a:	b2be      	uxth	r6, r7
 800a39c:	0c3f      	lsrs	r7, r7, #16
 800a39e:	fb02 3606 	mla	r6, r2, r6, r3
 800a3a2:	fb02 f307 	mul.w	r3, r2, r7
 800a3a6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 800a3aa:	3401      	adds	r4, #1
 800a3ac:	b2b6      	uxth	r6, r6
 800a3ae:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 800a3b2:	45a0      	cmp	r8, r4
 800a3b4:	f845 6b04 	str.w	r6, [r5], #4
 800a3b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a3bc:	dcec      	bgt.n	800a398 <__multadd+0x14>
 800a3be:	b153      	cbz	r3, 800a3d6 <__multadd+0x52>
 800a3c0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a3c4:	4590      	cmp	r8, r2
 800a3c6:	da0a      	bge.n	800a3de <__multadd+0x5a>
 800a3c8:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 800a3cc:	f108 0201 	add.w	r2, r8, #1
 800a3d0:	614b      	str	r3, [r1, #20]
 800a3d2:	f8c9 2010 	str.w	r2, [r9, #16]
 800a3d6:	4648      	mov	r0, r9
 800a3d8:	b002      	add	sp, #8
 800a3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3de:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3e2:	9301      	str	r3, [sp, #4]
 800a3e4:	3101      	adds	r1, #1
 800a3e6:	4650      	mov	r0, sl
 800a3e8:	f7ff ff9c 	bl	800a324 <_Balloc>
 800a3ec:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a3f0:	3202      	adds	r2, #2
 800a3f2:	f109 010c 	add.w	r1, r9, #12
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	0092      	lsls	r2, r2, #2
 800a3fa:	300c      	adds	r0, #12
 800a3fc:	f7f5 ff46 	bl	800028c <memcpy>
 800a400:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 800a404:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800a40e:	f8c9 0000 	str.w	r0, [r9]
 800a412:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 800a416:	46a1      	mov	r9, r4
 800a418:	e7d6      	b.n	800a3c8 <__multadd+0x44>
 800a41a:	bf00      	nop

0800a41c <__hi0bits>:
 800a41c:	0c03      	lsrs	r3, r0, #16
 800a41e:	bf06      	itte	eq
 800a420:	0400      	lsleq	r0, r0, #16
 800a422:	2310      	moveq	r3, #16
 800a424:	2300      	movne	r3, #0
 800a426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a42a:	bf04      	itt	eq
 800a42c:	0200      	lsleq	r0, r0, #8
 800a42e:	3308      	addeq	r3, #8
 800a430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a434:	bf04      	itt	eq
 800a436:	0100      	lsleq	r0, r0, #4
 800a438:	3304      	addeq	r3, #4
 800a43a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a43e:	bf04      	itt	eq
 800a440:	0080      	lsleq	r0, r0, #2
 800a442:	3302      	addeq	r3, #2
 800a444:	2800      	cmp	r0, #0
 800a446:	db05      	blt.n	800a454 <__hi0bits+0x38>
 800a448:	0042      	lsls	r2, r0, #1
 800a44a:	d401      	bmi.n	800a450 <__hi0bits+0x34>
 800a44c:	2020      	movs	r0, #32
 800a44e:	4770      	bx	lr
 800a450:	1c58      	adds	r0, r3, #1
 800a452:	4770      	bx	lr
 800a454:	4618      	mov	r0, r3
 800a456:	4770      	bx	lr

0800a458 <__lo0bits>:
 800a458:	6803      	ldr	r3, [r0, #0]
 800a45a:	f013 0207 	ands.w	r2, r3, #7
 800a45e:	d00b      	beq.n	800a478 <__lo0bits+0x20>
 800a460:	07d9      	lsls	r1, r3, #31
 800a462:	d424      	bmi.n	800a4ae <__lo0bits+0x56>
 800a464:	079a      	lsls	r2, r3, #30
 800a466:	bf4b      	itete	mi
 800a468:	085b      	lsrmi	r3, r3, #1
 800a46a:	089b      	lsrpl	r3, r3, #2
 800a46c:	6003      	strmi	r3, [r0, #0]
 800a46e:	6003      	strpl	r3, [r0, #0]
 800a470:	bf4c      	ite	mi
 800a472:	2001      	movmi	r0, #1
 800a474:	2002      	movpl	r0, #2
 800a476:	4770      	bx	lr
 800a478:	b299      	uxth	r1, r3
 800a47a:	b909      	cbnz	r1, 800a480 <__lo0bits+0x28>
 800a47c:	0c1b      	lsrs	r3, r3, #16
 800a47e:	2210      	movs	r2, #16
 800a480:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a484:	bf04      	itt	eq
 800a486:	0a1b      	lsreq	r3, r3, #8
 800a488:	3208      	addeq	r2, #8
 800a48a:	0719      	lsls	r1, r3, #28
 800a48c:	bf04      	itt	eq
 800a48e:	091b      	lsreq	r3, r3, #4
 800a490:	3204      	addeq	r2, #4
 800a492:	0799      	lsls	r1, r3, #30
 800a494:	bf04      	itt	eq
 800a496:	089b      	lsreq	r3, r3, #2
 800a498:	3202      	addeq	r2, #2
 800a49a:	07d9      	lsls	r1, r3, #31
 800a49c:	d404      	bmi.n	800a4a8 <__lo0bits+0x50>
 800a49e:	085b      	lsrs	r3, r3, #1
 800a4a0:	d101      	bne.n	800a4a6 <__lo0bits+0x4e>
 800a4a2:	2020      	movs	r0, #32
 800a4a4:	4770      	bx	lr
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4770      	bx	lr
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop

0800a4b4 <__i2b>:
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	f7ff ff33 	bl	800a324 <_Balloc>
 800a4be:	2201      	movs	r2, #1
 800a4c0:	6144      	str	r4, [r0, #20]
 800a4c2:	6102      	str	r2, [r0, #16]
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	bf00      	nop

0800a4c8 <__multiply>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	690c      	ldr	r4, [r1, #16]
 800a4ce:	6917      	ldr	r7, [r2, #16]
 800a4d0:	42bc      	cmp	r4, r7
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	4688      	mov	r8, r1
 800a4d6:	4691      	mov	r9, r2
 800a4d8:	da04      	bge.n	800a4e4 <__multiply+0x1c>
 800a4da:	4622      	mov	r2, r4
 800a4dc:	46c8      	mov	r8, r9
 800a4de:	463c      	mov	r4, r7
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	4617      	mov	r7, r2
 800a4e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4ec:	19e6      	adds	r6, r4, r7
 800a4ee:	429e      	cmp	r6, r3
 800a4f0:	bfc8      	it	gt
 800a4f2:	3101      	addgt	r1, #1
 800a4f4:	f7ff ff16 	bl	800a324 <_Balloc>
 800a4f8:	f100 0514 	add.w	r5, r0, #20
 800a4fc:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800a500:	4565      	cmp	r5, ip
 800a502:	9001      	str	r0, [sp, #4]
 800a504:	bf3c      	itt	cc
 800a506:	462b      	movcc	r3, r5
 800a508:	2000      	movcc	r0, #0
 800a50a:	d203      	bcs.n	800a514 <__multiply+0x4c>
 800a50c:	f843 0b04 	str.w	r0, [r3], #4
 800a510:	459c      	cmp	ip, r3
 800a512:	d8fb      	bhi.n	800a50c <__multiply+0x44>
 800a514:	f109 0914 	add.w	r9, r9, #20
 800a518:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 800a51c:	4599      	cmp	r9, r3
 800a51e:	f108 0814 	add.w	r8, r8, #20
 800a522:	bf38      	it	cc
 800a524:	f8cd c008 	strcc.w	ip, [sp, #8]
 800a528:	f8cd 8000 	str.w	r8, [sp]
 800a52c:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 800a530:	bf3e      	ittt	cc
 800a532:	464f      	movcc	r7, r9
 800a534:	469c      	movcc	ip, r3
 800a536:	9603      	strcc	r6, [sp, #12]
 800a538:	d25c      	bcs.n	800a5f4 <__multiply+0x12c>
 800a53a:	f857 3b04 	ldr.w	r3, [r7], #4
 800a53e:	fa1f f883 	uxth.w	r8, r3
 800a542:	f1b8 0f00 	cmp.w	r8, #0
 800a546:	d024      	beq.n	800a592 <__multiply+0xca>
 800a548:	9a00      	ldr	r2, [sp, #0]
 800a54a:	462b      	mov	r3, r5
 800a54c:	f04f 0900 	mov.w	r9, #0
 800a550:	e000      	b.n	800a554 <__multiply+0x8c>
 800a552:	460b      	mov	r3, r1
 800a554:	f852 6b04 	ldr.w	r6, [r2], #4
 800a558:	6819      	ldr	r1, [r3, #0]
 800a55a:	fa1f fb86 	uxth.w	fp, r6
 800a55e:	fa1f fa81 	uxth.w	sl, r1
 800a562:	0c30      	lsrs	r0, r6, #16
 800a564:	0c09      	lsrs	r1, r1, #16
 800a566:	fb08 a60b 	mla	r6, r8, fp, sl
 800a56a:	44b1      	add	r9, r6
 800a56c:	fb08 1000 	mla	r0, r8, r0, r1
 800a570:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 800a574:	4619      	mov	r1, r3
 800a576:	fa1f f989 	uxth.w	r9, r9
 800a57a:	ea49 4600 	orr.w	r6, r9, r0, lsl #16
 800a57e:	4294      	cmp	r4, r2
 800a580:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800a584:	f841 6b04 	str.w	r6, [r1], #4
 800a588:	d8e3      	bhi.n	800a552 <__multiply+0x8a>
 800a58a:	f8c3 9004 	str.w	r9, [r3, #4]
 800a58e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a592:	ea5f 4913 	movs.w	r9, r3, lsr #16
 800a596:	d026      	beq.n	800a5e6 <__multiply+0x11e>
 800a598:	f8d5 a000 	ldr.w	sl, [r5]
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	f04f 0b00 	mov.w	fp, #0
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	465e      	mov	r6, fp
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	e000      	b.n	800a5ac <__multiply+0xe4>
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	f8b3 b000 	ldrh.w	fp, [r3]
 800a5b0:	0c00      	lsrs	r0, r0, #16
 800a5b2:	fb09 0b0b 	mla	fp, r9, fp, r0
 800a5b6:	44b3      	add	fp, r6
 800a5b8:	fa1f f08a 	uxth.w	r0, sl
 800a5bc:	460a      	mov	r2, r1
 800a5be:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 800a5c2:	f842 0b04 	str.w	r0, [r2], #4
 800a5c6:	f853 ab04 	ldr.w	sl, [r3], #4
 800a5ca:	6848      	ldr	r0, [r1, #4]
 800a5cc:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800a5d0:	b286      	uxth	r6, r0
 800a5d2:	fb09 6a0a 	mla	sl, r9, sl, r6
 800a5d6:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 800a5da:	429c      	cmp	r4, r3
 800a5dc:	ea4f 461a 	mov.w	r6, sl, lsr #16
 800a5e0:	d8e3      	bhi.n	800a5aa <__multiply+0xe2>
 800a5e2:	f8c1 a004 	str.w	sl, [r1, #4]
 800a5e6:	45bc      	cmp	ip, r7
 800a5e8:	f105 0504 	add.w	r5, r5, #4
 800a5ec:	d8a5      	bhi.n	800a53a <__multiply+0x72>
 800a5ee:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a5f2:	9e03      	ldr	r6, [sp, #12]
 800a5f4:	2e00      	cmp	r6, #0
 800a5f6:	dd0a      	ble.n	800a60e <__multiply+0x146>
 800a5f8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800a5fc:	f1ac 0c04 	sub.w	ip, ip, #4
 800a600:	b11b      	cbz	r3, 800a60a <__multiply+0x142>
 800a602:	e004      	b.n	800a60e <__multiply+0x146>
 800a604:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800a608:	b90b      	cbnz	r3, 800a60e <__multiply+0x146>
 800a60a:	3e01      	subs	r6, #1
 800a60c:	d1fa      	bne.n	800a604 <__multiply+0x13c>
 800a60e:	9a01      	ldr	r2, [sp, #4]
 800a610:	4610      	mov	r0, r2
 800a612:	6116      	str	r6, [r2, #16]
 800a614:	b005      	add	sp, #20
 800a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61a:	bf00      	nop

0800a61c <__pow5mult>:
 800a61c:	f012 0303 	ands.w	r3, r2, #3
 800a620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a624:	4614      	mov	r4, r2
 800a626:	4607      	mov	r7, r0
 800a628:	460e      	mov	r6, r1
 800a62a:	d12c      	bne.n	800a686 <__pow5mult+0x6a>
 800a62c:	10a4      	asrs	r4, r4, #2
 800a62e:	d01c      	beq.n	800a66a <__pow5mult+0x4e>
 800a630:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800a632:	2d00      	cmp	r5, #0
 800a634:	d033      	beq.n	800a69e <__pow5mult+0x82>
 800a636:	f04f 0800 	mov.w	r8, #0
 800a63a:	e004      	b.n	800a646 <__pow5mult+0x2a>
 800a63c:	1064      	asrs	r4, r4, #1
 800a63e:	d014      	beq.n	800a66a <__pow5mult+0x4e>
 800a640:	6828      	ldr	r0, [r5, #0]
 800a642:	b1a8      	cbz	r0, 800a670 <__pow5mult+0x54>
 800a644:	4605      	mov	r5, r0
 800a646:	07e0      	lsls	r0, r4, #31
 800a648:	d5f8      	bpl.n	800a63c <__pow5mult+0x20>
 800a64a:	4638      	mov	r0, r7
 800a64c:	4631      	mov	r1, r6
 800a64e:	462a      	mov	r2, r5
 800a650:	f7ff ff3a 	bl	800a4c8 <__multiply>
 800a654:	b1ae      	cbz	r6, 800a682 <__pow5mult+0x66>
 800a656:	6872      	ldr	r2, [r6, #4]
 800a658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a65a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a65e:	1064      	asrs	r4, r4, #1
 800a660:	6031      	str	r1, [r6, #0]
 800a662:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800a666:	4606      	mov	r6, r0
 800a668:	d1ea      	bne.n	800a640 <__pow5mult+0x24>
 800a66a:	4630      	mov	r0, r6
 800a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a670:	4638      	mov	r0, r7
 800a672:	4629      	mov	r1, r5
 800a674:	462a      	mov	r2, r5
 800a676:	f7ff ff27 	bl	800a4c8 <__multiply>
 800a67a:	6028      	str	r0, [r5, #0]
 800a67c:	f8c0 8000 	str.w	r8, [r0]
 800a680:	e7e0      	b.n	800a644 <__pow5mult+0x28>
 800a682:	4606      	mov	r6, r0
 800a684:	e7da      	b.n	800a63c <__pow5mult+0x20>
 800a686:	f64b 32c0 	movw	r2, #48064	; 0xbbc0
 800a68a:	1e5d      	subs	r5, r3, #1
 800a68c:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a690:	2300      	movs	r3, #0
 800a692:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800a696:	f7ff fe75 	bl	800a384 <__multadd>
 800a69a:	4606      	mov	r6, r0
 800a69c:	e7c6      	b.n	800a62c <__pow5mult+0x10>
 800a69e:	2101      	movs	r1, #1
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff fe3f 	bl	800a324 <_Balloc>
 800a6a6:	f240 2171 	movw	r1, #625	; 0x271
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6141      	str	r1, [r0, #20]
 800a6b0:	6102      	str	r2, [r0, #16]
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	64b8      	str	r0, [r7, #72]	; 0x48
 800a6b6:	6003      	str	r3, [r0, #0]
 800a6b8:	e7bd      	b.n	800a636 <__pow5mult+0x1a>
 800a6ba:	bf00      	nop

0800a6bc <__lshift>:
 800a6bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	4693      	mov	fp, r2
 800a6c2:	690a      	ldr	r2, [r1, #16]
 800a6c4:	688b      	ldr	r3, [r1, #8]
 800a6c6:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 800a6ca:	eb0a 0902 	add.w	r9, sl, r2
 800a6ce:	f109 0601 	add.w	r6, r9, #1
 800a6d2:	429e      	cmp	r6, r3
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	4680      	mov	r8, r0
 800a6d8:	6849      	ldr	r1, [r1, #4]
 800a6da:	dd04      	ble.n	800a6e6 <__lshift+0x2a>
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	429e      	cmp	r6, r3
 800a6e0:	f101 0101 	add.w	r1, r1, #1
 800a6e4:	dcfa      	bgt.n	800a6dc <__lshift+0x20>
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	f7ff fe1c 	bl	800a324 <_Balloc>
 800a6ec:	f1ba 0f00 	cmp.w	sl, #0
 800a6f0:	f100 0414 	add.w	r4, r0, #20
 800a6f4:	dd09      	ble.n	800a70a <__lshift+0x4e>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4625      	mov	r5, r4
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	4553      	cmp	r3, sl
 800a700:	f845 2b04 	str.w	r2, [r5], #4
 800a704:	d1fa      	bne.n	800a6fc <__lshift+0x40>
 800a706:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	f107 0314 	add.w	r3, r7, #20
 800a710:	f01b 0b1f 	ands.w	fp, fp, #31
 800a714:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800a718:	d021      	beq.n	800a75e <__lshift+0xa2>
 800a71a:	f1cb 0a20 	rsb	sl, fp, #32
 800a71e:	2200      	movs	r2, #0
 800a720:	e000      	b.n	800a724 <__lshift+0x68>
 800a722:	462c      	mov	r4, r5
 800a724:	6819      	ldr	r1, [r3, #0]
 800a726:	4625      	mov	r5, r4
 800a728:	fa01 f10b 	lsl.w	r1, r1, fp
 800a72c:	430a      	orrs	r2, r1
 800a72e:	f845 2b04 	str.w	r2, [r5], #4
 800a732:	f853 2b04 	ldr.w	r2, [r3], #4
 800a736:	4563      	cmp	r3, ip
 800a738:	fa22 f20a 	lsr.w	r2, r2, sl
 800a73c:	d3f1      	bcc.n	800a722 <__lshift+0x66>
 800a73e:	6062      	str	r2, [r4, #4]
 800a740:	b10a      	cbz	r2, 800a746 <__lshift+0x8a>
 800a742:	f109 0602 	add.w	r6, r9, #2
 800a746:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a750:	3e01      	subs	r6, #1
 800a752:	6106      	str	r6, [r0, #16]
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800a75a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a762:	459c      	cmp	ip, r3
 800a764:	f844 2b04 	str.w	r2, [r4], #4
 800a768:	d9ed      	bls.n	800a746 <__lshift+0x8a>
 800a76a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a76e:	459c      	cmp	ip, r3
 800a770:	f844 2b04 	str.w	r2, [r4], #4
 800a774:	d8f3      	bhi.n	800a75e <__lshift+0xa2>
 800a776:	e7e6      	b.n	800a746 <__lshift+0x8a>

0800a778 <__mcmp>:
 800a778:	6902      	ldr	r2, [r0, #16]
 800a77a:	690b      	ldr	r3, [r1, #16]
 800a77c:	1ad2      	subs	r2, r2, r3
 800a77e:	b410      	push	{r4}
 800a780:	bf18      	it	ne
 800a782:	4610      	movne	r0, r2
 800a784:	d112      	bne.n	800a7ac <__mcmp+0x34>
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	3014      	adds	r0, #20
 800a78a:	3114      	adds	r1, #20
 800a78c:	4419      	add	r1, r3
 800a78e:	4403      	add	r3, r0
 800a790:	e001      	b.n	800a796 <__mcmp+0x1e>
 800a792:	4298      	cmp	r0, r3
 800a794:	d20d      	bcs.n	800a7b2 <__mcmp+0x3a>
 800a796:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a79a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a79e:	42a2      	cmp	r2, r4
 800a7a0:	d0f7      	beq.n	800a792 <__mcmp+0x1a>
 800a7a2:	4294      	cmp	r4, r2
 800a7a4:	bf94      	ite	ls
 800a7a6:	2001      	movls	r0, #1
 800a7a8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop

0800a7bc <__mdiff>:
 800a7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	f7ff ffd5 	bl	800a778 <__mcmp>
 800a7ce:	1e07      	subs	r7, r0, #0
 800a7d0:	d054      	beq.n	800a87c <__mdiff+0xc0>
 800a7d2:	bfbc      	itt	lt
 800a7d4:	4623      	movlt	r3, r4
 800a7d6:	462c      	movlt	r4, r5
 800a7d8:	4630      	mov	r0, r6
 800a7da:	bfb8      	it	lt
 800a7dc:	461d      	movlt	r5, r3
 800a7de:	6861      	ldr	r1, [r4, #4]
 800a7e0:	bfac      	ite	ge
 800a7e2:	2700      	movge	r7, #0
 800a7e4:	2701      	movlt	r7, #1
 800a7e6:	f7ff fd9d 	bl	800a324 <_Balloc>
 800a7ea:	692a      	ldr	r2, [r5, #16]
 800a7ec:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a7f0:	60c7      	str	r7, [r0, #12]
 800a7f2:	3414      	adds	r4, #20
 800a7f4:	3514      	adds	r5, #20
 800a7f6:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800a7fa:	f100 0314 	add.w	r3, r0, #20
 800a7fe:	eb04 088c 	add.w	r8, r4, ip, lsl #2
 800a802:	2200      	movs	r2, #0
 800a804:	f854 6b04 	ldr.w	r6, [r4], #4
 800a808:	f855 7b04 	ldr.w	r7, [r5], #4
 800a80c:	fa12 f286 	uxtah	r2, r2, r6
 800a810:	b2b9      	uxth	r1, r7
 800a812:	0c3f      	lsrs	r7, r7, #16
 800a814:	1a51      	subs	r1, r2, r1
 800a816:	ebc7 4216 	rsb	r2, r7, r6, lsr #16
 800a81a:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800a81e:	b289      	uxth	r1, r1
 800a820:	ea41 4602 	orr.w	r6, r1, r2, lsl #16
 800a824:	45a9      	cmp	r9, r5
 800a826:	f843 6b04 	str.w	r6, [r3], #4
 800a82a:	ea4f 4222 	mov.w	r2, r2, asr #16
 800a82e:	4621      	mov	r1, r4
 800a830:	d8e8      	bhi.n	800a804 <__mdiff+0x48>
 800a832:	45a0      	cmp	r8, r4
 800a834:	461f      	mov	r7, r3
 800a836:	d915      	bls.n	800a864 <__mdiff+0xa8>
 800a838:	f851 5b04 	ldr.w	r5, [r1], #4
 800a83c:	fa12 f285 	uxtah	r2, r2, r5
 800a840:	0c2d      	lsrs	r5, r5, #16
 800a842:	eb05 4522 	add.w	r5, r5, r2, asr #16
 800a846:	b292      	uxth	r2, r2
 800a848:	ea42 4605 	orr.w	r6, r2, r5, lsl #16
 800a84c:	4588      	cmp	r8, r1
 800a84e:	f843 6b04 	str.w	r6, [r3], #4
 800a852:	ea4f 4225 	mov.w	r2, r5, asr #16
 800a856:	d8ef      	bhi.n	800a838 <__mdiff+0x7c>
 800a858:	43e3      	mvns	r3, r4
 800a85a:	4443      	add	r3, r8
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	3304      	adds	r3, #4
 800a862:	443b      	add	r3, r7
 800a864:	3b04      	subs	r3, #4
 800a866:	b92e      	cbnz	r6, 800a874 <__mdiff+0xb8>
 800a868:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a86c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a870:	2a00      	cmp	r2, #0
 800a872:	d0f9      	beq.n	800a868 <__mdiff+0xac>
 800a874:	f8c0 c010 	str.w	ip, [r0, #16]
 800a878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7ff fd50 	bl	800a324 <_Balloc>
 800a884:	2301      	movs	r3, #1
 800a886:	6147      	str	r7, [r0, #20]
 800a888:	6103      	str	r3, [r0, #16]
 800a88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88e:	bf00      	nop

0800a890 <__d2b>:
 800a890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a894:	4689      	mov	r9, r1
 800a896:	b083      	sub	sp, #12
 800a898:	2101      	movs	r1, #1
 800a89a:	ec55 4b10 	vmov	r4, r5, d0
 800a89e:	4690      	mov	r8, r2
 800a8a0:	f7ff fd40 	bl	800a324 <_Balloc>
 800a8a4:	f3c5 570a 	ubfx	r7, r5, #20, #11
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a8ae:	b10f      	cbz	r7, 800a8b4 <__d2b+0x24>
 800a8b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	b314      	cbz	r4, 800a8fe <__d2b+0x6e>
 800a8b8:	a802      	add	r0, sp, #8
 800a8ba:	f840 4d08 	str.w	r4, [r0, #-8]!
 800a8be:	4668      	mov	r0, sp
 800a8c0:	f7ff fdca 	bl	800a458 <__lo0bits>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d131      	bne.n	800a92c <__d2b+0x9c>
 800a8c8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800a8cc:	6172      	str	r2, [r6, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bf0c      	ite	eq
 800a8d2:	2401      	moveq	r4, #1
 800a8d4:	2402      	movne	r4, #2
 800a8d6:	61b3      	str	r3, [r6, #24]
 800a8d8:	6134      	str	r4, [r6, #16]
 800a8da:	b9d7      	cbnz	r7, 800a912 <__d2b+0x82>
 800a8dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8e4:	f8c9 0000 	str.w	r0, [r9]
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	f7ff fd97 	bl	800a41c <__hi0bits>
 800a8ee:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800a8f2:	f8c8 0000 	str.w	r0, [r8]
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	b003      	add	sp, #12
 800a8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8fe:	a801      	add	r0, sp, #4
 800a900:	f7ff fdaa 	bl	800a458 <__lo0bits>
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	2401      	movs	r4, #1
 800a908:	3020      	adds	r0, #32
 800a90a:	6173      	str	r3, [r6, #20]
 800a90c:	6134      	str	r4, [r6, #16]
 800a90e:	2f00      	cmp	r7, #0
 800a910:	d0e4      	beq.n	800a8dc <__d2b+0x4c>
 800a912:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800a916:	4407      	add	r7, r0
 800a918:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a91c:	f8c9 7000 	str.w	r7, [r9]
 800a920:	f8c8 0000 	str.w	r0, [r8]
 800a924:	4630      	mov	r0, r6
 800a926:	b003      	add	sp, #12
 800a928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800a930:	f1c0 0120 	rsb	r1, r0, #32
 800a934:	fa03 f101 	lsl.w	r1, r3, r1
 800a938:	430a      	orrs	r2, r1
 800a93a:	40c3      	lsrs	r3, r0
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	6172      	str	r2, [r6, #20]
 800a940:	e7c5      	b.n	800a8ce <__d2b+0x3e>
 800a942:	bf00      	nop

0800a944 <_putc_r>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	460d      	mov	r5, r1
 800a948:	4614      	mov	r4, r2
 800a94a:	4606      	mov	r6, r0
 800a94c:	b108      	cbz	r0, 800a952 <_putc_r+0xe>
 800a94e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a950:	b1d3      	cbz	r3, 800a988 <_putc_r+0x44>
 800a952:	68a3      	ldr	r3, [r4, #8]
 800a954:	3b01      	subs	r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	60a3      	str	r3, [r4, #8]
 800a95a:	db06      	blt.n	800a96a <_putc_r+0x26>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	701d      	strb	r5, [r3, #0]
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	6022      	str	r2, [r4, #0]
 800a966:	7818      	ldrb	r0, [r3, #0]
 800a968:	bd70      	pop	{r4, r5, r6, pc}
 800a96a:	69a2      	ldr	r2, [r4, #24]
 800a96c:	4293      	cmp	r3, r2
 800a96e:	db0e      	blt.n	800a98e <_putc_r+0x4a>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	701d      	strb	r5, [r3, #0]
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	7819      	ldrb	r1, [r3, #0]
 800a978:	290a      	cmp	r1, #10
 800a97a:	d1f2      	bne.n	800a962 <_putc_r+0x1e>
 800a97c:	4630      	mov	r0, r6
 800a97e:	4622      	mov	r2, r4
 800a980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a984:	f000 bab0 	b.w	800aee8 <__swbuf_r>
 800a988:	f7fe fd90 	bl	80094ac <__sinit>
 800a98c:	e7e1      	b.n	800a952 <_putc_r+0xe>
 800a98e:	4630      	mov	r0, r6
 800a990:	4629      	mov	r1, r5
 800a992:	4622      	mov	r2, r4
 800a994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a998:	f000 baa6 	b.w	800aee8 <__swbuf_r>

0800a99c <_realloc_r>:
 800a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	4690      	mov	r8, r2
 800a9a6:	4681      	mov	r9, r0
 800a9a8:	2900      	cmp	r1, #0
 800a9aa:	f000 8124 	beq.w	800abf6 <_realloc_r+0x25a>
 800a9ae:	f7ff fcb5 	bl	800a31c <__malloc_lock>
 800a9b2:	f108 060b 	add.w	r6, r8, #11
 800a9b6:	2e16      	cmp	r6, #22
 800a9b8:	bf8c      	ite	hi
 800a9ba:	f026 0607 	bichi.w	r6, r6, #7
 800a9be:	2210      	movls	r2, #16
 800a9c0:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800a9c4:	bf8d      	iteet	hi
 800a9c6:	0ff3      	lsrhi	r3, r6, #31
 800a9c8:	4616      	movls	r6, r2
 800a9ca:	2300      	movls	r3, #0
 800a9cc:	4632      	movhi	r2, r6
 800a9ce:	4546      	cmp	r6, r8
 800a9d0:	bf38      	it	cc
 800a9d2:	f043 0301 	orrcc.w	r3, r3, #1
 800a9d6:	f02c 0503 	bic.w	r5, ip, #3
 800a9da:	f1a4 0708 	sub.w	r7, r4, #8
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f040 810f 	bne.w	800ac02 <_realloc_r+0x266>
 800a9e4:	4295      	cmp	r5, r2
 800a9e6:	db15      	blt.n	800aa14 <_realloc_r+0x78>
 800a9e8:	4660      	mov	r0, ip
 800a9ea:	1bab      	subs	r3, r5, r6
 800a9ec:	2b0f      	cmp	r3, #15
 800a9ee:	f000 0c01 	and.w	ip, r0, #1
 800a9f2:	f200 80c6 	bhi.w	800ab82 <_realloc_r+0x1e6>
 800a9f6:	ea4c 0305 	orr.w	r3, ip, r5
 800a9fa:	443d      	add	r5, r7
 800a9fc:	607b      	str	r3, [r7, #4]
 800a9fe:	686b      	ldr	r3, [r5, #4]
 800aa00:	f043 0301 	orr.w	r3, r3, #1
 800aa04:	606b      	str	r3, [r5, #4]
 800aa06:	4648      	mov	r0, r9
 800aa08:	f7ff fc8a 	bl	800a320 <__malloc_unlock>
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	b003      	add	sp, #12
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa14:	f240 6a88 	movw	sl, #1672	; 0x688
 800aa18:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800aa1c:	1979      	adds	r1, r7, r5
 800aa1e:	f8da 0008 	ldr.w	r0, [sl, #8]
 800aa22:	4288      	cmp	r0, r1
 800aa24:	f000 80f2 	beq.w	800ac0c <_realloc_r+0x270>
 800aa28:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800aa2c:	f02e 0b01 	bic.w	fp, lr, #1
 800aa30:	448b      	add	fp, r1
 800aa32:	f8db b004 	ldr.w	fp, [fp, #4]
 800aa36:	f01b 0f01 	tst.w	fp, #1
 800aa3a:	bf1c      	itt	ne
 800aa3c:	469e      	movne	lr, r3
 800aa3e:	4671      	movne	r1, lr
 800aa40:	d054      	beq.n	800aaec <_realloc_r+0x150>
 800aa42:	f01c 0f01 	tst.w	ip, #1
 800aa46:	f040 80ad 	bne.w	800aba4 <_realloc_r+0x208>
 800aa4a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800aa4e:	ebc3 0b07 	rsb	fp, r3, r7
 800aa52:	f8db 3004 	ldr.w	r3, [fp, #4]
 800aa56:	f023 0303 	bic.w	r3, r3, #3
 800aa5a:	442b      	add	r3, r5
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	d052      	beq.n	800ab06 <_realloc_r+0x16a>
 800aa60:	4281      	cmp	r1, r0
 800aa62:	f000 811f 	beq.w	800aca4 <_realloc_r+0x308>
 800aa66:	449e      	add	lr, r3
 800aa68:	4596      	cmp	lr, r2
 800aa6a:	db4c      	blt.n	800ab06 <_realloc_r+0x16a>
 800aa6c:	68cb      	ldr	r3, [r1, #12]
 800aa6e:	688a      	ldr	r2, [r1, #8]
 800aa70:	465f      	mov	r7, fp
 800aa72:	60d3      	str	r3, [r2, #12]
 800aa74:	609a      	str	r2, [r3, #8]
 800aa76:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800aa7a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800aa7e:	1f2a      	subs	r2, r5, #4
 800aa80:	2a24      	cmp	r2, #36	; 0x24
 800aa82:	60cb      	str	r3, [r1, #12]
 800aa84:	6099      	str	r1, [r3, #8]
 800aa86:	f200 8165 	bhi.w	800ad54 <_realloc_r+0x3b8>
 800aa8a:	2a13      	cmp	r2, #19
 800aa8c:	bf98      	it	ls
 800aa8e:	463b      	movls	r3, r7
 800aa90:	d920      	bls.n	800aad4 <_realloc_r+0x138>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	f8cb 3008 	str.w	r3, [fp, #8]
 800aa98:	6863      	ldr	r3, [r4, #4]
 800aa9a:	2a1b      	cmp	r2, #27
 800aa9c:	f8cb 300c 	str.w	r3, [fp, #12]
 800aaa0:	bf9c      	itt	ls
 800aaa2:	3408      	addls	r4, #8
 800aaa4:	f10b 0310 	addls.w	r3, fp, #16
 800aaa8:	d914      	bls.n	800aad4 <_realloc_r+0x138>
 800aaaa:	68a3      	ldr	r3, [r4, #8]
 800aaac:	f8cb 3010 	str.w	r3, [fp, #16]
 800aab0:	68e3      	ldr	r3, [r4, #12]
 800aab2:	2a24      	cmp	r2, #36	; 0x24
 800aab4:	f8cb 3014 	str.w	r3, [fp, #20]
 800aab8:	bf03      	ittte	eq
 800aaba:	6923      	ldreq	r3, [r4, #16]
 800aabc:	f8cb 3018 	streq.w	r3, [fp, #24]
 800aac0:	6962      	ldreq	r2, [r4, #20]
 800aac2:	3410      	addne	r4, #16
 800aac4:	bf11      	iteee	ne
 800aac6:	f10b 0318 	addne.w	r3, fp, #24
 800aaca:	f10b 0320 	addeq.w	r3, fp, #32
 800aace:	f8cb 201c 	streq.w	r2, [fp, #28]
 800aad2:	3418      	addeq	r4, #24
 800aad4:	6822      	ldr	r2, [r4, #0]
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	6862      	ldr	r2, [r4, #4]
 800aada:	605a      	str	r2, [r3, #4]
 800aadc:	68a2      	ldr	r2, [r4, #8]
 800aade:	609a      	str	r2, [r3, #8]
 800aae0:	463c      	mov	r4, r7
 800aae2:	4675      	mov	r5, lr
 800aae4:	f8db 0004 	ldr.w	r0, [fp, #4]
 800aae8:	465f      	mov	r7, fp
 800aaea:	e77e      	b.n	800a9ea <_realloc_r+0x4e>
 800aaec:	f02e 0e03 	bic.w	lr, lr, #3
 800aaf0:	eb0e 0305 	add.w	r3, lr, r5
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	dba4      	blt.n	800aa42 <_realloc_r+0xa6>
 800aaf8:	68ca      	ldr	r2, [r1, #12]
 800aafa:	6889      	ldr	r1, [r1, #8]
 800aafc:	4660      	mov	r0, ip
 800aafe:	60ca      	str	r2, [r1, #12]
 800ab00:	461d      	mov	r5, r3
 800ab02:	6091      	str	r1, [r2, #8]
 800ab04:	e771      	b.n	800a9ea <_realloc_r+0x4e>
 800ab06:	4293      	cmp	r3, r2
 800ab08:	db4c      	blt.n	800aba4 <_realloc_r+0x208>
 800ab0a:	465f      	mov	r7, fp
 800ab0c:	f8db 100c 	ldr.w	r1, [fp, #12]
 800ab10:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800ab14:	1f2a      	subs	r2, r5, #4
 800ab16:	2a24      	cmp	r2, #36	; 0x24
 800ab18:	60c1      	str	r1, [r0, #12]
 800ab1a:	6088      	str	r0, [r1, #8]
 800ab1c:	f200 80b4 	bhi.w	800ac88 <_realloc_r+0x2ec>
 800ab20:	2a13      	cmp	r2, #19
 800ab22:	bf98      	it	ls
 800ab24:	463a      	movls	r2, r7
 800ab26:	d920      	bls.n	800ab6a <_realloc_r+0x1ce>
 800ab28:	6821      	ldr	r1, [r4, #0]
 800ab2a:	f8cb 1008 	str.w	r1, [fp, #8]
 800ab2e:	6861      	ldr	r1, [r4, #4]
 800ab30:	2a1b      	cmp	r2, #27
 800ab32:	f8cb 100c 	str.w	r1, [fp, #12]
 800ab36:	bf9c      	itt	ls
 800ab38:	3408      	addls	r4, #8
 800ab3a:	f10b 0210 	addls.w	r2, fp, #16
 800ab3e:	d914      	bls.n	800ab6a <_realloc_r+0x1ce>
 800ab40:	68a1      	ldr	r1, [r4, #8]
 800ab42:	f8cb 1010 	str.w	r1, [fp, #16]
 800ab46:	68e1      	ldr	r1, [r4, #12]
 800ab48:	2a24      	cmp	r2, #36	; 0x24
 800ab4a:	f8cb 1014 	str.w	r1, [fp, #20]
 800ab4e:	bf03      	ittte	eq
 800ab50:	6922      	ldreq	r2, [r4, #16]
 800ab52:	f8cb 2018 	streq.w	r2, [fp, #24]
 800ab56:	6961      	ldreq	r1, [r4, #20]
 800ab58:	3410      	addne	r4, #16
 800ab5a:	bf11      	iteee	ne
 800ab5c:	f10b 0218 	addne.w	r2, fp, #24
 800ab60:	f10b 0220 	addeq.w	r2, fp, #32
 800ab64:	f8cb 101c 	streq.w	r1, [fp, #28]
 800ab68:	3418      	addeq	r4, #24
 800ab6a:	6821      	ldr	r1, [r4, #0]
 800ab6c:	6011      	str	r1, [r2, #0]
 800ab6e:	6861      	ldr	r1, [r4, #4]
 800ab70:	6051      	str	r1, [r2, #4]
 800ab72:	68a1      	ldr	r1, [r4, #8]
 800ab74:	6091      	str	r1, [r2, #8]
 800ab76:	463c      	mov	r4, r7
 800ab78:	461d      	mov	r5, r3
 800ab7a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800ab7e:	465f      	mov	r7, fp
 800ab80:	e733      	b.n	800a9ea <_realloc_r+0x4e>
 800ab82:	19b9      	adds	r1, r7, r6
 800ab84:	f043 0201 	orr.w	r2, r3, #1
 800ab88:	ea4c 0606 	orr.w	r6, ip, r6
 800ab8c:	440b      	add	r3, r1
 800ab8e:	607e      	str	r6, [r7, #4]
 800ab90:	604a      	str	r2, [r1, #4]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	f042 0201 	orr.w	r2, r2, #1
 800ab98:	3108      	adds	r1, #8
 800ab9a:	605a      	str	r2, [r3, #4]
 800ab9c:	4648      	mov	r0, r9
 800ab9e:	f7fe fd57 	bl	8009650 <_free_r>
 800aba2:	e730      	b.n	800aa06 <_realloc_r+0x6a>
 800aba4:	4641      	mov	r1, r8
 800aba6:	4648      	mov	r0, r9
 800aba8:	f7ff f85c 	bl	8009c64 <_malloc_r>
 800abac:	4680      	mov	r8, r0
 800abae:	b1d8      	cbz	r0, 800abe8 <_realloc_r+0x24c>
 800abb0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800abb4:	f023 0201 	bic.w	r2, r3, #1
 800abb8:	443a      	add	r2, r7
 800abba:	f1a0 0108 	sub.w	r1, r0, #8
 800abbe:	4291      	cmp	r1, r2
 800abc0:	f000 80c1 	beq.w	800ad46 <_realloc_r+0x3aa>
 800abc4:	1f2a      	subs	r2, r5, #4
 800abc6:	2a24      	cmp	r2, #36	; 0x24
 800abc8:	d868      	bhi.n	800ac9c <_realloc_r+0x300>
 800abca:	2a13      	cmp	r2, #19
 800abcc:	bf9c      	itt	ls
 800abce:	4603      	movls	r3, r0
 800abd0:	4622      	movls	r2, r4
 800abd2:	d83a      	bhi.n	800ac4a <_realloc_r+0x2ae>
 800abd4:	6811      	ldr	r1, [r2, #0]
 800abd6:	6019      	str	r1, [r3, #0]
 800abd8:	6851      	ldr	r1, [r2, #4]
 800abda:	6059      	str	r1, [r3, #4]
 800abdc:	6892      	ldr	r2, [r2, #8]
 800abde:	609a      	str	r2, [r3, #8]
 800abe0:	4621      	mov	r1, r4
 800abe2:	4648      	mov	r0, r9
 800abe4:	f7fe fd34 	bl	8009650 <_free_r>
 800abe8:	4648      	mov	r0, r9
 800abea:	f7ff fb99 	bl	800a320 <__malloc_unlock>
 800abee:	4640      	mov	r0, r8
 800abf0:	b003      	add	sp, #12
 800abf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf6:	4611      	mov	r1, r2
 800abf8:	b003      	add	sp, #12
 800abfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfe:	f7ff b831 	b.w	8009c64 <_malloc_r>
 800ac02:	230c      	movs	r3, #12
 800ac04:	f8c9 3000 	str.w	r3, [r9]
 800ac08:	2000      	movs	r0, #0
 800ac0a:	e700      	b.n	800aa0e <_realloc_r+0x72>
 800ac0c:	6843      	ldr	r3, [r0, #4]
 800ac0e:	f023 0e03 	bic.w	lr, r3, #3
 800ac12:	f106 0110 	add.w	r1, r6, #16
 800ac16:	eb0e 0305 	add.w	r3, lr, r5
 800ac1a:	428b      	cmp	r3, r1
 800ac1c:	bfb8      	it	lt
 800ac1e:	4601      	movlt	r1, r0
 800ac20:	f6ff af0f 	blt.w	800aa42 <_realloc_r+0xa6>
 800ac24:	4437      	add	r7, r6
 800ac26:	1b9b      	subs	r3, r3, r6
 800ac28:	f043 0301 	orr.w	r3, r3, #1
 800ac2c:	f8ca 7008 	str.w	r7, [sl, #8]
 800ac30:	607b      	str	r3, [r7, #4]
 800ac32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	431e      	orrs	r6, r3
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	f844 6c04 	str.w	r6, [r4, #-4]
 800ac42:	f7ff fb6d 	bl	800a320 <__malloc_unlock>
 800ac46:	4620      	mov	r0, r4
 800ac48:	e6e1      	b.n	800aa0e <_realloc_r+0x72>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	2a1b      	cmp	r2, #27
 800ac52:	6043      	str	r3, [r0, #4]
 800ac54:	bf9c      	itt	ls
 800ac56:	f104 0208 	addls.w	r2, r4, #8
 800ac5a:	f100 0308 	addls.w	r3, r0, #8
 800ac5e:	d9b9      	bls.n	800abd4 <_realloc_r+0x238>
 800ac60:	68a3      	ldr	r3, [r4, #8]
 800ac62:	6083      	str	r3, [r0, #8]
 800ac64:	68e3      	ldr	r3, [r4, #12]
 800ac66:	2a24      	cmp	r2, #36	; 0x24
 800ac68:	60c3      	str	r3, [r0, #12]
 800ac6a:	bf03      	ittte	eq
 800ac6c:	6923      	ldreq	r3, [r4, #16]
 800ac6e:	6103      	streq	r3, [r0, #16]
 800ac70:	6962      	ldreq	r2, [r4, #20]
 800ac72:	f100 0310 	addne.w	r3, r0, #16
 800ac76:	bf09      	itett	eq
 800ac78:	6142      	streq	r2, [r0, #20]
 800ac7a:	f104 0210 	addne.w	r2, r4, #16
 800ac7e:	f100 0318 	addeq.w	r3, r0, #24
 800ac82:	f104 0218 	addeq.w	r2, r4, #24
 800ac86:	e7a5      	b.n	800abd4 <_realloc_r+0x238>
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	461d      	mov	r5, r3
 800ac8e:	463c      	mov	r4, r7
 800ac90:	f7ff fae2 	bl	800a258 <memmove>
 800ac94:	465f      	mov	r7, fp
 800ac96:	f8db 0004 	ldr.w	r0, [fp, #4]
 800ac9a:	e6a6      	b.n	800a9ea <_realloc_r+0x4e>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	f7ff fadb 	bl	800a258 <memmove>
 800aca2:	e79d      	b.n	800abe0 <_realloc_r+0x244>
 800aca4:	eb0e 0c03 	add.w	ip, lr, r3
 800aca8:	f106 0110 	add.w	r1, r6, #16
 800acac:	458c      	cmp	ip, r1
 800acae:	f6ff af2a 	blt.w	800ab06 <_realloc_r+0x16a>
 800acb2:	465f      	mov	r7, fp
 800acb4:	f8db 300c 	ldr.w	r3, [fp, #12]
 800acb8:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800acbc:	1f2a      	subs	r2, r5, #4
 800acbe:	2a24      	cmp	r2, #36	; 0x24
 800acc0:	60cb      	str	r3, [r1, #12]
 800acc2:	6099      	str	r1, [r3, #8]
 800acc4:	d850      	bhi.n	800ad68 <_realloc_r+0x3cc>
 800acc6:	2a13      	cmp	r2, #19
 800acc8:	bf98      	it	ls
 800acca:	463b      	movls	r3, r7
 800accc:	d920      	bls.n	800ad10 <_realloc_r+0x374>
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	f8cb 3008 	str.w	r3, [fp, #8]
 800acd4:	6863      	ldr	r3, [r4, #4]
 800acd6:	2a1b      	cmp	r2, #27
 800acd8:	f8cb 300c 	str.w	r3, [fp, #12]
 800acdc:	bf9c      	itt	ls
 800acde:	3408      	addls	r4, #8
 800ace0:	f10b 0310 	addls.w	r3, fp, #16
 800ace4:	d914      	bls.n	800ad10 <_realloc_r+0x374>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	f8cb 3010 	str.w	r3, [fp, #16]
 800acec:	68e3      	ldr	r3, [r4, #12]
 800acee:	2a24      	cmp	r2, #36	; 0x24
 800acf0:	f8cb 3014 	str.w	r3, [fp, #20]
 800acf4:	bf03      	ittte	eq
 800acf6:	6923      	ldreq	r3, [r4, #16]
 800acf8:	f8cb 3018 	streq.w	r3, [fp, #24]
 800acfc:	6962      	ldreq	r2, [r4, #20]
 800acfe:	3410      	addne	r4, #16
 800ad00:	bf11      	iteee	ne
 800ad02:	f10b 0318 	addne.w	r3, fp, #24
 800ad06:	f10b 0320 	addeq.w	r3, fp, #32
 800ad0a:	f8cb 201c 	streq.w	r2, [fp, #28]
 800ad0e:	3418      	addeq	r4, #24
 800ad10:	6822      	ldr	r2, [r4, #0]
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	6862      	ldr	r2, [r4, #4]
 800ad16:	605a      	str	r2, [r3, #4]
 800ad18:	68a2      	ldr	r2, [r4, #8]
 800ad1a:	609a      	str	r2, [r3, #8]
 800ad1c:	eb0b 0306 	add.w	r3, fp, r6
 800ad20:	ebc6 020c 	rsb	r2, r6, ip
 800ad24:	f042 0201 	orr.w	r2, r2, #1
 800ad28:	f8ca 3008 	str.w	r3, [sl, #8]
 800ad2c:	605a      	str	r2, [r3, #4]
 800ad2e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	431e      	orrs	r6, r3
 800ad38:	4648      	mov	r0, r9
 800ad3a:	f8cb 6004 	str.w	r6, [fp, #4]
 800ad3e:	f7ff faef 	bl	800a320 <__malloc_unlock>
 800ad42:	4638      	mov	r0, r7
 800ad44:	e663      	b.n	800aa0e <_realloc_r+0x72>
 800ad46:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ad4a:	f022 0203 	bic.w	r2, r2, #3
 800ad4e:	4415      	add	r5, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	e64a      	b.n	800a9ea <_realloc_r+0x4e>
 800ad54:	4621      	mov	r1, r4
 800ad56:	4638      	mov	r0, r7
 800ad58:	4675      	mov	r5, lr
 800ad5a:	463c      	mov	r4, r7
 800ad5c:	f7ff fa7c 	bl	800a258 <memmove>
 800ad60:	465f      	mov	r7, fp
 800ad62:	f8db 0004 	ldr.w	r0, [fp, #4]
 800ad66:	e640      	b.n	800a9ea <_realloc_r+0x4e>
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f8cd c004 	str.w	ip, [sp, #4]
 800ad70:	f7ff fa72 	bl	800a258 <memmove>
 800ad74:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ad78:	e7d0      	b.n	800ad1c <_realloc_r+0x380>
 800ad7a:	bf00      	nop

0800ad7c <__fpclassifyd>:
 800ad7c:	ec53 2b10 	vmov	r2, r3, d0
 800ad80:	ea52 0103 	orrs.w	r1, r2, r3
 800ad84:	d101      	bne.n	800ad8a <__fpclassifyd+0xe>
 800ad86:	2002      	movs	r0, #2
 800ad88:	4770      	bx	lr
 800ad8a:	f1d2 0101 	rsbs	r1, r2, #1
 800ad8e:	bf38      	it	cc
 800ad90:	2100      	movcc	r1, #0
 800ad92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad96:	bf08      	it	eq
 800ad98:	2a00      	cmpeq	r2, #0
 800ad9a:	d0f4      	beq.n	800ad86 <__fpclassifyd+0xa>
 800ad9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ada0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ada4:	f5a2 1080 	sub.w	r0, r2, #1048576	; 0x100000
 800ada8:	f6c7 73df 	movt	r3, #32735	; 0x7fdf
 800adac:	4298      	cmp	r0, r3
 800adae:	d801      	bhi.n	800adb4 <__fpclassifyd+0x38>
 800adb0:	2004      	movs	r0, #4
 800adb2:	4770      	bx	lr
 800adb4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800adb8:	d201      	bcs.n	800adbe <__fpclassifyd+0x42>
 800adba:	2003      	movs	r0, #3
 800adbc:	4770      	bx	lr
 800adbe:	2000      	movs	r0, #0
 800adc0:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800adc4:	4282      	cmp	r2, r0
 800adc6:	bf14      	ite	ne
 800adc8:	2000      	movne	r0, #0
 800adca:	f001 0001 	andeq.w	r0, r1, #1
 800adce:	4770      	bx	lr

0800add0 <__sread>:
 800add0:	b510      	push	{r4, lr}
 800add2:	460c      	mov	r4, r1
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	f7f7 f840 	bl	8001e5c <_read_r>
 800addc:	2800      	cmp	r0, #0
 800adde:	bfab      	itete	ge
 800ade0:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800ade2:	89a3      	ldrhlt	r3, [r4, #12]
 800ade4:	181b      	addge	r3, r3, r0
 800ade6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adea:	bfac      	ite	ge
 800adec:	6523      	strge	r3, [r4, #80]	; 0x50
 800adee:	81a3      	strhlt	r3, [r4, #12]
 800adf0:	bd10      	pop	{r4, pc}
 800adf2:	bf00      	nop

0800adf4 <__swrite>:
 800adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf8:	460c      	mov	r4, r1
 800adfa:	8989      	ldrh	r1, [r1, #12]
 800adfc:	461d      	mov	r5, r3
 800adfe:	05cb      	lsls	r3, r1, #23
 800ae00:	4616      	mov	r6, r2
 800ae02:	4607      	mov	r7, r0
 800ae04:	d506      	bpl.n	800ae14 <__swrite+0x20>
 800ae06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	f7f6 ff59 	bl	8001cc4 <_lseek_r>
 800ae12:	89a1      	ldrh	r1, [r4, #12]
 800ae14:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800ae18:	81a1      	strh	r1, [r4, #12]
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae20:	4632      	mov	r2, r6
 800ae22:	462b      	mov	r3, r5
 800ae24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	f7f7 b8a8 	b.w	8001f7c <_write_r>

0800ae2c <__sseek>:
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	460c      	mov	r4, r1
 800ae30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae34:	f7f6 ff46 	bl	8001cc4 <_lseek_r>
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	1c42      	adds	r2, r0, #1
 800ae3c:	bf0e      	itee	eq
 800ae3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae46:	6520      	strne	r0, [r4, #80]	; 0x50
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	bd10      	pop	{r4, pc}

0800ae4c <__sclose>:
 800ae4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae50:	f7f6 bf2e 	b.w	8001cb0 <_close_r>

0800ae54 <__sprint_r.part.0>:
 800ae54:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ae56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5a:	049c      	lsls	r4, r3, #18
 800ae5c:	460e      	mov	r6, r1
 800ae5e:	4680      	mov	r8, r0
 800ae60:	4691      	mov	r9, r2
 800ae62:	d52b      	bpl.n	800aebc <__sprint_r.part.0+0x68>
 800ae64:	6893      	ldr	r3, [r2, #8]
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	f102 0a08 	add.w	sl, r2, #8
 800ae6c:	b323      	cbz	r3, 800aeb8 <__sprint_r.part.0+0x64>
 800ae6e:	e91a 00a0 	ldmdb	sl, {r5, r7}
 800ae72:	08bf      	lsrs	r7, r7, #2
 800ae74:	bf1c      	itt	ne
 800ae76:	3d04      	subne	r5, #4
 800ae78:	2400      	movne	r4, #0
 800ae7a:	d102      	bne.n	800ae82 <__sprint_r.part.0+0x2e>
 800ae7c:	e014      	b.n	800aea8 <__sprint_r.part.0+0x54>
 800ae7e:	42a7      	cmp	r7, r4
 800ae80:	d010      	beq.n	800aea4 <__sprint_r.part.0+0x50>
 800ae82:	4640      	mov	r0, r8
 800ae84:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800ae88:	4632      	mov	r2, r6
 800ae8a:	f000 f8f9 	bl	800b080 <_fputwc_r>
 800ae8e:	1c43      	adds	r3, r0, #1
 800ae90:	f104 0401 	add.w	r4, r4, #1
 800ae94:	d1f3      	bne.n	800ae7e <__sprint_r.part.0+0x2a>
 800ae96:	2300      	movs	r3, #0
 800ae98:	f8c9 3008 	str.w	r3, [r9, #8]
 800ae9c:	f8c9 3004 	str.w	r3, [r9, #4]
 800aea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aea8:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 800aeac:	f8c9 3008 	str.w	r3, [r9, #8]
 800aeb0:	f10a 0a08 	add.w	sl, sl, #8
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1da      	bne.n	800ae6e <__sprint_r.part.0+0x1a>
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7ec      	b.n	800ae96 <__sprint_r.part.0+0x42>
 800aebc:	f7fe fc96 	bl	80097ec <__sfvwrite_r>
 800aec0:	2300      	movs	r3, #0
 800aec2:	f8c9 3008 	str.w	r3, [r9, #8]
 800aec6:	f8c9 3004 	str.w	r3, [r9, #4]
 800aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aece:	bf00      	nop

0800aed0 <__sprint_r>:
 800aed0:	6893      	ldr	r3, [r2, #8]
 800aed2:	b410      	push	{r4}
 800aed4:	b11b      	cbz	r3, 800aede <__sprint_r+0xe>
 800aed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeda:	f7ff bfbb 	b.w	800ae54 <__sprint_r.part.0>
 800aede:	4618      	mov	r0, r3
 800aee0:	6053      	str	r3, [r2, #4]
 800aee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <__swbuf_r>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	460d      	mov	r5, r1
 800aeec:	4614      	mov	r4, r2
 800aeee:	4607      	mov	r7, r0
 800aef0:	b110      	cbz	r0, 800aef8 <__swbuf_r+0x10>
 800aef2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d046      	beq.n	800af86 <__swbuf_r+0x9e>
 800aef8:	89a2      	ldrh	r2, [r4, #12]
 800aefa:	69a0      	ldr	r0, [r4, #24]
 800aefc:	b293      	uxth	r3, r2
 800aefe:	60a0      	str	r0, [r4, #8]
 800af00:	0718      	lsls	r0, r3, #28
 800af02:	d52d      	bpl.n	800af60 <__swbuf_r+0x78>
 800af04:	6926      	ldr	r6, [r4, #16]
 800af06:	2e00      	cmp	r6, #0
 800af08:	d02a      	beq.n	800af60 <__swbuf_r+0x78>
 800af0a:	0499      	lsls	r1, r3, #18
 800af0c:	bf5f      	itttt	pl
 800af0e:	6e63      	ldrpl	r3, [r4, #100]	; 0x64
 800af10:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 800af14:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800af18:	6663      	strpl	r3, [r4, #100]	; 0x64
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	bf58      	it	pl
 800af1e:	81a2      	strhpl	r2, [r4, #12]
 800af20:	6962      	ldr	r2, [r4, #20]
 800af22:	1b9e      	subs	r6, r3, r6
 800af24:	4296      	cmp	r6, r2
 800af26:	b2ed      	uxtb	r5, r5
 800af28:	bfb8      	it	lt
 800af2a:	3601      	addlt	r6, #1
 800af2c:	da22      	bge.n	800af74 <__swbuf_r+0x8c>
 800af2e:	68a2      	ldr	r2, [r4, #8]
 800af30:	1c59      	adds	r1, r3, #1
 800af32:	3a01      	subs	r2, #1
 800af34:	60a2      	str	r2, [r4, #8]
 800af36:	6021      	str	r1, [r4, #0]
 800af38:	701d      	strb	r5, [r3, #0]
 800af3a:	6963      	ldr	r3, [r4, #20]
 800af3c:	42b3      	cmp	r3, r6
 800af3e:	d006      	beq.n	800af4e <__swbuf_r+0x66>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	07db      	lsls	r3, r3, #31
 800af44:	d501      	bpl.n	800af4a <__swbuf_r+0x62>
 800af46:	2d0a      	cmp	r5, #10
 800af48:	d001      	beq.n	800af4e <__swbuf_r+0x66>
 800af4a:	4628      	mov	r0, r5
 800af4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af4e:	4638      	mov	r0, r7
 800af50:	4621      	mov	r1, r4
 800af52:	f7fe fa8f 	bl	8009474 <_fflush_r>
 800af56:	2800      	cmp	r0, #0
 800af58:	d0f7      	beq.n	800af4a <__swbuf_r+0x62>
 800af5a:	f04f 30ff 	mov.w	r0, #4294967295
 800af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af60:	4638      	mov	r0, r7
 800af62:	4621      	mov	r1, r4
 800af64:	f7fd f8d2 	bl	800810c <__swsetup_r>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1f6      	bne.n	800af5a <__swbuf_r+0x72>
 800af6c:	89a2      	ldrh	r2, [r4, #12]
 800af6e:	6926      	ldr	r6, [r4, #16]
 800af70:	b293      	uxth	r3, r2
 800af72:	e7ca      	b.n	800af0a <__swbuf_r+0x22>
 800af74:	4638      	mov	r0, r7
 800af76:	4621      	mov	r1, r4
 800af78:	f7fe fa7c 	bl	8009474 <_fflush_r>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d1ec      	bne.n	800af5a <__swbuf_r+0x72>
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	2601      	movs	r6, #1
 800af84:	e7d3      	b.n	800af2e <__swbuf_r+0x46>
 800af86:	f7fe fa91 	bl	80094ac <__sinit>
 800af8a:	e7b5      	b.n	800aef8 <__swbuf_r+0x10>

0800af8c <_calloc_r>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	fb02 f101 	mul.w	r1, r2, r1
 800af92:	f7fe fe67 	bl	8009c64 <_malloc_r>
 800af96:	4604      	mov	r4, r0
 800af98:	b170      	cbz	r0, 800afb8 <_calloc_r+0x2c>
 800af9a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800af9e:	f022 0203 	bic.w	r2, r2, #3
 800afa2:	3a04      	subs	r2, #4
 800afa4:	2a24      	cmp	r2, #36	; 0x24
 800afa6:	d81c      	bhi.n	800afe2 <_calloc_r+0x56>
 800afa8:	2a13      	cmp	r2, #19
 800afaa:	bf98      	it	ls
 800afac:	4603      	movls	r3, r0
 800afae:	d805      	bhi.n	800afbc <_calloc_r+0x30>
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	605a      	str	r2, [r3, #4]
 800afb6:	609a      	str	r2, [r3, #8]
 800afb8:	4620      	mov	r0, r4
 800afba:	bd10      	pop	{r4, pc}
 800afbc:	2300      	movs	r3, #0
 800afbe:	2a1b      	cmp	r2, #27
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	6043      	str	r3, [r0, #4]
 800afc4:	bf98      	it	ls
 800afc6:	f100 0308 	addls.w	r3, r0, #8
 800afca:	d9f1      	bls.n	800afb0 <_calloc_r+0x24>
 800afcc:	2a24      	cmp	r2, #36	; 0x24
 800afce:	6083      	str	r3, [r0, #8]
 800afd0:	60c3      	str	r3, [r0, #12]
 800afd2:	bf05      	ittet	eq
 800afd4:	6103      	streq	r3, [r0, #16]
 800afd6:	6143      	streq	r3, [r0, #20]
 800afd8:	f100 0310 	addne.w	r3, r0, #16
 800afdc:	f100 0318 	addeq.w	r3, r0, #24
 800afe0:	e7e6      	b.n	800afb0 <_calloc_r+0x24>
 800afe2:	2100      	movs	r1, #0
 800afe4:	f7fb fa50 	bl	8006488 <memset>
 800afe8:	4620      	mov	r0, r4
 800afea:	bd10      	pop	{r4, pc}

0800afec <_fclose_r>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	460c      	mov	r4, r1
 800aff0:	4605      	mov	r5, r0
 800aff2:	b131      	cbz	r1, 800b002 <_fclose_r+0x16>
 800aff4:	b110      	cbz	r0, 800affc <_fclose_r+0x10>
 800aff6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d030      	beq.n	800b05e <_fclose_r+0x72>
 800affc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b000:	b90b      	cbnz	r3, 800b006 <_fclose_r+0x1a>
 800b002:	2000      	movs	r0, #0
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	4628      	mov	r0, r5
 800b008:	4621      	mov	r1, r4
 800b00a:	f7fe fa33 	bl	8009474 <_fflush_r>
 800b00e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b010:	4606      	mov	r6, r0
 800b012:	b13b      	cbz	r3, 800b024 <_fclose_r+0x38>
 800b014:	4628      	mov	r0, r5
 800b016:	69e1      	ldr	r1, [r4, #28]
 800b018:	4798      	blx	r3
 800b01a:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 800b01e:	bf28      	it	cs
 800b020:	f04f 36ff 	movcs.w	r6, #4294967295
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	061b      	lsls	r3, r3, #24
 800b028:	d41c      	bmi.n	800b064 <_fclose_r+0x78>
 800b02a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b02c:	b141      	cbz	r1, 800b040 <_fclose_r+0x54>
 800b02e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b032:	4299      	cmp	r1, r3
 800b034:	d002      	beq.n	800b03c <_fclose_r+0x50>
 800b036:	4628      	mov	r0, r5
 800b038:	f7fe fb0a 	bl	8009650 <_free_r>
 800b03c:	2300      	movs	r3, #0
 800b03e:	6323      	str	r3, [r4, #48]	; 0x30
 800b040:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b042:	b121      	cbz	r1, 800b04e <_fclose_r+0x62>
 800b044:	4628      	mov	r0, r5
 800b046:	f7fe fb03 	bl	8009650 <_free_r>
 800b04a:	2300      	movs	r3, #0
 800b04c:	6463      	str	r3, [r4, #68]	; 0x44
 800b04e:	f7fe faa9 	bl	80095a4 <__sfp_lock_acquire>
 800b052:	2300      	movs	r3, #0
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	f7fe faa7 	bl	80095a8 <__sfp_lock_release>
 800b05a:	4630      	mov	r0, r6
 800b05c:	bd70      	pop	{r4, r5, r6, pc}
 800b05e:	f7fe fa25 	bl	80094ac <__sinit>
 800b062:	e7cb      	b.n	800affc <_fclose_r+0x10>
 800b064:	4628      	mov	r0, r5
 800b066:	6921      	ldr	r1, [r4, #16]
 800b068:	f7fe faf2 	bl	8009650 <_free_r>
 800b06c:	e7dd      	b.n	800b02a <_fclose_r+0x3e>
 800b06e:	bf00      	nop

0800b070 <fclose>:
 800b070:	f240 6328 	movw	r3, #1576	; 0x628
 800b074:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b078:	4601      	mov	r1, r0
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	f7ff bfb6 	b.w	800afec <_fclose_r>

0800b080 <_fputwc_r>:
 800b080:	8993      	ldrh	r3, [r2, #12]
 800b082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b086:	460f      	mov	r7, r1
 800b088:	0499      	lsls	r1, r3, #18
 800b08a:	4614      	mov	r4, r2
 800b08c:	bf5f      	itttt	pl
 800b08e:	6e52      	ldrpl	r2, [r2, #100]	; 0x64
 800b090:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800b094:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800b098:	81a3      	strhpl	r3, [r4, #12]
 800b09a:	bf58      	it	pl
 800b09c:	6662      	strpl	r2, [r4, #100]	; 0x64
 800b09e:	b082      	sub	sp, #8
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	f7fe fd59 	bl	8009b58 <__locale_mb_cur_max>
 800b0a6:	2801      	cmp	r0, #1
 800b0a8:	d03d      	beq.n	800b126 <_fputwc_r+0xa6>
 800b0aa:	463a      	mov	r2, r7
 800b0ac:	4640      	mov	r0, r8
 800b0ae:	a901      	add	r1, sp, #4
 800b0b0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800b0b4:	f000 f844 	bl	800b140 <_wcrtomb_r>
 800b0b8:	1c42      	adds	r2, r0, #1
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	d02c      	beq.n	800b118 <_fputwc_r+0x98>
 800b0be:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d037      	beq.n	800b136 <_fputwc_r+0xb6>
 800b0c6:	2500      	movs	r5, #0
 800b0c8:	e009      	b.n	800b0de <_fputwc_r+0x5e>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	7019      	strb	r1, [r3, #0]
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	6023      	str	r3, [r4, #0]
 800b0d4:	3501      	adds	r5, #1
 800b0d6:	42b5      	cmp	r5, r6
 800b0d8:	d22d      	bcs.n	800b136 <_fputwc_r+0xb6>
 800b0da:	ab01      	add	r3, sp, #4
 800b0dc:	5ce9      	ldrb	r1, [r5, r3]
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	60a3      	str	r3, [r4, #8]
 800b0e6:	daf0      	bge.n	800b0ca <_fputwc_r+0x4a>
 800b0e8:	69a2      	ldr	r2, [r4, #24]
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	db05      	blt.n	800b0fa <_fputwc_r+0x7a>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	7019      	strb	r1, [r3, #0]
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	7819      	ldrb	r1, [r3, #0]
 800b0f6:	290a      	cmp	r1, #10
 800b0f8:	d1ea      	bne.n	800b0d0 <_fputwc_r+0x50>
 800b0fa:	4640      	mov	r0, r8
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	f7ff fef3 	bl	800aee8 <__swbuf_r>
 800b102:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 800b106:	4258      	negs	r0, r3
 800b108:	4158      	adcs	r0, r3
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d0e2      	beq.n	800b0d4 <_fputwc_r+0x54>
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	b002      	add	sp, #8
 800b114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b11e:	81a3      	strh	r3, [r4, #12]
 800b120:	b002      	add	sp, #8
 800b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b126:	1e7b      	subs	r3, r7, #1
 800b128:	2bfe      	cmp	r3, #254	; 0xfe
 800b12a:	d8be      	bhi.n	800b0aa <_fputwc_r+0x2a>
 800b12c:	b2f9      	uxtb	r1, r7
 800b12e:	4606      	mov	r6, r0
 800b130:	f88d 1004 	strb.w	r1, [sp, #4]
 800b134:	e7c7      	b.n	800b0c6 <_fputwc_r+0x46>
 800b136:	4638      	mov	r0, r7
 800b138:	b002      	add	sp, #8
 800b13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13e:	bf00      	nop

0800b140 <_wcrtomb_r>:
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	460d      	mov	r5, r1
 800b146:	b086      	sub	sp, #24
 800b148:	4606      	mov	r6, r0
 800b14a:	4690      	mov	r8, r2
 800b14c:	461f      	mov	r7, r3
 800b14e:	b1a9      	cbz	r1, 800b17c <_wcrtomb_r+0x3c>
 800b150:	f640 2498 	movw	r4, #2712	; 0xa98
 800b154:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b158:	6824      	ldr	r4, [r4, #0]
 800b15a:	f7fe fcf7 	bl	8009b4c <__locale_charset>
 800b15e:	9700      	str	r7, [sp, #0]
 800b160:	4603      	mov	r3, r0
 800b162:	4629      	mov	r1, r5
 800b164:	4642      	mov	r2, r8
 800b166:	4630      	mov	r0, r6
 800b168:	47a0      	blx	r4
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	bf01      	itttt	eq
 800b16e:	2200      	moveq	r2, #0
 800b170:	238a      	moveq	r3, #138	; 0x8a
 800b172:	603a      	streq	r2, [r7, #0]
 800b174:	6033      	streq	r3, [r6, #0]
 800b176:	b006      	add	sp, #24
 800b178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b17c:	f640 2398 	movw	r3, #2712	; 0xa98
 800b180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b184:	681c      	ldr	r4, [r3, #0]
 800b186:	f7fe fce1 	bl	8009b4c <__locale_charset>
 800b18a:	9700      	str	r7, [sp, #0]
 800b18c:	4603      	mov	r3, r0
 800b18e:	462a      	mov	r2, r5
 800b190:	4630      	mov	r0, r6
 800b192:	a903      	add	r1, sp, #12
 800b194:	47a0      	blx	r4
 800b196:	e7e8      	b.n	800b16a <_wcrtomb_r+0x2a>

0800b198 <__ascii_wctomb>:
 800b198:	b149      	cbz	r1, 800b1ae <__ascii_wctomb+0x16>
 800b19a:	2aff      	cmp	r2, #255	; 0xff
 800b19c:	bf85      	ittet	hi
 800b19e:	238a      	movhi	r3, #138	; 0x8a
 800b1a0:	6003      	strhi	r3, [r0, #0]
 800b1a2:	700a      	strbls	r2, [r1, #0]
 800b1a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1a8:	bf98      	it	ls
 800b1aa:	2001      	movls	r0, #1
 800b1ac:	4770      	bx	lr
 800b1ae:	4608      	mov	r0, r1
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop

0800b1b4 <_init>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	bf00      	nop
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr

0800b1c0 <_fini>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr
